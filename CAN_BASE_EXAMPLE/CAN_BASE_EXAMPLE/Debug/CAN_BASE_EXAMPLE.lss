
CAN_BASE_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bb0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406bb0  00406bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00406bb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003e8  204009d8  00407590  000209d8  2**2
                  ALLOC
  4 .stack        00002000  20400dc0  00407978  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20402dc0  00409978  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ef49  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000425a  00000000  00000000  0003f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b02  00000000  00000000  00043c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d88  00000000  00000000  0004a704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e68  00000000  00000000  0004b48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025028  00000000  00000000  0004c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001262c  00000000  00000000  0007131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00098454  00000000  00000000  00083948  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002f74  00000000  00000000  0011bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2d 40 20 b9 15 40 00 b7 15 40 00 b7 15 40 00     .-@ ..@...@...@.
  400010:	b7 15 40 00 b7 15 40 00 b7 15 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b7 15 40 00 b7 15 40 00 00 00 00 00 b7 15 40 00     ..@...@.......@.
  40003c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40004c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40005c:	b7 15 40 00 b7 15 40 00 00 00 00 00 29 12 40 00     ..@...@.....).@.
  40006c:	3d 12 40 00 51 12 40 00 b7 15 40 00 b7 15 40 00     =.@.Q.@...@...@.
  40007c:	b7 15 40 00 65 12 40 00 79 12 40 00 b7 15 40 00     ..@.e.@.y.@...@.
  40008c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40009c:	69 07 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     i.@...@...@...@.
  4000ac:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  4000bc:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  4000cc:	b7 15 40 00 b7 15 40 00 b1 03 40 00 b7 15 40 00     ..@...@...@...@.
  4000dc:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  4000ec:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  4000fc:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40010c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ......@...@...@.
  40012c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40013c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40014c:	b7 15 40 00 b7 15 40 00 b7 15 40 00 b7 15 40 00     ..@...@...@...@.
  40015c:	b7 15 40 00 b7 15 40 00 b7 15 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009d8 	.word	0x204009d8
  400184:	00000000 	.word	0x00000000
  400188:	00406bb8 	.word	0x00406bb8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406bb8 	.word	0x00406bb8
  4001c8:	204009dc 	.word	0x204009dc
  4001cc:	00406bb8 	.word	0x00406bb8
  4001d0:	00000000 	.word	0x00000000

004001d4 <can_init>:
/**
 * \brief MCAN module initialization.
 *
 */
void can_init(void)
{
  4001d4:	b510      	push	{r4, lr}
  4001d6:	b08a      	sub	sp, #40	; 0x28
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4001d8:	2300      	movs	r3, #0
  4001da:	f88d 3004 	strb.w	r3, [sp, #4]
	config->watchdog_configuration = 0x00;
  4001de:	f88d 3005 	strb.w	r3, [sp, #5]
	config->transmit_pause = true;
  4001e2:	2201      	movs	r2, #1
  4001e4:	f88d 2006 	strb.w	r2, [sp, #6]
	config->edge_filtering = true;
  4001e8:	f88d 2007 	strb.w	r2, [sp, #7]
	config->protocol_exception_handling = true;
  4001ec:	f88d 2008 	strb.w	r2, [sp, #8]
	config->automatic_retransmission = true;
  4001f0:	f88d 2009 	strb.w	r2, [sp, #9]
	config->clock_stop_request = false;
  4001f4:	f88d 300a 	strb.w	r3, [sp, #10]
	config->clock_stop_acknowledge = false;
  4001f8:	f88d 300b 	strb.w	r3, [sp, #11]
	config->timestamp_prescaler = 0;
  4001fc:	f88d 300c 	strb.w	r3, [sp, #12]
	config->timeout_period = 0xFFFF;
  400200:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400204:	f8ad 100e 	strh.w	r1, [sp, #14]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  400208:	f88d 3010 	strb.w	r3, [sp, #16]
	config->timeout_enable = false;
  40020c:	f88d 3011 	strb.w	r3, [sp, #17]
	config->tdc_enable = false;
  400210:	f88d 3012 	strb.w	r3, [sp, #18]
	config->delay_compensation_offset = 0;
  400214:	f88d 3013 	strb.w	r3, [sp, #19]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
  400218:	f88d 3014 	strb.w	r3, [sp, #20]
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  40021c:	2102      	movs	r1, #2
  40021e:	f88d 1015 	strb.w	r1, [sp, #21]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  400222:	f88d 1016 	strb.w	r1, [sp, #22]
	config->remote_frames_standard_reject = true;
  400226:	f88d 2017 	strb.w	r2, [sp, #23]
	config->remote_frames_extended_reject = true;
  40022a:	f88d 2018 	strb.w	r2, [sp, #24]
	config->extended_id_mask = 0x1FFFFFFF;
  40022e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  400232:	9107      	str	r1, [sp, #28]
	config->rx_fifo_0_overwrite = true;
  400234:	f88d 2020 	strb.w	r2, [sp, #32]
	config->rx_fifo_0_watermark = 0;
  400238:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	config->rx_fifo_1_overwrite = true;
  40023c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	config->rx_fifo_1_watermark = 0;
  400240:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	config->tx_queue_mode = false;
  400244:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	config->tx_event_fifo_watermark = 0;
  400248:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	/* Initialize the module. */
	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
	mcan_set_baudrate(&mcan_instance, 500000);
  40024c:	4c05      	ldr	r4, [pc, #20]	; (400264 <can_init+0x90>)
  40024e:	4906      	ldr	r1, [pc, #24]	; (400268 <can_init+0x94>)
  400250:	4620      	mov	r0, r4
  400252:	4b06      	ldr	r3, [pc, #24]	; (40026c <can_init+0x98>)
  400254:	4798      	blx	r3
	mcan_init(&mcan_instance, MCAN_MODULE, &config_mcan);
  400256:	aa01      	add	r2, sp, #4
  400258:	4905      	ldr	r1, [pc, #20]	; (400270 <can_init+0x9c>)
  40025a:	4620      	mov	r0, r4
  40025c:	4b05      	ldr	r3, [pc, #20]	; (400274 <can_init+0xa0>)
  40025e:	4798      	blx	r3
}
  400260:	b00a      	add	sp, #40	; 0x28
  400262:	bd10      	pop	{r4, pc}
  400264:	204009f8 	.word	0x204009f8
  400268:	0007a120 	.word	0x0007a120
  40026c:	00400efd 	.word	0x00400efd
  400270:	40034000 	.word	0x40034000
  400274:	00400c89 	.word	0x00400c89

00400278 <can_enable_irq>:
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <can_enable_irq+0x1c>)
  40027a:	2220      	movs	r2, #32
  40027c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400280:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400284:	605a      	str	r2, [r3, #4]
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IE |= source;
  400286:	4b04      	ldr	r3, [pc, #16]	; (400298 <can_enable_irq+0x20>)
  400288:	681a      	ldr	r2, [r3, #0]
  40028a:	6d51      	ldr	r1, [r2, #84]	; 0x54
  40028c:	4b03      	ldr	r3, [pc, #12]	; (40029c <can_enable_irq+0x24>)
  40028e:	430b      	orrs	r3, r1
  400290:	6553      	str	r3, [r2, #84]	; 0x54
  400292:	4770      	bx	lr
  400294:	e000e100 	.word	0xe000e100
  400298:	204009f8 	.word	0x204009f8
  40029c:	62080000 	.word	0x62080000

004002a0 <can_start>:

/**
 * \brief MCAN module start.
 */
void can_start(void)
{
  4002a0:	b508      	push	{r3, lr}
	mcan_start(&mcan_instance);
  4002a2:	4803      	ldr	r0, [pc, #12]	; (4002b0 <can_start+0x10>)
  4002a4:	4b03      	ldr	r3, [pc, #12]	; (4002b4 <can_start+0x14>)
  4002a6:	4798      	blx	r3
	/* Enable interrupts for this MCAN module */
	can_enable_irq();
  4002a8:	4b03      	ldr	r3, [pc, #12]	; (4002b8 <can_start+0x18>)
  4002aa:	4798      	blx	r3
  4002ac:	bd08      	pop	{r3, pc}
  4002ae:	bf00      	nop
  4002b0:	204009f8 	.word	0x204009f8
  4002b4:	00400ff1 	.word	0x00400ff1
  4002b8:	00400279 	.word	0x00400279

004002bc <can_set_rx_standard_buffer_filter>:

/**
 * \brief set receive standard MCAN ID, dedicated buffer
 */
void can_set_rx_standard_buffer_filter(uint32_t id_value, uint32_t buffer_idx, uint32_t idx)
{
  4002bc:	b510      	push	{r4, lr}
  4002be:	b082      	sub	sp, #8
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <can_set_rx_standard_buffer_filter+0x3c>)
  4002c2:	9301      	str	r3, [sp, #4]
	struct mcan_standard_message_filter_element sd_filter;

	mcan_get_standard_message_filter_element_default(&sd_filter);
	//sd_filter.S0.bit.SFID2 = MCAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
	sd_filter.S0.bit.SFID2 = buffer_idx;
  4002c4:	9b01      	ldr	r3, [sp, #4]
  4002c6:	f361 030a 	bfi	r3, r1, #0, #11
  4002ca:	9301      	str	r3, [sp, #4]
	//sd_filter.S0.bit.SFID1 = MCAN_RX_STANDARD_FILTER_ID_0;
	sd_filter.S0.bit.SFID1 = id_value;
  4002cc:	9b01      	ldr	r3, [sp, #4]
  4002ce:	f360 431a 	bfi	r3, r0, #16, #11
  4002d2:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFEC = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;
  4002d4:	9b01      	ldr	r3, [sp, #4]
  4002d6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4002da:	a902      	add	r1, sp, #8
  4002dc:	f841 3d04 	str.w	r3, [r1, #-4]!

	//mcan_set_rx_standard_filter(&mcan_instance, &sd_filter, MCAN_RX_STANDARD_FILTER_INDEX_0);
	mcan_set_rx_standard_filter(&mcan_instance, &sd_filter, idx);
  4002e0:	4c06      	ldr	r4, [pc, #24]	; (4002fc <can_set_rx_standard_buffer_filter+0x40>)
  4002e2:	4620      	mov	r0, r4
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <can_set_rx_standard_buffer_filter+0x44>)
  4002e6:	4798      	blx	r3
	module_inst->hw->MCAN_IE |= source;
  4002e8:	6822      	ldr	r2, [r4, #0]
  4002ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
  4002ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4002f0:	6553      	str	r3, [r2, #84]	; 0x54
	mcan_enable_interrupt(&mcan_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
}
  4002f2:	b002      	add	sp, #8
  4002f4:	bd10      	pop	{r4, pc}
  4002f6:	bf00      	nop
  4002f8:	880007ff 	.word	0x880007ff
  4002fc:	204009f8 	.word	0x204009f8
  400300:	0040101d 	.word	0x0040101d

00400304 <can_tx_message>:
			MCAN_TX_BUFFER_INDEX);
	mcan_tx_transfer_request(&mcan_instance, 1 << MCAN_TX_BUFFER_INDEX);
}

status_code_t can_tx_message(uint32_t id_value, uint8_t length, uint8_t *data)
{
  400304:	b510      	push	{r4, lr}
  400306:	b084      	sub	sp, #16
	tx_element->T0.reg = 0;
  400308:	2300      	movs	r3, #0
  40030a:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  40030c:	f44f 0308 	mov.w	r3, #8912896	; 0x880000
  400310:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  400312:	9c00      	ldr	r4, [sp, #0]
  400314:	4b23      	ldr	r3, [pc, #140]	; (4003a4 <can_tx_message+0xa0>)
  400316:	ea03 4080 	and.w	r0, r3, r0, lsl #18
  40031a:	4320      	orrs	r0, r4
  40031c:	9000      	str	r0, [sp, #0]
	if (length <= 8)
  40031e:	2908      	cmp	r1, #8
  400320:	d93a      	bls.n	400398 <can_tx_message+0x94>
	else if (length <= 12)
  400322:	290c      	cmp	r1, #12
  400324:	d823      	bhi.n	40036e <can_tx_message+0x6a>
		dlc = 0x9;
  400326:	2009      	movs	r0, #9
	tx_element.T1.bit.DLC = can_length_to_dlc(length);
  400328:	9b01      	ldr	r3, [sp, #4]
  40032a:	f360 4313 	bfi	r3, r0, #16, #4
  40032e:	9301      	str	r3, [sp, #4]

	for (i = 0; i < length; i++) {
  400330:	b149      	cbz	r1, 400346 <can_tx_message+0x42>
  400332:	1e53      	subs	r3, r2, #1
  400334:	a802      	add	r0, sp, #8
  400336:	3901      	subs	r1, #1
  400338:	440a      	add	r2, r1
		tx_element.data[i] = *data;
  40033a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40033e:	f800 1b01 	strb.w	r1, [r0], #1
	for (i = 0; i < length; i++) {
  400342:	4293      	cmp	r3, r2
  400344:	d1f9      	bne.n	40033a <can_tx_message+0x36>
		data++;
	}

	status_code_t ret =	mcan_set_tx_buffer_element(&mcan_instance, &tx_element, MCAN_TX_BUFFER_INDEX);
  400346:	2200      	movs	r2, #0
  400348:	4669      	mov	r1, sp
  40034a:	4817      	ldr	r0, [pc, #92]	; (4003a8 <can_tx_message+0xa4>)
  40034c:	4b17      	ldr	r3, [pc, #92]	; (4003ac <can_tx_message+0xa8>)
  40034e:	4798      	blx	r3
	if (ret == STATUS_OK)
  400350:	4603      	mov	r3, r0
  400352:	b948      	cbnz	r0, 400368 <can_tx_message+0x64>
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  400354:	4b14      	ldr	r3, [pc, #80]	; (4003a8 <can_tx_message+0xa4>)
  400356:	681b      	ldr	r3, [r3, #0]
  400358:	699a      	ldr	r2, [r3, #24]
  40035a:	f012 0f02 	tst.w	r2, #2
  40035e:	d11d      	bne.n	40039c <can_tx_message+0x98>
	module_inst->hw->MCAN_TXBAR = trig_mask;
  400360:	2201      	movs	r2, #1
  400362:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return STATUS_OK;
  400366:	2300      	movs	r3, #0
	{
		ret = mcan_tx_transfer_request(&mcan_instance, 1 << MCAN_TX_BUFFER_INDEX);	
	}
	return ret;
}
  400368:	4618      	mov	r0, r3
  40036a:	b004      	add	sp, #16
  40036c:	bd10      	pop	{r4, pc}
	else if (length <= 16)
  40036e:	2910      	cmp	r1, #16
  400370:	d801      	bhi.n	400376 <can_tx_message+0x72>
		dlc = 0xA;
  400372:	200a      	movs	r0, #10
  400374:	e7d8      	b.n	400328 <can_tx_message+0x24>
	else if (length <= 20)
  400376:	2914      	cmp	r1, #20
  400378:	d801      	bhi.n	40037e <can_tx_message+0x7a>
		dlc = 0xB;
  40037a:	200b      	movs	r0, #11
  40037c:	e7d4      	b.n	400328 <can_tx_message+0x24>
	else if (length <= 24)
  40037e:	2918      	cmp	r1, #24
  400380:	d801      	bhi.n	400386 <can_tx_message+0x82>
		dlc = 0xC;
  400382:	200c      	movs	r0, #12
  400384:	e7d0      	b.n	400328 <can_tx_message+0x24>
	else if (length <= 32)
  400386:	2920      	cmp	r1, #32
  400388:	d801      	bhi.n	40038e <can_tx_message+0x8a>
		dlc = 0xD;
  40038a:	200d      	movs	r0, #13
  40038c:	e7cc      	b.n	400328 <can_tx_message+0x24>
		dlc = 0xF;
  40038e:	2931      	cmp	r1, #49	; 0x31
  400390:	bf34      	ite	cc
  400392:	200e      	movcc	r0, #14
  400394:	200f      	movcs	r0, #15
  400396:	e7c7      	b.n	400328 <can_tx_message+0x24>
		dlc = length;
  400398:	4608      	mov	r0, r1
  40039a:	e7c5      	b.n	400328 <can_tx_message+0x24>
		return ERR_BUSY;
  40039c:	f06f 0309 	mvn.w	r3, #9
  4003a0:	e7e2      	b.n	400368 <can_tx_message+0x64>
  4003a2:	bf00      	nop
  4003a4:	1ffc0000 	.word	0x1ffc0000
  4003a8:	204009f8 	.word	0x204009f8
  4003ac:	00401155 	.word	0x00401155

004003b0 <MCAN1_INT0_Handler>:
/**
 * \brief Interrupt handler for MCAN,
 *   inlcuding RX,TX,ERROR and so on processes.
 */
void MCAN1_INT0_Handler(void)
{
  4003b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003b4:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
	return module_inst->hw->MCAN_IR;
  4003b6:	4b90      	ldr	r3, [pc, #576]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan_instance);
  4003bc:	9203      	str	r2, [sp, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) {
  4003be:	9a03      	ldr	r2, [sp, #12]
  4003c0:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  4003c4:	d061      	beq.n	40048a <MCAN1_INT0_Handler+0xda>
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
	module_inst->hw->MCAN_IR = source;
  4003c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003ca:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_clear_interrupt_status(&mcan_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  4003cc:	2300      	movs	r3, #0
  4003ce:	9302      	str	r3, [sp, #8]
  4003d0:	9b02      	ldr	r3, [sp, #8]
  4003d2:	2b03      	cmp	r3, #3
  4003d4:	d859      	bhi.n	40048a <MCAN1_INT0_Handler+0xda>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  4003d6:	4f88      	ldr	r7, [pc, #544]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
				rx_buffer_index = i;
				mcan_rx_clear_buffer_status(&mcan_instance, i);
				mcan_get_rx_buffer_element(&mcan_instance, &rx_element_buffer, rx_buffer_index);
  4003d8:	4c88      	ldr	r4, [pc, #544]	; (4005fc <MCAN1_INT0_Handler+0x24c>)
  4003da:	f8df 826c 	ldr.w	r8, [pc, #620]	; 400648 <MCAN1_INT0_Handler+0x298>
  4003de:	e039      	b.n	400454 <MCAN1_INT0_Handler+0xa4>
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4003e0:	683a      	ldr	r2, [r7, #0]
  4003e2:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		index -= 32;
  4003e6:	3b20      	subs	r3, #32
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  4003e8:	2201      	movs	r2, #1
  4003ea:	fa02 f303 	lsl.w	r3, r2, r3
  4003ee:	420b      	tst	r3, r1
  4003f0:	bf14      	ite	ne
  4003f2:	4613      	movne	r3, r2
  4003f4:	2300      	moveq	r3, #0
  4003f6:	e03a      	b.n	40046e <MCAN1_INT0_Handler+0xbe>
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4003f8:	6839      	ldr	r1, [r7, #0]
		index -= 32;
  4003fa:	3b20      	subs	r3, #32
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4003fc:	2201      	movs	r2, #1
  4003fe:	fa02 f303 	lsl.w	r3, r2, r3
  400402:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  400406:	9a01      	ldr	r2, [sp, #4]
  400408:	4621      	mov	r1, r4
  40040a:	4638      	mov	r0, r7
  40040c:	47c0      	blx	r8
				if (rx_element_buffer.R0.bit.XTD) {
  40040e:	6823      	ldr	r3, [r4, #0]
  400410:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
					printf("\n\r Extended FD message received in Rx buffer. The received data is: \r\n");
  400414:	bf14      	ite	ne
  400416:	487a      	ldrne	r0, [pc, #488]	; (400600 <MCAN1_INT0_Handler+0x250>)
				} else {
					printf("\n\r Standard FD message received in Rx buffer. The received data is: \r\n");
  400418:	487a      	ldreq	r0, [pc, #488]	; (400604 <MCAN1_INT0_Handler+0x254>)
  40041a:	4b7b      	ldr	r3, [pc, #492]	; (400608 <MCAN1_INT0_Handler+0x258>)
  40041c:	4798      	blx	r3
				}
				for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40041e:	2300      	movs	r3, #0
  400420:	9302      	str	r3, [sp, #8]
  400422:	9b02      	ldr	r3, [sp, #8]
  400424:	2b07      	cmp	r3, #7
  400426:	d80c      	bhi.n	400442 <MCAN1_INT0_Handler+0x92>
					printf("  %d",rx_element_buffer.data[i]);
  400428:	4e78      	ldr	r6, [pc, #480]	; (40060c <MCAN1_INT0_Handler+0x25c>)
  40042a:	4d77      	ldr	r5, [pc, #476]	; (400608 <MCAN1_INT0_Handler+0x258>)
  40042c:	9b02      	ldr	r3, [sp, #8]
  40042e:	4423      	add	r3, r4
  400430:	7a19      	ldrb	r1, [r3, #8]
  400432:	4630      	mov	r0, r6
  400434:	47a8      	blx	r5
				for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400436:	9b02      	ldr	r3, [sp, #8]
  400438:	3301      	adds	r3, #1
  40043a:	9302      	str	r3, [sp, #8]
  40043c:	9b02      	ldr	r3, [sp, #8]
  40043e:	2b07      	cmp	r3, #7
  400440:	d9f4      	bls.n	40042c <MCAN1_INT0_Handler+0x7c>
				}
				printf("\r\n\r\n");
  400442:	4873      	ldr	r0, [pc, #460]	; (400610 <MCAN1_INT0_Handler+0x260>)
  400444:	4b70      	ldr	r3, [pc, #448]	; (400608 <MCAN1_INT0_Handler+0x258>)
  400446:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) {
  400448:	9b02      	ldr	r3, [sp, #8]
  40044a:	3301      	adds	r3, #1
  40044c:	9302      	str	r3, [sp, #8]
  40044e:	9b02      	ldr	r3, [sp, #8]
  400450:	2b03      	cmp	r3, #3
  400452:	d81a      	bhi.n	40048a <MCAN1_INT0_Handler+0xda>
			if (mcan_rx_get_buffer_status(&mcan_instance, i)) {
  400454:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  400456:	2b1f      	cmp	r3, #31
  400458:	d8c2      	bhi.n	4003e0 <MCAN1_INT0_Handler+0x30>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  40045a:	683a      	ldr	r2, [r7, #0]
  40045c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
  400460:	2201      	movs	r2, #1
  400462:	fa02 f303 	lsl.w	r3, r2, r3
  400466:	420b      	tst	r3, r1
  400468:	bf14      	ite	ne
  40046a:	4613      	movne	r3, r2
  40046c:	2300      	moveq	r3, #0
  40046e:	2b00      	cmp	r3, #0
  400470:	d0ea      	beq.n	400448 <MCAN1_INT0_Handler+0x98>
				rx_buffer_index = i;
  400472:	9b02      	ldr	r3, [sp, #8]
  400474:	9301      	str	r3, [sp, #4]
				mcan_rx_clear_buffer_status(&mcan_instance, i);
  400476:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
  400478:	2b1f      	cmp	r3, #31
  40047a:	d8bd      	bhi.n	4003f8 <MCAN1_INT0_Handler+0x48>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  40047c:	6839      	ldr	r1, [r7, #0]
  40047e:	2201      	movs	r2, #1
  400480:	fa02 f303 	lsl.w	r3, r2, r3
  400484:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  400488:	e7bd      	b.n	400406 <MCAN1_INT0_Handler+0x56>
			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) {
  40048a:	9b03      	ldr	r3, [sp, #12]
  40048c:	f013 0f01 	tst.w	r3, #1
  400490:	d11b      	bne.n	4004ca <MCAN1_INT0_Handler+0x11a>
			}
		}
		printf("\r\n\r\n");
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) {
  400492:	9b03      	ldr	r3, [sp, #12]
  400494:	f013 0f10 	tst.w	r3, #16
  400498:	d16d      	bne.n	400576 <MCAN1_INT0_Handler+0x1c6>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
	}

	if ((status & MCAN_ACKNOWLEDGE_ERROR)
  40049a:	9b03      	ldr	r3, [sp, #12]
  40049c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4004a0:	d103      	bne.n	4004aa <MCAN1_INT0_Handler+0xfa>
			|| (status & MCAN_FORMAT_ERROR)) {
  4004a2:	9b03      	ldr	r3, [sp, #12]
  4004a4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4004a8:	d007      	beq.n	4004ba <MCAN1_INT0_Handler+0x10a>
	module_inst->hw->MCAN_IR = source;
  4004aa:	4b53      	ldr	r3, [pc, #332]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
  4004ac:	681b      	ldr	r3, [r3, #0]
  4004ae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  4004b2:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_clear_interrupt_status(&mcan_instance, MCAN_ACKNOWLEDGE_ERROR
				| MCAN_FORMAT_ERROR);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
  4004b4:	4857      	ldr	r0, [pc, #348]	; (400614 <MCAN1_INT0_Handler+0x264>)
  4004b6:	4b54      	ldr	r3, [pc, #336]	; (400608 <MCAN1_INT0_Handler+0x258>)
  4004b8:	4798      	blx	r3
	}

	if (status & MCAN_BUS_OFF) {
  4004ba:	9b03      	ldr	r3, [sp, #12]
  4004bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4004c0:	f040 808c 	bne.w	4005dc <MCAN1_INT0_Handler+0x22c>
		mcan_clear_interrupt_status(&mcan_instance, MCAN_BUS_OFF);
		mcan_stop(&mcan_instance);
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
		can_init();
	}
}
  4004c4:	b004      	add	sp, #16
  4004c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004ca:	4d4b      	ldr	r5, [pc, #300]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
  4004cc:	682b      	ldr	r3, [r5, #0]
  4004ce:	2201      	movs	r2, #1
  4004d0:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_0_element(&mcan_instance, &rx_element_fifo_0,
  4004d2:	4c51      	ldr	r4, [pc, #324]	; (400618 <MCAN1_INT0_Handler+0x268>)
  4004d4:	6822      	ldr	r2, [r4, #0]
  4004d6:	4951      	ldr	r1, [pc, #324]	; (40061c <MCAN1_INT0_Handler+0x26c>)
  4004d8:	4628      	mov	r0, r5
  4004da:	4b51      	ldr	r3, [pc, #324]	; (400620 <MCAN1_INT0_Handler+0x270>)
  4004dc:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  4004de:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  4004e0:	682a      	ldr	r2, [r5, #0]
  4004e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4004e6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		standard_receive_index++;
  4004ea:	6823      	ldr	r3, [r4, #0]
  4004ec:	3301      	adds	r3, #1
  4004ee:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM) {
  4004f0:	6823      	ldr	r3, [r4, #0]
  4004f2:	2b04      	cmp	r3, #4
  4004f4:	d01e      	beq.n	400534 <MCAN1_INT0_Handler+0x184>
		if (rx_element_fifo_0.R1.bit.EDL) {
  4004f6:	4b49      	ldr	r3, [pc, #292]	; (40061c <MCAN1_INT0_Handler+0x26c>)
  4004f8:	685b      	ldr	r3, [r3, #4]
  4004fa:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4004fe:	d01c      	beq.n	40053a <MCAN1_INT0_Handler+0x18a>
			printf("\n\r Standard FD message received in FIFO 0. The received data is: \r\n");
  400500:	4848      	ldr	r0, [pc, #288]	; (400624 <MCAN1_INT0_Handler+0x274>)
  400502:	4b41      	ldr	r3, [pc, #260]	; (400608 <MCAN1_INT0_Handler+0x258>)
  400504:	4798      	blx	r3
			for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400506:	2300      	movs	r3, #0
  400508:	9302      	str	r3, [sp, #8]
  40050a:	9b02      	ldr	r3, [sp, #8]
  40050c:	2b07      	cmp	r3, #7
  40050e:	d80d      	bhi.n	40052c <MCAN1_INT0_Handler+0x17c>
				printf("  %d",rx_element_fifo_0.data[i]);
  400510:	4e42      	ldr	r6, [pc, #264]	; (40061c <MCAN1_INT0_Handler+0x26c>)
  400512:	4d3e      	ldr	r5, [pc, #248]	; (40060c <MCAN1_INT0_Handler+0x25c>)
  400514:	4c3c      	ldr	r4, [pc, #240]	; (400608 <MCAN1_INT0_Handler+0x258>)
  400516:	9b02      	ldr	r3, [sp, #8]
  400518:	4433      	add	r3, r6
  40051a:	7a19      	ldrb	r1, [r3, #8]
  40051c:	4628      	mov	r0, r5
  40051e:	47a0      	blx	r4
			for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  400520:	9b02      	ldr	r3, [sp, #8]
  400522:	3301      	adds	r3, #1
  400524:	9302      	str	r3, [sp, #8]
  400526:	9b02      	ldr	r3, [sp, #8]
  400528:	2b07      	cmp	r3, #7
  40052a:	d9f4      	bls.n	400516 <MCAN1_INT0_Handler+0x166>
		printf("\r\n\r\n");
  40052c:	4838      	ldr	r0, [pc, #224]	; (400610 <MCAN1_INT0_Handler+0x260>)
  40052e:	4b36      	ldr	r3, [pc, #216]	; (400608 <MCAN1_INT0_Handler+0x258>)
  400530:	4798      	blx	r3
  400532:	e7ae      	b.n	400492 <MCAN1_INT0_Handler+0xe2>
			standard_receive_index = 0;
  400534:	2200      	movs	r2, #0
  400536:	6022      	str	r2, [r4, #0]
  400538:	e7dd      	b.n	4004f6 <MCAN1_INT0_Handler+0x146>
			printf("\n\r Standard normal message received in FIFO 0. The received data is: \r\n");
  40053a:	483b      	ldr	r0, [pc, #236]	; (400628 <MCAN1_INT0_Handler+0x278>)
  40053c:	4b32      	ldr	r3, [pc, #200]	; (400608 <MCAN1_INT0_Handler+0x258>)
  40053e:	4798      	blx	r3
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  400540:	2300      	movs	r3, #0
  400542:	9302      	str	r3, [sp, #8]
  400544:	4b35      	ldr	r3, [pc, #212]	; (40061c <MCAN1_INT0_Handler+0x26c>)
  400546:	685b      	ldr	r3, [r3, #4]
  400548:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40054c:	9a02      	ldr	r2, [sp, #8]
  40054e:	4293      	cmp	r3, r2
  400550:	d9ec      	bls.n	40052c <MCAN1_INT0_Handler+0x17c>
				printf("  %d",rx_element_fifo_0.data[i]);
  400552:	4c32      	ldr	r4, [pc, #200]	; (40061c <MCAN1_INT0_Handler+0x26c>)
  400554:	4e2d      	ldr	r6, [pc, #180]	; (40060c <MCAN1_INT0_Handler+0x25c>)
  400556:	4d2c      	ldr	r5, [pc, #176]	; (400608 <MCAN1_INT0_Handler+0x258>)
  400558:	9b02      	ldr	r3, [sp, #8]
  40055a:	4423      	add	r3, r4
  40055c:	7a19      	ldrb	r1, [r3, #8]
  40055e:	4630      	mov	r0, r6
  400560:	47a8      	blx	r5
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
  400562:	9b02      	ldr	r3, [sp, #8]
  400564:	3301      	adds	r3, #1
  400566:	9302      	str	r3, [sp, #8]
  400568:	6863      	ldr	r3, [r4, #4]
  40056a:	f3c3 4303 	ubfx	r3, r3, #16, #4
  40056e:	9a02      	ldr	r2, [sp, #8]
  400570:	4293      	cmp	r3, r2
  400572:	d8f1      	bhi.n	400558 <MCAN1_INT0_Handler+0x1a8>
  400574:	e7da      	b.n	40052c <MCAN1_INT0_Handler+0x17c>
	module_inst->hw->MCAN_IR = source;
  400576:	4d20      	ldr	r5, [pc, #128]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
  400578:	682b      	ldr	r3, [r5, #0]
  40057a:	2210      	movs	r2, #16
  40057c:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_get_rx_fifo_1_element(&mcan_instance, &rx_element_fifo_1,
  40057e:	4c2b      	ldr	r4, [pc, #172]	; (40062c <MCAN1_INT0_Handler+0x27c>)
  400580:	6822      	ldr	r2, [r4, #0]
  400582:	492b      	ldr	r1, [pc, #172]	; (400630 <MCAN1_INT0_Handler+0x280>)
  400584:	4628      	mov	r0, r5
  400586:	4b2b      	ldr	r3, [pc, #172]	; (400634 <MCAN1_INT0_Handler+0x284>)
  400588:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan_instance, 0,
  40058a:	6823      	ldr	r3, [r4, #0]
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  40058c:	682a      	ldr	r2, [r5, #0]
  40058e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400592:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		extended_receive_index++;
  400596:	6823      	ldr	r3, [r4, #0]
  400598:	3301      	adds	r3, #1
  40059a:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) {
  40059c:	6823      	ldr	r3, [r4, #0]
  40059e:	2b04      	cmp	r3, #4
  4005a0:	d019      	beq.n	4005d6 <MCAN1_INT0_Handler+0x226>
		printf("\n\r Extended FD message received in FIFO 1. The received data is: \r\n");
  4005a2:	4825      	ldr	r0, [pc, #148]	; (400638 <MCAN1_INT0_Handler+0x288>)
  4005a4:	4b18      	ldr	r3, [pc, #96]	; (400608 <MCAN1_INT0_Handler+0x258>)
  4005a6:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4005a8:	2300      	movs	r3, #0
  4005aa:	9302      	str	r3, [sp, #8]
  4005ac:	9b02      	ldr	r3, [sp, #8]
  4005ae:	2b07      	cmp	r3, #7
  4005b0:	d80d      	bhi.n	4005ce <MCAN1_INT0_Handler+0x21e>
			printf("  %d",rx_element_fifo_1.data[i]);
  4005b2:	4e1f      	ldr	r6, [pc, #124]	; (400630 <MCAN1_INT0_Handler+0x280>)
  4005b4:	4d15      	ldr	r5, [pc, #84]	; (40060c <MCAN1_INT0_Handler+0x25c>)
  4005b6:	4c14      	ldr	r4, [pc, #80]	; (400608 <MCAN1_INT0_Handler+0x258>)
  4005b8:	9b02      	ldr	r3, [sp, #8]
  4005ba:	4433      	add	r3, r6
  4005bc:	7a19      	ldrb	r1, [r3, #8]
  4005be:	4628      	mov	r0, r5
  4005c0:	47a0      	blx	r4
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4005c2:	9b02      	ldr	r3, [sp, #8]
  4005c4:	3301      	adds	r3, #1
  4005c6:	9302      	str	r3, [sp, #8]
  4005c8:	9b02      	ldr	r3, [sp, #8]
  4005ca:	2b07      	cmp	r3, #7
  4005cc:	d9f4      	bls.n	4005b8 <MCAN1_INT0_Handler+0x208>
		printf("\r\n\r\n");
  4005ce:	4810      	ldr	r0, [pc, #64]	; (400610 <MCAN1_INT0_Handler+0x260>)
  4005d0:	4b0d      	ldr	r3, [pc, #52]	; (400608 <MCAN1_INT0_Handler+0x258>)
  4005d2:	4798      	blx	r3
  4005d4:	e761      	b.n	40049a <MCAN1_INT0_Handler+0xea>
			extended_receive_index = 0;
  4005d6:	2200      	movs	r2, #0
  4005d8:	6022      	str	r2, [r4, #0]
  4005da:	e7e2      	b.n	4005a2 <MCAN1_INT0_Handler+0x1f2>
	module_inst->hw->MCAN_IR = source;
  4005dc:	4806      	ldr	r0, [pc, #24]	; (4005f8 <MCAN1_INT0_Handler+0x248>)
  4005de:	6803      	ldr	r3, [r0, #0]
  4005e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4005e4:	651a      	str	r2, [r3, #80]	; 0x50
		mcan_stop(&mcan_instance);
  4005e6:	4b15      	ldr	r3, [pc, #84]	; (40063c <MCAN1_INT0_Handler+0x28c>)
  4005e8:	4798      	blx	r3
		printf(": MCAN bus off error, re-initialization. \r\n\r\n");
  4005ea:	4815      	ldr	r0, [pc, #84]	; (400640 <MCAN1_INT0_Handler+0x290>)
  4005ec:	4b06      	ldr	r3, [pc, #24]	; (400608 <MCAN1_INT0_Handler+0x258>)
  4005ee:	4798      	blx	r3
		can_init();
  4005f0:	4b14      	ldr	r3, [pc, #80]	; (400644 <MCAN1_INT0_Handler+0x294>)
  4005f2:	4798      	blx	r3
}
  4005f4:	e766      	b.n	4004c4 <MCAN1_INT0_Handler+0x114>
  4005f6:	bf00      	nop
  4005f8:	204009f8 	.word	0x204009f8
  4005fc:	204009fc 	.word	0x204009fc
  400600:	00406340 	.word	0x00406340
  400604:	00406388 	.word	0x00406388
  400608:	0040204d 	.word	0x0040204d
  40060c:	004063d0 	.word	0x004063d0
  400610:	00406818 	.word	0x00406818
  400614:	004064a8 	.word	0x004064a8
  400618:	20400a2c 	.word	0x20400a2c
  40061c:	20400a0c 	.word	0x20400a0c
  400620:	004010ad 	.word	0x004010ad
  400624:	004063d8 	.word	0x004063d8
  400628:	0040641c 	.word	0x0040641c
  40062c:	204009f4 	.word	0x204009f4
  400630:	20400a1c 	.word	0x20400a1c
  400634:	00401101 	.word	0x00401101
  400638:	00406464 	.word	0x00406464
  40063c:	00401007 	.word	0x00401007
  400640:	004064ec 	.word	0x004064ec
  400644:	004001d5 	.word	0x004001d5
  400648:	00401059 	.word	0x00401059

0040064c <cmd_init>:
/* CMD counters instance */
cmd_counters_t counters;

void cmd_init(void)
{
	counters.executed_cmds = 0;
  40064c:	4b03      	ldr	r3, [pc, #12]	; (40065c <cmd_init+0x10>)
  40064e:	2200      	movs	r2, #0
  400650:	601a      	str	r2, [r3, #0]
	counters.last_aborted_id = 0;
  400652:	731a      	strb	r2, [r3, #12]
	counters.aborted_cmds = 0;
  400654:	609a      	str	r2, [r3, #8]
	counters.last_executed_id = 0;
  400656:	711a      	strb	r2, [r3, #4]
  400658:	4770      	bx	lr
  40065a:	bf00      	nop
  40065c:	20400d7c 	.word	0x20400d7c

00400660 <cmd_get_executed_count>:
}

uint32_t cmd_get_executed_count(void)
{
	return counters.executed_cmds;
}
  400660:	4b01      	ldr	r3, [pc, #4]	; (400668 <cmd_get_executed_count+0x8>)
  400662:	6818      	ldr	r0, [r3, #0]
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	20400d7c 	.word	0x20400d7c

0040066c <cmd_get_last_executed_id>:

uint8_t cmd_get_last_executed_id(void)
{
	return counters.last_executed_id;
}
  40066c:	4b01      	ldr	r3, [pc, #4]	; (400674 <cmd_get_last_executed_id+0x8>)
  40066e:	7918      	ldrb	r0, [r3, #4]
  400670:	4770      	bx	lr
  400672:	bf00      	nop
  400674:	20400d7c 	.word	0x20400d7c

00400678 <cmd_get_aborted_count>:
}

uint32_t cmd_get_aborted_count(void)
{
	return counters.aborted_cmds;
}
  400678:	4b01      	ldr	r3, [pc, #4]	; (400680 <cmd_get_aborted_count+0x8>)
  40067a:	6898      	ldr	r0, [r3, #8]
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop
  400680:	20400d7c 	.word	0x20400d7c

00400684 <cmd_get_last_aborted_id>:

uint8_t cmd_get_last_aborted_id(void)
{
	return counters.last_aborted_id;
}
  400684:	4b01      	ldr	r3, [pc, #4]	; (40068c <cmd_get_last_aborted_id+0x8>)
  400686:	7b18      	ldrb	r0, [r3, #12]
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	20400d7c 	.word	0x20400d7c

00400690 <cmd_process>:
{
	counters.last_aborted_id = cmd_id;
}

status_code_t cmd_process(const command_list_t *cmd_list, uint8_t cmd_id, uint32_t cmd_payload)
{
  400690:	b510      	push	{r4, lr}
  400692:	460c      	mov	r4, r1
	status_code_t status = OPERATION_IN_PROGRESS;
	if ((cmd_list->START <= cmd_id) && (cmd_id <= cmd_list->END))
  400694:	6803      	ldr	r3, [r0, #0]
  400696:	428b      	cmp	r3, r1
  400698:	d817      	bhi.n	4006ca <cmd_process+0x3a>
  40069a:	6841      	ldr	r1, [r0, #4]
  40069c:	428c      	cmp	r4, r1
  40069e:	d817      	bhi.n	4006d0 <cmd_process+0x40>
	{
		uint32_t cmd_list_index = cmd_id - cmd_list->START;
  4006a0:	1ae3      	subs	r3, r4, r3
		const command_ops_t *cmd = &cmd_list->ELEMENTS[cmd_list_index];
		status = cmd->cmd_func(cmd_payload);
  4006a2:	6881      	ldr	r1, [r0, #8]
  4006a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4006a8:	4610      	mov	r0, r2
  4006aa:	4798      	blx	r3
	}
	if (status == STATUS_OK)
  4006ac:	4601      	mov	r1, r0
  4006ae:	b130      	cbz	r0, 4006be <cmd_process+0x2e>
	counters.last_aborted_id = cmd_id;
  4006b0:	4b09      	ldr	r3, [pc, #36]	; (4006d8 <cmd_process+0x48>)
  4006b2:	731c      	strb	r4, [r3, #12]
		counters.executed_cmds++;
	}
	else
	{
		cmd_set_last_aborted_id(cmd_id);
		counters.aborted_cmds++;
  4006b4:	689a      	ldr	r2, [r3, #8]
  4006b6:	3201      	adds	r2, #1
  4006b8:	609a      	str	r2, [r3, #8]
	}

	return status;
}
  4006ba:	4608      	mov	r0, r1
  4006bc:	bd10      	pop	{r4, pc}
	counters.last_executed_id = cmd_id;
  4006be:	4b06      	ldr	r3, [pc, #24]	; (4006d8 <cmd_process+0x48>)
  4006c0:	711c      	strb	r4, [r3, #4]
		counters.executed_cmds++;
  4006c2:	681a      	ldr	r2, [r3, #0]
  4006c4:	3201      	adds	r2, #1
  4006c6:	601a      	str	r2, [r3, #0]
  4006c8:	e7f7      	b.n	4006ba <cmd_process+0x2a>
  4006ca:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  4006ce:	e7ef      	b.n	4006b0 <cmd_process+0x20>
  4006d0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  4006d4:	e7ec      	b.n	4006b0 <cmd_process+0x20>
  4006d6:	bf00      	nop
  4006d8:	20400d7c 	.word	0x20400d7c

004006dc <command_get_cpu_temp>:
#include "subsystem_2.h"

static status_code_t command_get_cpu_temp(void)
{
	return STATUS_OK;
}
  4006dc:	2000      	movs	r0, #0
  4006de:	4770      	bx	lr

004006e0 <command_ss2_get_temp>:
{
	return ss2_get_LED_status();
}

static status_code_t command_ss2_get_temp(void)
{
  4006e0:	b508      	push	{r3, lr}
	return ss2_get_temp();
  4006e2:	4b02      	ldr	r3, [pc, #8]	; (4006ec <command_ss2_get_temp+0xc>)
  4006e4:	4798      	blx	r3
}
  4006e6:	b240      	sxtb	r0, r0
  4006e8:	bd08      	pop	{r3, pc}
  4006ea:	bf00      	nop
  4006ec:	00400895 	.word	0x00400895

004006f0 <command_ss2_get_led_status>:
{
  4006f0:	b508      	push	{r3, lr}
	return ss2_get_LED_status();
  4006f2:	4b02      	ldr	r3, [pc, #8]	; (4006fc <command_ss2_get_led_status+0xc>)
  4006f4:	4798      	blx	r3
}
  4006f6:	b240      	sxtb	r0, r0
  4006f8:	bd08      	pop	{r3, pc}
  4006fa:	bf00      	nop
  4006fc:	00400881 	.word	0x00400881

00400700 <command_ss2_turn_off_led>:
{
  400700:	b508      	push	{r3, lr}
	return ss2_turn_off_LED();
  400702:	4b01      	ldr	r3, [pc, #4]	; (400708 <command_ss2_turn_off_led+0x8>)
  400704:	4798      	blx	r3
}
  400706:	bd08      	pop	{r3, pc}
  400708:	00400871 	.word	0x00400871

0040070c <command_ss2_turn_on_led>:
{
  40070c:	b508      	push	{r3, lr}
	return ss2_turn_on_LED();
  40070e:	4b01      	ldr	r3, [pc, #4]	; (400714 <command_ss2_turn_on_led+0x8>)
  400710:	4798      	blx	r3
}
  400712:	bd08      	pop	{r3, pc}
  400714:	00400861 	.word	0x00400861

00400718 <command_ss1_get_temp>:
{
  400718:	b508      	push	{r3, lr}
	return ss1_get_temp();
  40071a:	4b02      	ldr	r3, [pc, #8]	; (400724 <command_ss1_get_temp+0xc>)
  40071c:	4798      	blx	r3
}
  40071e:	b240      	sxtb	r0, r0
  400720:	bd08      	pop	{r3, pc}
  400722:	bf00      	nop
  400724:	00400809 	.word	0x00400809

00400728 <command_ss1_get_led_status>:
{
  400728:	b508      	push	{r3, lr}
	return ss1_get_LED_status();
  40072a:	4b02      	ldr	r3, [pc, #8]	; (400734 <command_ss1_get_led_status+0xc>)
  40072c:	4798      	blx	r3
}
  40072e:	b240      	sxtb	r0, r0
  400730:	bd08      	pop	{r3, pc}
  400732:	bf00      	nop
  400734:	004007e1 	.word	0x004007e1

00400738 <command_ss1_turn_off_led>:
{
  400738:	b508      	push	{r3, lr}
	return ss1_turn_off_LED();
  40073a:	4b01      	ldr	r3, [pc, #4]	; (400740 <command_ss1_turn_off_led+0x8>)
  40073c:	4798      	blx	r3
}
  40073e:	bd08      	pop	{r3, pc}
  400740:	004007d1 	.word	0x004007d1

00400744 <command_ss1_turn_on_led>:
{
  400744:	b508      	push	{r3, lr}
	return ss1_turn_on_LED();
  400746:	4b01      	ldr	r3, [pc, #4]	; (40074c <command_ss1_turn_on_led+0x8>)
  400748:	4798      	blx	r3
}
  40074a:	bd08      	pop	{r3, pc}
  40074c:	004007c1 	.word	0x004007c1

00400750 <commands_module_execute>:
/* Create CMD_MODULE_LIST */
CREATE_CMD_LIST(MODULE, CMD_GET_CPU_TEMP, CMD_SS2_GET_TEMP);

/* USAR ESTA */
status_code_t commands_module_execute(uint8_t cmd_id, uint32_t cmd_payload)
{
  400750:	b508      	push	{r3, lr}
	return cmd_process(&CMD_MODULE_LIST, cmd_id, cmd_payload);
  400752:	460a      	mov	r2, r1
  400754:	4601      	mov	r1, r0
  400756:	4802      	ldr	r0, [pc, #8]	; (400760 <commands_module_execute+0x10>)
  400758:	4b02      	ldr	r3, [pc, #8]	; (400764 <commands_module_execute+0x14>)
  40075a:	4798      	blx	r3
  40075c:	bd08      	pop	{r3, pc}
  40075e:	bf00      	nop
  400760:	00406540 	.word	0x00406540
  400764:	00400691 	.word	0x00400691

00400768 <TC0_Handler>:
				 
/* forward declaration private function */
void telemetry_update(void);

void TC0_Handler(void)
{
  400768:	b508      	push	{r3, lr}
	tc_ticker_clear_irq_flags(&TELEMETRY_TICKER);
  40076a:	4804      	ldr	r0, [pc, #16]	; (40077c <TC0_Handler+0x14>)
  40076c:	4b04      	ldr	r3, [pc, #16]	; (400780 <TC0_Handler+0x18>)
  40076e:	4798      	blx	r3
	telemetry_update();
  400770:	4b04      	ldr	r3, [pc, #16]	; (400784 <TC0_Handler+0x1c>)
  400772:	4798      	blx	r3
	printf("\n\rHola");
  400774:	4804      	ldr	r0, [pc, #16]	; (400788 <TC0_Handler+0x20>)
  400776:	4b05      	ldr	r3, [pc, #20]	; (40078c <TC0_Handler+0x24>)
  400778:	4798      	blx	r3
  40077a:	bd08      	pop	{r3, pc}
  40077c:	20400000 	.word	0x20400000
  400780:	004008a9 	.word	0x004008a9
  400784:	004008bd 	.word	0x004008bd
  400788:	0040654c 	.word	0x0040654c
  40078c:	0040204d 	.word	0x0040204d

00400790 <ss1_send_can_command>:
#define CMD_PAYLOAD_GET_LSB_BYTE(x)	((x)&0xFF)

#define CMD_PAYLOAD_UNUSED_VAL 0

static status_code_t ss1_send_can_command(uint8_t cmd_id, uint32_t payload)
{
  400790:	b500      	push	{lr}
  400792:	b083      	sub	sp, #12
	uint8_t can_message[4];

	can_message[0] = cmd_id;
  400794:	f88d 0004 	strb.w	r0, [sp, #4]
	can_message[1] = CMD_PAYLOAD_GET_THIRD_BYTE(payload);
  400798:	0c0b      	lsrs	r3, r1, #16
  40079a:	f88d 3005 	strb.w	r3, [sp, #5]
	can_message[2] = CMD_PAYLOAD_GET_SECOND_BYTE(payload);
  40079e:	0a0b      	lsrs	r3, r1, #8
  4007a0:	f88d 3006 	strb.w	r3, [sp, #6]
	can_message[3] = CMD_PAYLOAD_GET_LSB_BYTE(payload);
  4007a4:	f88d 1007 	strb.w	r1, [sp, #7]
	
	status_code_t ret = can_tx_message(SS1_CAN_ID, sizeof(can_message), can_message);
  4007a8:	aa01      	add	r2, sp, #4
  4007aa:	2104      	movs	r1, #4
  4007ac:	f240 405a 	movw	r0, #1114	; 0x45a
  4007b0:	4b02      	ldr	r3, [pc, #8]	; (4007bc <ss1_send_can_command+0x2c>)
  4007b2:	4798      	blx	r3
	return ret;
}
  4007b4:	b003      	add	sp, #12
  4007b6:	f85d fb04 	ldr.w	pc, [sp], #4
  4007ba:	bf00      	nop
  4007bc:	00400305 	.word	0x00400305

004007c0 <ss1_turn_on_LED>:
{
	can_set_rx_standard_buffer_filter(SELF_CAN_ID, MCAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX, MCAN_RX_STANDARD_FILTER_INDEX_0);
}

status_code_t ss1_turn_on_LED(void)
{
  4007c0:	b508      	push	{r3, lr}
	return ss1_send_can_command(SS1_CMD_ID_TURN_ON_LED, CMD_PAYLOAD_UNUSED_VAL);
  4007c2:	2100      	movs	r1, #0
  4007c4:	4608      	mov	r0, r1
  4007c6:	4b01      	ldr	r3, [pc, #4]	; (4007cc <ss1_turn_on_LED+0xc>)
  4007c8:	4798      	blx	r3
}
  4007ca:	bd08      	pop	{r3, pc}
  4007cc:	00400791 	.word	0x00400791

004007d0 <ss1_turn_off_LED>:

status_code_t ss1_turn_off_LED(void)
{
  4007d0:	b508      	push	{r3, lr}
	return ss1_send_can_command(SS1_CMD_ID_TURN_OFF_LED, CMD_PAYLOAD_UNUSED_VAL);
  4007d2:	2100      	movs	r1, #0
  4007d4:	2001      	movs	r0, #1
  4007d6:	4b01      	ldr	r3, [pc, #4]	; (4007dc <ss1_turn_off_LED+0xc>)
  4007d8:	4798      	blx	r3
}
  4007da:	bd08      	pop	{r3, pc}
  4007dc:	00400791 	.word	0x00400791

004007e0 <ss1_get_LED_status>:

bool ss1_get_LED_status(void)
{
  4007e0:	b508      	push	{r3, lr}
	status_code_t ret = ss1_send_can_command(SS1_CMD_ID_GET_LED_STATUS, CMD_PAYLOAD_UNUSED_VAL);
  4007e2:	2100      	movs	r1, #0
  4007e4:	2002      	movs	r0, #2
  4007e6:	4b06      	ldr	r3, [pc, #24]	; (400800 <ss1_get_LED_status+0x20>)
  4007e8:	4798      	blx	r3
	if (ret == STATUS_OK)
  4007ea:	b108      	cbz	r0, 4007f0 <ss1_get_LED_status+0x10>
	{
		ss1_receive_can_response();
	}
	return false;
}
  4007ec:	2000      	movs	r0, #0
  4007ee:	bd08      	pop	{r3, pc}
	can_set_rx_standard_buffer_filter(SELF_CAN_ID, MCAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX, MCAN_RX_STANDARD_FILTER_INDEX_0);
  4007f0:	2200      	movs	r2, #0
  4007f2:	2102      	movs	r1, #2
  4007f4:	f240 407a 	movw	r0, #1146	; 0x47a
  4007f8:	4b02      	ldr	r3, [pc, #8]	; (400804 <ss1_get_LED_status+0x24>)
  4007fa:	4798      	blx	r3
  4007fc:	e7f6      	b.n	4007ec <ss1_get_LED_status+0xc>
  4007fe:	bf00      	nop
  400800:	00400791 	.word	0x00400791
  400804:	004002bd 	.word	0x004002bd

00400808 <ss1_get_temp>:

int32_t ss1_get_temp(void)
{
  400808:	b508      	push	{r3, lr}
	status_code_t ret = ss1_send_can_command(SS1_CMD_ID_GET_TEMP, CMD_PAYLOAD_UNUSED_VAL);
  40080a:	2100      	movs	r1, #0
  40080c:	2003      	movs	r0, #3
  40080e:	4b06      	ldr	r3, [pc, #24]	; (400828 <ss1_get_temp+0x20>)
  400810:	4798      	blx	r3
	if (ret == STATUS_OK)
  400812:	b108      	cbz	r0, 400818 <ss1_get_temp+0x10>
	{
		ss1_receive_can_response();
	}
	return 0;
  400814:	2000      	movs	r0, #0
  400816:	bd08      	pop	{r3, pc}
	can_set_rx_standard_buffer_filter(SELF_CAN_ID, MCAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX, MCAN_RX_STANDARD_FILTER_INDEX_0);
  400818:	2200      	movs	r2, #0
  40081a:	2102      	movs	r1, #2
  40081c:	f240 407a 	movw	r0, #1146	; 0x47a
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <ss1_get_temp+0x24>)
  400822:	4798      	blx	r3
  400824:	e7f6      	b.n	400814 <ss1_get_temp+0xc>
  400826:	bf00      	nop
  400828:	00400791 	.word	0x00400791
  40082c:	004002bd 	.word	0x004002bd

00400830 <ss2_send_can_command>:
#define CMD_PAYLOAD_GET_LSB_BYTE(x)	((x)&0xFF)

#define CMD_PAYLOAD_UNUSED_VAL 0

static status_code_t ss2_send_can_command(uint8_t cmd_id, uint32_t payload)
{
  400830:	b500      	push	{lr}
  400832:	b083      	sub	sp, #12
	uint8_t can_message[4];

	can_message[0] = cmd_id;
  400834:	f88d 0004 	strb.w	r0, [sp, #4]
	can_message[1] = CMD_PAYLOAD_GET_THIRD_BYTE(payload);
  400838:	0c0b      	lsrs	r3, r1, #16
  40083a:	f88d 3005 	strb.w	r3, [sp, #5]
	can_message[2] = CMD_PAYLOAD_GET_SECOND_BYTE(payload);
  40083e:	0a0b      	lsrs	r3, r1, #8
  400840:	f88d 3006 	strb.w	r3, [sp, #6]
	can_message[3] = CMD_PAYLOAD_GET_LSB_BYTE(payload);
  400844:	f88d 1007 	strb.w	r1, [sp, #7]
	
	status_code_t ret = can_tx_message(SS2_CAN_ID, sizeof(can_message), can_message);
  400848:	aa01      	add	r2, sp, #4
  40084a:	2104      	movs	r1, #4
  40084c:	f240 406a 	movw	r0, #1130	; 0x46a
  400850:	4b02      	ldr	r3, [pc, #8]	; (40085c <ss2_send_can_command+0x2c>)
  400852:	4798      	blx	r3
	return ret;
}
  400854:	b003      	add	sp, #12
  400856:	f85d fb04 	ldr.w	pc, [sp], #4
  40085a:	bf00      	nop
  40085c:	00400305 	.word	0x00400305

00400860 <ss2_turn_on_LED>:

status_code_t ss2_turn_on_LED(void)
{
  400860:	b508      	push	{r3, lr}
	return ss2_send_can_command(SS2_CMD_ID_TURN_ON_LED, CMD_PAYLOAD_UNUSED_VAL);
  400862:	2100      	movs	r1, #0
  400864:	4608      	mov	r0, r1
  400866:	4b01      	ldr	r3, [pc, #4]	; (40086c <ss2_turn_on_LED+0xc>)
  400868:	4798      	blx	r3
}
  40086a:	bd08      	pop	{r3, pc}
  40086c:	00400831 	.word	0x00400831

00400870 <ss2_turn_off_LED>:

status_code_t ss2_turn_off_LED(void)
{
  400870:	b508      	push	{r3, lr}
	return ss2_send_can_command(SS2_CMD_ID_TURN_OFF_LED, CMD_PAYLOAD_UNUSED_VAL);
  400872:	2100      	movs	r1, #0
  400874:	2001      	movs	r0, #1
  400876:	4b01      	ldr	r3, [pc, #4]	; (40087c <ss2_turn_off_LED+0xc>)
  400878:	4798      	blx	r3
}
  40087a:	bd08      	pop	{r3, pc}
  40087c:	00400831 	.word	0x00400831

00400880 <ss2_get_LED_status>:

bool ss2_get_LED_status(void)
{
  400880:	b508      	push	{r3, lr}
	status_code_t ret = ss2_send_can_command(SS2_CMD_ID_GET_LED_STATUS, CMD_PAYLOAD_UNUSED_VAL);
  400882:	2100      	movs	r1, #0
  400884:	2002      	movs	r0, #2
  400886:	4b02      	ldr	r3, [pc, #8]	; (400890 <ss2_get_LED_status+0x10>)
  400888:	4798      	blx	r3
	if (ret == STATUS_OK)
	{
		// recibir e interpretar respuesta
	}
	return false;
}
  40088a:	2000      	movs	r0, #0
  40088c:	bd08      	pop	{r3, pc}
  40088e:	bf00      	nop
  400890:	00400831 	.word	0x00400831

00400894 <ss2_get_temp>:

int32_t ss2_get_temp(void)
{
  400894:	b508      	push	{r3, lr}
	status_code_t ret = ss2_send_can_command(SS2_CMD_ID_GET_TEMP, CMD_PAYLOAD_UNUSED_VAL);
  400896:	2100      	movs	r1, #0
  400898:	2003      	movs	r0, #3
  40089a:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <ss2_get_temp+0x10>)
  40089c:	4798      	blx	r3
	if (ret == STATUS_OK)
	{
		// recibir e interpretar respuesta
	}
	return 0;
}
  40089e:	2000      	movs	r0, #0
  4008a0:	bd08      	pop	{r3, pc}
  4008a2:	bf00      	nop
  4008a4:	00400831 	.word	0x00400831

004008a8 <tc_ticker_clear_irq_flags>:
{
    NVIC_EnableIRQ(ticker->TC_IRQn);
}

__always_inline void tc_ticker_clear_irq_flags(const tc_ticker_t *ticker)
{
  4008a8:	b082      	sub	sp, #8
    volatile uint32_t ul_dummy;
    /* Read to clear status bit to acknowledge interrupt */
    ul_dummy = tc_get_status(ticker->TC, ticker->TC_CHANNEL);
  4008aa:	6803      	ldr	r3, [r0, #0]
  4008ac:	6842      	ldr	r2, [r0, #4]
    return p_tc->TC_CHANNEL[ul_channel].TC_SR;
  4008ae:	eb03 1382 	add.w	r3, r3, r2, lsl #6
  4008b2:	6a1b      	ldr	r3, [r3, #32]
    ul_dummy = tc_get_status(ticker->TC, ticker->TC_CHANNEL);
  4008b4:	9301      	str	r3, [sp, #4]
    /* Avoid compiler warning */
    UNUSED(ul_dummy);
  4008b6:	9b01      	ldr	r3, [sp, #4]
}
  4008b8:	b002      	add	sp, #8
  4008ba:	4770      	bx	lr

004008bc <telemetry_update>:
	tc_ticker_init(&TELEMETRY_TICKER);
	tc_ticker_start(&TELEMETRY_TICKER);
}

void telemetry_update(void)
{
  4008bc:	b510      	push	{r4, lr}
	telemetry.subsystem_1.led_status = ss1_get_LED_status();
  4008be:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <telemetry_update+0x38>)
  4008c0:	4798      	blx	r3
  4008c2:	4c0d      	ldr	r4, [pc, #52]	; (4008f8 <telemetry_update+0x3c>)
  4008c4:	7120      	strb	r0, [r4, #4]
	telemetry.subsystem_1.temperature = ss1_get_temp();
  4008c6:	4b0d      	ldr	r3, [pc, #52]	; (4008fc <telemetry_update+0x40>)
  4008c8:	4798      	blx	r3
  4008ca:	6020      	str	r0, [r4, #0]
	
	telemetry.subsystem_2.led_status = ss2_get_LED_status();
  4008cc:	4b0c      	ldr	r3, [pc, #48]	; (400900 <telemetry_update+0x44>)
  4008ce:	4798      	blx	r3
  4008d0:	7320      	strb	r0, [r4, #12]
	telemetry.subsystem_2.temperature = ss2_get_temp();
  4008d2:	4b0c      	ldr	r3, [pc, #48]	; (400904 <telemetry_update+0x48>)
  4008d4:	4798      	blx	r3
  4008d6:	60a0      	str	r0, [r4, #8]
	
	telemetry.commands.executed_cmds = cmd_get_executed_count();
  4008d8:	4b0b      	ldr	r3, [pc, #44]	; (400908 <telemetry_update+0x4c>)
  4008da:	4798      	blx	r3
  4008dc:	6120      	str	r0, [r4, #16]
	telemetry.commands.last_executed_id = cmd_get_last_executed_id();
  4008de:	4b0b      	ldr	r3, [pc, #44]	; (40090c <telemetry_update+0x50>)
  4008e0:	4798      	blx	r3
  4008e2:	7520      	strb	r0, [r4, #20]
	telemetry.commands.aborted_cmds = cmd_get_aborted_count();
  4008e4:	4b0a      	ldr	r3, [pc, #40]	; (400910 <telemetry_update+0x54>)
  4008e6:	4798      	blx	r3
  4008e8:	61a0      	str	r0, [r4, #24]
	telemetry.commands.last_aborted_id = cmd_get_last_aborted_id();
  4008ea:	4b0a      	ldr	r3, [pc, #40]	; (400914 <telemetry_update+0x58>)
  4008ec:	4798      	blx	r3
  4008ee:	7720      	strb	r0, [r4, #28]
  4008f0:	bd10      	pop	{r4, pc}
  4008f2:	bf00      	nop
  4008f4:	004007e1 	.word	0x004007e1
  4008f8:	20400a30 	.word	0x20400a30
  4008fc:	00400809 	.word	0x00400809
  400900:	00400881 	.word	0x00400881
  400904:	00400895 	.word	0x00400895
  400908:	00400661 	.word	0x00400661
  40090c:	0040066d 	.word	0x0040066d
  400910:	00400679 	.word	0x00400679
  400914:	00400685 	.word	0x00400685

00400918 <telemetry_get>:
}

void telemetry_get(void)
{
  400918:	b538      	push	{r3, r4, r5, lr}
	telemetry_update();
  40091a:	4b16      	ldr	r3, [pc, #88]	; (400974 <telemetry_get+0x5c>)
  40091c:	4798      	blx	r3

	printf("SS1 LED status: ");
  40091e:	4816      	ldr	r0, [pc, #88]	; (400978 <telemetry_get+0x60>)
  400920:	4b16      	ldr	r3, [pc, #88]	; (40097c <telemetry_get+0x64>)
  400922:	4798      	blx	r3
	printf(telemetry.subsystem_1.led_status ? "ON \n\r" : "OFF \n\r");
  400924:	4b16      	ldr	r3, [pc, #88]	; (400980 <telemetry_get+0x68>)
  400926:	7918      	ldrb	r0, [r3, #4]
  400928:	4b16      	ldr	r3, [pc, #88]	; (400984 <telemetry_get+0x6c>)
  40092a:	4a17      	ldr	r2, [pc, #92]	; (400988 <telemetry_get+0x70>)
  40092c:	2800      	cmp	r0, #0
  40092e:	bf14      	ite	ne
  400930:	4610      	movne	r0, r2
  400932:	4618      	moveq	r0, r3
  400934:	4c11      	ldr	r4, [pc, #68]	; (40097c <telemetry_get+0x64>)
  400936:	47a0      	blx	r4
	printf("SS1 Temperature: %u \n\r", telemetry.subsystem_1.temperature);
  400938:	4d11      	ldr	r5, [pc, #68]	; (400980 <telemetry_get+0x68>)
  40093a:	6829      	ldr	r1, [r5, #0]
  40093c:	4813      	ldr	r0, [pc, #76]	; (40098c <telemetry_get+0x74>)
  40093e:	47a0      	blx	r4

	printf("SS2 LED status: ");
  400940:	4813      	ldr	r0, [pc, #76]	; (400990 <telemetry_get+0x78>)
  400942:	47a0      	blx	r4
	printf(telemetry.subsystem_2.led_status ? "ON \n\r" : "OFF \n\r");
  400944:	7b28      	ldrb	r0, [r5, #12]
  400946:	4b0f      	ldr	r3, [pc, #60]	; (400984 <telemetry_get+0x6c>)
  400948:	4a0f      	ldr	r2, [pc, #60]	; (400988 <telemetry_get+0x70>)
  40094a:	2800      	cmp	r0, #0
  40094c:	bf14      	ite	ne
  40094e:	4610      	movne	r0, r2
  400950:	4618      	moveq	r0, r3
  400952:	47a0      	blx	r4
	printf("SS2 Temperature: %u \n\r", telemetry.subsystem_2.temperature);
  400954:	68a9      	ldr	r1, [r5, #8]
  400956:	480f      	ldr	r0, [pc, #60]	; (400994 <telemetry_get+0x7c>)
  400958:	47a0      	blx	r4
	
	printf("Executed commands count: %u \n\r", telemetry.commands.executed_cmds);
  40095a:	6929      	ldr	r1, [r5, #16]
  40095c:	480e      	ldr	r0, [pc, #56]	; (400998 <telemetry_get+0x80>)
  40095e:	47a0      	blx	r4
	printf("Aborted commands count: %u \n\r", telemetry.commands.aborted_cmds);
  400960:	69a9      	ldr	r1, [r5, #24]
  400962:	480e      	ldr	r0, [pc, #56]	; (40099c <telemetry_get+0x84>)
  400964:	47a0      	blx	r4
	printf("Last executed command ID: %u \n\r", telemetry.commands.last_executed_id);
  400966:	7d29      	ldrb	r1, [r5, #20]
  400968:	480d      	ldr	r0, [pc, #52]	; (4009a0 <telemetry_get+0x88>)
  40096a:	47a0      	blx	r4
	printf("Last aborted command ID: %u \n\r", telemetry.commands.last_aborted_id);
  40096c:	7f29      	ldrb	r1, [r5, #28]
  40096e:	480d      	ldr	r0, [pc, #52]	; (4009a4 <telemetry_get+0x8c>)
  400970:	47a0      	blx	r4
  400972:	bd38      	pop	{r3, r4, r5, pc}
  400974:	004008bd 	.word	0x004008bd
  400978:	00406564 	.word	0x00406564
  40097c:	0040204d 	.word	0x0040204d
  400980:	20400a30 	.word	0x20400a30
  400984:	0040655c 	.word	0x0040655c
  400988:	00406554 	.word	0x00406554
  40098c:	00406578 	.word	0x00406578
  400990:	00406590 	.word	0x00406590
  400994:	004065a4 	.word	0x004065a4
  400998:	004065bc 	.word	0x004065bc
  40099c:	004065dc 	.word	0x004065dc
  4009a0:	004065fc 	.word	0x004065fc
  4009a4:	0040661c 	.word	0x0040661c

004009a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4009a8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4009aa:	4810      	ldr	r0, [pc, #64]	; (4009ec <sysclk_init+0x44>)
  4009ac:	4b10      	ldr	r3, [pc, #64]	; (4009f0 <sysclk_init+0x48>)
  4009ae:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4009b0:	213e      	movs	r1, #62	; 0x3e
  4009b2:	2000      	movs	r0, #0
  4009b4:	4b0f      	ldr	r3, [pc, #60]	; (4009f4 <sysclk_init+0x4c>)
  4009b6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4009b8:	4c0f      	ldr	r4, [pc, #60]	; (4009f8 <sysclk_init+0x50>)
  4009ba:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4009bc:	2800      	cmp	r0, #0
  4009be:	d0fc      	beq.n	4009ba <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4009c0:	4b0e      	ldr	r3, [pc, #56]	; (4009fc <sysclk_init+0x54>)
  4009c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4009c4:	4a0e      	ldr	r2, [pc, #56]	; (400a00 <sysclk_init+0x58>)
  4009c6:	4b0f      	ldr	r3, [pc, #60]	; (400a04 <sysclk_init+0x5c>)
  4009c8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4009ca:	4c0f      	ldr	r4, [pc, #60]	; (400a08 <sysclk_init+0x60>)
  4009cc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4009ce:	2800      	cmp	r0, #0
  4009d0:	d0fc      	beq.n	4009cc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4009d2:	2002      	movs	r0, #2
  4009d4:	4b0d      	ldr	r3, [pc, #52]	; (400a0c <sysclk_init+0x64>)
  4009d6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4009d8:	2000      	movs	r0, #0
  4009da:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <sysclk_init+0x68>)
  4009dc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4009de:	4b0d      	ldr	r3, [pc, #52]	; (400a14 <sysclk_init+0x6c>)
  4009e0:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  4009e2:	4802      	ldr	r0, [pc, #8]	; (4009ec <sysclk_init+0x44>)
  4009e4:	4b02      	ldr	r3, [pc, #8]	; (4009f0 <sysclk_init+0x48>)
  4009e6:	4798      	blx	r3
  4009e8:	bd10      	pop	{r4, pc}
  4009ea:	bf00      	nop
  4009ec:	08f0d180 	.word	0x08f0d180
  4009f0:	0040178d 	.word	0x0040178d
  4009f4:	00401329 	.word	0x00401329
  4009f8:	0040137d 	.word	0x0040137d
  4009fc:	0040138d 	.word	0x0040138d
  400a00:	20183f01 	.word	0x20183f01
  400a04:	400e0600 	.word	0x400e0600
  400a08:	0040139d 	.word	0x0040139d
  400a0c:	0040128d 	.word	0x0040128d
  400a10:	004012c5 	.word	0x004012c5
  400a14:	00401681 	.word	0x00401681

00400a18 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a1c:	b980      	cbnz	r0, 400a40 <_read+0x28>
  400a1e:	460c      	mov	r4, r1
  400a20:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a22:	2a00      	cmp	r2, #0
  400a24:	dd0f      	ble.n	400a46 <_read+0x2e>
  400a26:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a28:	4e08      	ldr	r6, [pc, #32]	; (400a4c <_read+0x34>)
  400a2a:	4d09      	ldr	r5, [pc, #36]	; (400a50 <_read+0x38>)
  400a2c:	6830      	ldr	r0, [r6, #0]
  400a2e:	4621      	mov	r1, r4
  400a30:	682b      	ldr	r3, [r5, #0]
  400a32:	4798      	blx	r3
		ptr++;
  400a34:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a36:	42bc      	cmp	r4, r7
  400a38:	d1f8      	bne.n	400a2c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400a3a:	4640      	mov	r0, r8
  400a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a40:	f04f 38ff 	mov.w	r8, #4294967295
  400a44:	e7f9      	b.n	400a3a <_read+0x22>
	for (; len > 0; --len) {
  400a46:	4680      	mov	r8, r0
  400a48:	e7f7      	b.n	400a3a <_read+0x22>
  400a4a:	bf00      	nop
  400a4c:	20400d94 	.word	0x20400d94
  400a50:	20400d8c 	.word	0x20400d8c

00400a54 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400a54:	3801      	subs	r0, #1
  400a56:	2802      	cmp	r0, #2
  400a58:	d815      	bhi.n	400a86 <_write+0x32>
{
  400a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a5e:	460e      	mov	r6, r1
  400a60:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400a62:	b19a      	cbz	r2, 400a8c <_write+0x38>
  400a64:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400a66:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400aa0 <_write+0x4c>
  400a6a:	4f0c      	ldr	r7, [pc, #48]	; (400a9c <_write+0x48>)
  400a6c:	f8d8 0000 	ldr.w	r0, [r8]
  400a70:	f815 1b01 	ldrb.w	r1, [r5], #1
  400a74:	683b      	ldr	r3, [r7, #0]
  400a76:	4798      	blx	r3
  400a78:	2800      	cmp	r0, #0
  400a7a:	db0a      	blt.n	400a92 <_write+0x3e>
  400a7c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400a7e:	3c01      	subs	r4, #1
  400a80:	d1f4      	bne.n	400a6c <_write+0x18>
  400a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a86:	f04f 30ff 	mov.w	r0, #4294967295
  400a8a:	4770      	bx	lr
	for (; len != 0; --len) {
  400a8c:	4610      	mov	r0, r2
  400a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400a92:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a9a:	bf00      	nop
  400a9c:	20400d90 	.word	0x20400d90
  400aa0:	20400d94 	.word	0x20400d94

00400aa4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400aa4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400aa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400aaa:	4b63      	ldr	r3, [pc, #396]	; (400c38 <board_init+0x194>)
  400aac:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400aae:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  400ab2:	4a62      	ldr	r2, [pc, #392]	; (400c3c <board_init+0x198>)
  400ab4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ab6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  400aba:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ac0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400ac4:	4b5e      	ldr	r3, [pc, #376]	; (400c40 <board_init+0x19c>)
  400ac6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400aca:	f022 0201 	bic.w	r2, r2, #1
  400ace:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ad2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ad6:	f022 0201 	bic.w	r2, r2, #1
  400ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ae2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400ae6:	200a      	movs	r0, #10
  400ae8:	4c56      	ldr	r4, [pc, #344]	; (400c44 <board_init+0x1a0>)
  400aea:	47a0      	blx	r4
  400aec:	200b      	movs	r0, #11
  400aee:	47a0      	blx	r4
  400af0:	200c      	movs	r0, #12
  400af2:	47a0      	blx	r4
  400af4:	2010      	movs	r0, #16
  400af6:	47a0      	blx	r4
  400af8:	2011      	movs	r0, #17
  400afa:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400afc:	4b52      	ldr	r3, [pc, #328]	; (400c48 <board_init+0x1a4>)
  400afe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400b02:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b08:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b0a:	4a50      	ldr	r2, [pc, #320]	; (400c4c <board_init+0x1a8>)
  400b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b10:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b12:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b16:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b18:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b1a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b1e:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b20:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b24:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b26:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400b28:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b2e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400b32:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b34:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b36:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  400b3a:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b3c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b40:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b44:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400b48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400b4c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b4e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b52:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b54:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b56:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b5a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b5c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400b60:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b62:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b64:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  400b68:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b6a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b6c:	4938      	ldr	r1, [pc, #224]	; (400c50 <board_init+0x1ac>)
  400b6e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
  400b72:	f043 0310 	orr.w	r3, r3, #16
  400b76:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b7a:	4b36      	ldr	r3, [pc, #216]	; (400c54 <board_init+0x1b0>)
  400b7c:	2110      	movs	r1, #16
  400b7e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b80:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b84:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b86:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b88:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b8c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400b8e:	4308      	orrs	r0, r1
  400b90:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b92:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400b94:	4308      	orrs	r0, r1
  400b96:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b98:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400b9a:	2108      	movs	r1, #8
  400b9c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b9e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ba2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ba4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ba6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400baa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bac:	f020 0008 	bic.w	r0, r0, #8
  400bb0:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bb2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bb4:	f020 0008 	bic.w	r0, r0, #8
  400bb8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bba:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400bbc:	2104      	movs	r1, #4
  400bbe:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bc0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bc4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bc6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bc8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400bcc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400bce:	f020 0004 	bic.w	r0, r0, #4
  400bd2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400bd4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400bd6:	f020 0004 	bic.w	r0, r0, #4
  400bda:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bdc:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bde:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400be2:	2101      	movs	r1, #1
  400be4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bea:	2102      	movs	r1, #2
  400bec:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bee:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bf6:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400bfc:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400bfe:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c04:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c06:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400c0a:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c0c:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c0e:	4319      	orrs	r1, r3
  400c10:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c12:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  400c18:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c1e:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400c20:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400c22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400c26:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400c28:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400c2c:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400c2e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400c30:	4319      	orrs	r1, r3
  400c32:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400c34:	6053      	str	r3, [r2, #4]
  400c36:	bd10      	pop	{r4, pc}
  400c38:	400e1850 	.word	0x400e1850
  400c3c:	5a00080c 	.word	0x5a00080c
  400c40:	e000ed00 	.word	0xe000ed00
  400c44:	004013ad 	.word	0x004013ad
  400c48:	400e0e00 	.word	0x400e0e00
  400c4c:	400e1200 	.word	0x400e1200
  400c50:	40088000 	.word	0x40088000
  400c54:	400e1000 	.word	0x400e1000

00400c58 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400c58:	b508      	push	{r3, lr}
	if (module_inst->hw == MCAN0) {
  400c5a:	6803      	ldr	r3, [r0, #0]
  400c5c:	4a07      	ldr	r2, [pc, #28]	; (400c7c <_mcan_enable_peripheral_clock+0x24>)
  400c5e:	4293      	cmp	r3, r2
  400c60:	d003      	beq.n	400c6a <_mcan_enable_peripheral_clock+0x12>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
	} else if (module_inst->hw == MCAN1) {
  400c62:	4a07      	ldr	r2, [pc, #28]	; (400c80 <_mcan_enable_peripheral_clock+0x28>)
  400c64:	4293      	cmp	r3, r2
  400c66:	d004      	beq.n	400c72 <_mcan_enable_peripheral_clock+0x1a>
  400c68:	bd08      	pop	{r3, pc}
		pmc_enable_periph_clk(ID_MCAN0);
  400c6a:	2023      	movs	r0, #35	; 0x23
  400c6c:	4b05      	ldr	r3, [pc, #20]	; (400c84 <_mcan_enable_peripheral_clock+0x2c>)
  400c6e:	4798      	blx	r3
  400c70:	bd08      	pop	{r3, pc}
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
  400c72:	2025      	movs	r0, #37	; 0x25
  400c74:	4b03      	ldr	r3, [pc, #12]	; (400c84 <_mcan_enable_peripheral_clock+0x2c>)
  400c76:	4798      	blx	r3
	}
}
  400c78:	e7f6      	b.n	400c68 <_mcan_enable_peripheral_clock+0x10>
  400c7a:	bf00      	nop
  400c7c:	40030000 	.word	0x40030000
  400c80:	40034000 	.word	0x40034000
  400c84:	004013ad 	.word	0x004013ad

00400c88 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400c88:	b570      	push	{r4, r5, r6, lr}
  400c8a:	4606      	mov	r6, r0
  400c8c:	460c      	mov	r4, r1
  400c8e:	4615      	mov	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400c90:	6001      	str	r1, [r0, #0]

	pmc_disable_pck(PMC_PCK_5);
  400c92:	2005      	movs	r0, #5
  400c94:	4b83      	ldr	r3, [pc, #524]	; (400ea4 <mcan_init+0x21c>)
  400c96:	4798      	blx	r3

	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400c98:	2190      	movs	r1, #144	; 0x90
  400c9a:	2005      	movs	r0, #5
  400c9c:	4b82      	ldr	r3, [pc, #520]	; (400ea8 <mcan_init+0x220>)
  400c9e:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400ca0:	2005      	movs	r0, #5
  400ca2:	4b82      	ldr	r3, [pc, #520]	; (400eac <mcan_init+0x224>)
  400ca4:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400ca6:	4630      	mov	r0, r6
  400ca8:	4b81      	ldr	r3, [pc, #516]	; (400eb0 <mcan_init+0x228>)
  400caa:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400cac:	69a3      	ldr	r3, [r4, #24]
  400cae:	f043 0302 	orr.w	r3, r3, #2
  400cb2:	61a3      	str	r3, [r4, #24]
	if (hw == MCAN0) {
  400cb4:	4b7f      	ldr	r3, [pc, #508]	; (400eb4 <mcan_init+0x22c>)
  400cb6:	429c      	cmp	r4, r3
  400cb8:	f000 809d 	beq.w	400df6 <mcan_init+0x16e>
	} else if (hw == MCAN1) {
  400cbc:	4b7e      	ldr	r3, [pc, #504]	; (400eb8 <mcan_init+0x230>)
  400cbe:	429c      	cmp	r4, r3
  400cc0:	f000 80c4 	beq.w	400e4c <mcan_init+0x1c4>
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400cc4:	2300      	movs	r3, #0
  400cc6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400cca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400cce:	4b7b      	ldr	r3, [pc, #492]	; (400ebc <mcan_init+0x234>)
  400cd0:	61e3      	str	r3, [r4, #28]
	hw->MCAN_DBTP = MCAN_DBTP_DBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400cd2:	f640 1333 	movw	r3, #2355	; 0x933
  400cd6:	60e3      	str	r3, [r4, #12]
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400cd8:	7beb      	ldrb	r3, [r5, #15]
  400cda:	021b      	lsls	r3, r3, #8
  400cdc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		    MCAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
  400ce0:	7c2a      	ldrb	r2, [r5, #16]
  400ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	hw->MCAN_TDCR = MCAN_TDCR_TDCO(config->delay_compensation_offset) |
  400ce6:	4313      	orrs	r3, r2
  400ce8:	64a3      	str	r3, [r4, #72]	; 0x48
	if (config->tdc_enable) {
  400cea:	7bab      	ldrb	r3, [r5, #14]
  400cec:	b11b      	cbz	r3, 400cf6 <mcan_init+0x6e>
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
  400cee:	68e3      	ldr	r3, [r4, #12]
  400cf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400cf4:	60e3      	str	r3, [r4, #12]
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400cf6:	6962      	ldr	r2, [r4, #20]
  400cf8:	786b      	ldrb	r3, [r5, #1]
  400cfa:	4313      	orrs	r3, r2
  400cfc:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
  400cfe:	78ab      	ldrb	r3, [r5, #2]
  400d00:	b11b      	cbz	r3, 400d0a <mcan_init+0x82>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400d02:	69a3      	ldr	r3, [r4, #24]
  400d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400d08:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
  400d0a:	796b      	ldrb	r3, [r5, #5]
  400d0c:	b91b      	cbnz	r3, 400d16 <mcan_init+0x8e>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400d0e:	69a3      	ldr	r3, [r4, #24]
  400d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400d14:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
  400d16:	79ab      	ldrb	r3, [r5, #6]
  400d18:	b11b      	cbz	r3, 400d22 <mcan_init+0x9a>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400d1a:	69a3      	ldr	r3, [r4, #24]
  400d1c:	f043 0310 	orr.w	r3, r3, #16
  400d20:	61a3      	str	r3, [r4, #24]
	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400d22:	7a2b      	ldrb	r3, [r5, #8]
  400d24:	041b      	lsls	r3, r3, #16
  400d26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400d2a:	f043 0301 	orr.w	r3, r3, #1
  400d2e:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
  400d30:	7b2b      	ldrb	r3, [r5, #12]
  400d32:	7b6a      	ldrb	r2, [r5, #13]
  400d34:	4313      	orrs	r3, r2
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400d36:	896a      	ldrh	r2, [r5, #10]
			config->timeout_mode | config->timeout_enable;
  400d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400d3c:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400d3e:	7c6b      	ldrb	r3, [r5, #17]
  400d40:	011b      	lsls	r3, r3, #4
  400d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400d46:	7caa      	ldrb	r2, [r5, #18]
  400d48:	0092      	lsls	r2, r2, #2
  400d4a:	f002 020c 	and.w	r2, r2, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400d4e:	4313      	orrs	r3, r2
  400d50:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400d54:	7ceb      	ldrb	r3, [r5, #19]
  400d56:	b12b      	cbz	r3, 400d64 <mcan_init+0xdc>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400d58:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400d5c:	f043 0302 	orr.w	r3, r3, #2
  400d60:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if (config->remote_frames_extended_reject) {
  400d64:	7d2b      	ldrb	r3, [r5, #20]
  400d66:	b12b      	cbz	r3, 400d74 <mcan_init+0xec>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400d68:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400d6c:	f043 0301 	orr.w	r3, r3, #1
  400d70:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hw->MCAN_XIDAM = config->extended_id_mask;
  400d74:	69ab      	ldr	r3, [r5, #24]
  400d76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	if (config->rx_fifo_0_overwrite) {
  400d7a:	7f2b      	ldrb	r3, [r5, #28]
  400d7c:	b12b      	cbz	r3, 400d8a <mcan_init+0x102>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400d7e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
  400d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400d86:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400d8a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
  400d8e:	7f6b      	ldrb	r3, [r5, #29]
  400d90:	061b      	lsls	r3, r3, #24
  400d92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400d96:	4313      	orrs	r3, r2
  400d98:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (config->rx_fifo_1_overwrite) {
  400d9c:	7fab      	ldrb	r3, [r5, #30]
  400d9e:	b12b      	cbz	r3, 400dac <mcan_init+0x124>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400da0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  400da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400da8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400dac:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  400db0:	7feb      	ldrb	r3, [r5, #31]
  400db2:	061b      	lsls	r3, r3, #24
  400db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400db8:	4313      	orrs	r3, r2
  400dba:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	if (config->tx_queue_mode) {
  400dbe:	f895 3020 	ldrb.w	r3, [r5, #32]
  400dc2:	b12b      	cbz	r3, 400dd0 <mcan_init+0x148>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400dc4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
  400dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400dcc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400dd0:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  400dd4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  400dd8:	061b      	lsls	r3, r3, #24
  400dda:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400dde:	4313      	orrs	r3, r2
  400de0:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400de4:	2303      	movs	r3, #3
  400de6:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400de8:	f04f 33ff 	mov.w	r3, #4294967295
  400dec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400df0:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  400df4:	bd70      	pop	{r4, r5, r6, pc}
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400df6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400dfa:	4931      	ldr	r1, [pc, #196]	; (400ec0 <mcan_init+0x238>)
  400dfc:	4011      	ands	r1, r2
  400dfe:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e02:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400e06:	492f      	ldr	r1, [pc, #188]	; (400ec4 <mcan_init+0x23c>)
  400e08:	4011      	ands	r1, r2
  400e0a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400e0e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400e12:	492d      	ldr	r1, [pc, #180]	; (400ec8 <mcan_init+0x240>)
  400e14:	4011      	ands	r1, r2
  400e16:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e1a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400e1e:	492b      	ldr	r1, [pc, #172]	; (400ecc <mcan_init+0x244>)
  400e20:	4011      	ands	r1, r2
  400e22:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e26:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400e2a:	4929      	ldr	r1, [pc, #164]	; (400ed0 <mcan_init+0x248>)
  400e2c:	4011      	ands	r1, r2
  400e2e:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400e32:	4828      	ldr	r0, [pc, #160]	; (400ed4 <mcan_init+0x24c>)
  400e34:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400e36:	4928      	ldr	r1, [pc, #160]	; (400ed8 <mcan_init+0x250>)
  400e38:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400e3a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400e3e:	4927      	ldr	r1, [pc, #156]	; (400edc <mcan_init+0x254>)
  400e40:	400a      	ands	r2, r1
  400e42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  400e46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400e4a:	e73b      	b.n	400cc4 <mcan_init+0x3c>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400e4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400e50:	4923      	ldr	r1, [pc, #140]	; (400ee0 <mcan_init+0x258>)
  400e52:	4011      	ands	r1, r2
  400e54:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e58:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400e5c:	4921      	ldr	r1, [pc, #132]	; (400ee4 <mcan_init+0x25c>)
  400e5e:	4011      	ands	r1, r2
  400e60:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400e64:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400e68:	491f      	ldr	r1, [pc, #124]	; (400ee8 <mcan_init+0x260>)
  400e6a:	4011      	ands	r1, r2
  400e6c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e70:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400e74:	491d      	ldr	r1, [pc, #116]	; (400eec <mcan_init+0x264>)
  400e76:	4011      	ands	r1, r2
  400e78:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400e7c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400e80:	491b      	ldr	r1, [pc, #108]	; (400ef0 <mcan_init+0x268>)
  400e82:	4011      	ands	r1, r2
  400e84:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400e88:	481a      	ldr	r0, [pc, #104]	; (400ef4 <mcan_init+0x26c>)
  400e8a:	4010      	ands	r0, r2
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400e8c:	4912      	ldr	r1, [pc, #72]	; (400ed8 <mcan_init+0x250>)
  400e8e:	4301      	orrs	r1, r0
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400e90:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400e94:	4918      	ldr	r1, [pc, #96]	; (400ef8 <mcan_init+0x270>)
  400e96:	400a      	ands	r2, r1
  400e98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  400e9c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400ea0:	e710      	b.n	400cc4 <mcan_init+0x3c>
  400ea2:	bf00      	nop
  400ea4:	0040146d 	.word	0x0040146d
  400ea8:	004013cd 	.word	0x004013cd
  400eac:	00401459 	.word	0x00401459
  400eb0:	00400c59 	.word	0x00400c59
  400eb4:	40030000 	.word	0x40030000
  400eb8:	40034000 	.word	0x40034000
  400ebc:	06020a07 	.word	0x06020a07
  400ec0:	20400b20 	.word	0x20400b20
  400ec4:	20400a90 	.word	0x20400a90
  400ec8:	20400aa0 	.word	0x20400aa0
  400ecc:	20400ae0 	.word	0x20400ae0
  400ed0:	20400a50 	.word	0x20400a50
  400ed4:	20400b30 	.word	0x20400b30
  400ed8:	02020000 	.word	0x02020000
  400edc:	20400b70 	.word	0x20400b70
  400ee0:	20400c60 	.word	0x20400c60
  400ee4:	20400bd0 	.word	0x20400bd0
  400ee8:	20400be0 	.word	0x20400be0
  400eec:	20400c20 	.word	0x20400c20
  400ef0:	20400b90 	.word	0x20400b90
  400ef4:	20400c70 	.word	0x20400c70
  400ef8:	20400cb0 	.word	0x20400cb0

00400efc <mcan_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN module instance
 * \param[in]  baudrate    MCAN baudrate
 */
void mcan_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400efe:	4605      	mov	r5, r0
  400f00:	460f      	mov	r7, r1
//@{
static inline uint32_t genclk_get_frequency_hz(uint32_t ul_id)
{
	uint32_t pck_source,clock_config;
	uint32_t pck_freq = 0;
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  400f02:	4b2d      	ldr	r3, [pc, #180]	; (400fb8 <mcan_set_baudrate+0xbc>)
  400f04:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  400f06:	f006 0607 	and.w	r6, r6, #7
	switch(pck_source)
  400f0a:	2e04      	cmp	r6, #4
  400f0c:	d84f      	bhi.n	400fae <mcan_set_baudrate+0xb2>
  400f0e:	e8df f006 	tbb	[pc, r6]
  400f12:	2219      	.short	0x2219
  400f14:	4622      	.short	0x4622
  400f16:	03          	.byte	0x03
  400f17:	00          	.byte	0x00
			break;
		case PMC_PCK_CSS_UPLL_CLK:
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
			break;
		case PMC_PCK_CSS_MCK:
			pck_freq = sysclk_get_main_hz();
  400f18:	4c28      	ldr	r4, [pc, #160]	; (400fbc <mcan_set_baudrate+0xc0>)
			break;
		default:
			break;
	}
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  400f1a:	4b27      	ldr	r3, [pc, #156]	; (400fb8 <mcan_set_baudrate+0xbc>)
  400f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f1e:	f3c3 1307 	ubfx	r3, r3, #4, #8
  400f22:	3301      	adds	r3, #1
  400f24:	fbb4 f3f3 	udiv	r3, r4, r3
	uint32_t mcan_nbtp_nbrp_value;
	uint32_t mcan_nbtp_nsgw_value = 3, mcan_nbtp_ntseg1_value = 10, mcan_nbtp_ntseg2_value = 7;

	gclk_mcan_value = genclk_get_frequency_hz(PMC_PCK_5);

	mcan_nbtp_nbrp_value = gclk_mcan_value / baudrate / (3 + mcan_nbtp_ntseg1_value + mcan_nbtp_ntseg2_value);
  400f28:	fbb3 f3f7 	udiv	r3, r3, r7
  400f2c:	4a24      	ldr	r2, [pc, #144]	; (400fc0 <mcan_set_baudrate+0xc4>)
  400f2e:	fba2 2303 	umull	r2, r3, r2, r3
  400f32:	091b      	lsrs	r3, r3, #4
#if (SAMV71B || SAME70B || SAMV70B)
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  400f34:	3b01      	subs	r3, #1
  400f36:	4a23      	ldr	r2, [pc, #140]	; (400fc4 <mcan_set_baudrate+0xc8>)
  400f38:	ea02 4303 	and.w	r3, r2, r3, lsl #16
			MCAN_NBTP_NSJW(mcan_nbtp_nsgw_value) |
			MCAN_NBTP_NTSEG1(mcan_nbtp_ntseg1_value) |
  400f3c:	4a22      	ldr	r2, [pc, #136]	; (400fc8 <mcan_set_baudrate+0xcc>)
  400f3e:	431a      	orrs	r2, r3
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
  400f40:	61ea      	str	r2, [r5, #28]
  400f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pmc_get_slck_config())
  400f44:	4b21      	ldr	r3, [pc, #132]	; (400fcc <mcan_set_baudrate+0xd0>)
  400f46:	4798      	blx	r3
  400f48:	2800      	cmp	r0, #0
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  400f4a:	bf14      	ite	ne
  400f4c:	f44f 44fa 	movne.w	r4, #32000	; 0x7d00
  400f50:	f44f 4400 	moveq.w	r4, #32768	; 0x8000
  400f54:	e7e1      	b.n	400f1a <mcan_set_baudrate+0x1e>
			clock_config = pmc_get_mainck_config();
  400f56:	4b1e      	ldr	r3, [pc, #120]	; (400fd0 <mcan_set_baudrate+0xd4>)
  400f58:	4798      	blx	r3
			if (clock_config & CKGR_MOR_MOSCSEL)
  400f5a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400f5e:	d00e      	beq.n	400f7e <mcan_set_baudrate+0x82>
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  400f60:	f000 0070 	and.w	r0, r0, #112	; 0x70
  400f64:	2810      	cmp	r0, #16
  400f66:	d006      	beq.n	400f76 <mcan_set_baudrate+0x7a>
  400f68:	2820      	cmp	r0, #32
  400f6a:	d006      	beq.n	400f7a <mcan_set_baudrate+0x7e>
	uint32_t pck_freq = 0;
  400f6c:	2800      	cmp	r0, #0
  400f6e:	4c19      	ldr	r4, [pc, #100]	; (400fd4 <mcan_set_baudrate+0xd8>)
  400f70:	bf18      	it	ne
  400f72:	2400      	movne	r4, #0
  400f74:	e004      	b.n	400f80 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  400f76:	4c18      	ldr	r4, [pc, #96]	; (400fd8 <mcan_set_baudrate+0xdc>)
  400f78:	e002      	b.n	400f80 <mcan_set_baudrate+0x84>
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  400f7a:	4c18      	ldr	r4, [pc, #96]	; (400fdc <mcan_set_baudrate+0xe0>)
  400f7c:	e000      	b.n	400f80 <mcan_set_baudrate+0x84>
				pck_freq = OSC_MAINCK_XTAL_HZ;
  400f7e:	4c17      	ldr	r4, [pc, #92]	; (400fdc <mcan_set_baudrate+0xe0>)
			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  400f80:	2e02      	cmp	r6, #2
  400f82:	d1ca      	bne.n	400f1a <mcan_set_baudrate+0x1e>
				clock_config = pmc_get_pllack_config();
  400f84:	4b16      	ldr	r3, [pc, #88]	; (400fe0 <mcan_set_baudrate+0xe4>)
  400f86:	4798      	blx	r3
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  400f88:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
  400f8c:	d011      	beq.n	400fb2 <mcan_set_baudrate+0xb6>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  400f8e:	f3c0 430a 	ubfx	r3, r0, #16, #11
  400f92:	3301      	adds	r3, #1
  400f94:	fbb3 f3f2 	udiv	r3, r3, r2
  400f98:	fb03 f404 	mul.w	r4, r3, r4
  400f9c:	e7bd      	b.n	400f1a <mcan_set_baudrate+0x1e>
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  400f9e:	4b11      	ldr	r3, [pc, #68]	; (400fe4 <mcan_set_baudrate+0xe8>)
  400fa0:	4798      	blx	r3
  400fa2:	4c11      	ldr	r4, [pc, #68]	; (400fe8 <mcan_set_baudrate+0xec>)
  400fa4:	4b11      	ldr	r3, [pc, #68]	; (400fec <mcan_set_baudrate+0xf0>)
  400fa6:	2800      	cmp	r0, #0
  400fa8:	bf18      	it	ne
  400faa:	461c      	movne	r4, r3
  400fac:	e7b5      	b.n	400f1a <mcan_set_baudrate+0x1e>
	uint32_t pck_freq = 0;
  400fae:	2400      	movs	r4, #0
  400fb0:	e7b3      	b.n	400f1a <mcan_set_baudrate+0x1e>
					return 0;
  400fb2:	2300      	movs	r3, #0
  400fb4:	e7b8      	b.n	400f28 <mcan_set_baudrate+0x2c>
  400fb6:	bf00      	nop
  400fb8:	400e0600 	.word	0x400e0600
  400fbc:	11e1a300 	.word	0x11e1a300
  400fc0:	cccccccd 	.word	0xcccccccd
  400fc4:	01ff0000 	.word	0x01ff0000
  400fc8:	06000a07 	.word	0x06000a07
  400fcc:	00401409 	.word	0x00401409
  400fd0:	00401419 	.word	0x00401419
  400fd4:	003d0900 	.word	0x003d0900
  400fd8:	007a1200 	.word	0x007a1200
  400fdc:	00b71b00 	.word	0x00b71b00
  400fe0:	00401435 	.word	0x00401435
  400fe4:	00401449 	.word	0x00401449
  400fe8:	1c9c3800 	.word	0x1c9c3800
  400fec:	0e4e1c00 	.word	0x0e4e1c00

00400ff0 <mcan_start>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400ff0:	6802      	ldr	r2, [r0, #0]
  400ff2:	6993      	ldr	r3, [r2, #24]
  400ff4:	f023 0301 	bic.w	r3, r3, #1
  400ff8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400ffa:	6802      	ldr	r2, [r0, #0]
  400ffc:	6993      	ldr	r3, [r2, #24]
  400ffe:	f013 0f01 	tst.w	r3, #1
  401002:	d1fb      	bne.n	400ffc <mcan_start+0xc>
}
  401004:	4770      	bx	lr

00401006 <mcan_stop>:
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  401006:	6802      	ldr	r2, [r0, #0]
  401008:	6993      	ldr	r3, [r2, #24]
  40100a:	f043 0301 	orr.w	r3, r3, #1
  40100e:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  401010:	6802      	ldr	r2, [r0, #0]
  401012:	6993      	ldr	r3, [r2, #24]
  401014:	f013 0f01 	tst.w	r3, #1
  401018:	d0fb      	beq.n	401012 <mcan_stop+0xc>
}
  40101a:	4770      	bx	lr

0040101c <mcan_set_rx_standard_filter>:
 */
enum status_code mcan_set_rx_standard_filter(
		struct mcan_module *const module_inst,
		struct mcan_standard_message_filter_element *sd_filter, uint32_t index)
{
	if (module_inst->hw == MCAN0) {
  40101c:	6803      	ldr	r3, [r0, #0]
  40101e:	480a      	ldr	r0, [pc, #40]	; (401048 <mcan_set_rx_standard_filter+0x2c>)
  401020:	4283      	cmp	r3, r0
  401022:	d008      	beq.n	401036 <mcan_set_rx_standard_filter+0x1a>
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  401024:	4809      	ldr	r0, [pc, #36]	; (40104c <mcan_set_rx_standard_filter+0x30>)
  401026:	4283      	cmp	r3, r0
  401028:	d10b      	bne.n	401042 <mcan_set_rx_standard_filter+0x26>
		mcan1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  40102a:	6809      	ldr	r1, [r1, #0]
  40102c:	4b08      	ldr	r3, [pc, #32]	; (401050 <mcan_set_rx_standard_filter+0x34>)
  40102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return STATUS_OK;
  401032:	2000      	movs	r0, #0
  401034:	4770      	bx	lr
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  401036:	6809      	ldr	r1, [r1, #0]
  401038:	4b06      	ldr	r3, [pc, #24]	; (401054 <mcan_set_rx_standard_filter+0x38>)
  40103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return STATUS_OK;
  40103e:	2000      	movs	r0, #0
  401040:	4770      	bx	lr
	}
	return ERR_INVALID_ARG;
  401042:	f06f 0007 	mvn.w	r0, #7
}
  401046:	4770      	bx	lr
  401048:	40030000 	.word	0x40030000
  40104c:	40034000 	.word	0x40034000
  401050:	20400c60 	.word	0x20400c60
  401054:	20400b20 	.word	0x20400b20

00401058 <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  401058:	b430      	push	{r4, r5}
  40105a:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  40105c:	6803      	ldr	r3, [r0, #0]
  40105e:	490f      	ldr	r1, [pc, #60]	; (40109c <mcan_get_rx_buffer_element+0x44>)
  401060:	428b      	cmp	r3, r1
  401062:	d00d      	beq.n	401080 <mcan_get_rx_buffer_element+0x28>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  401064:	490e      	ldr	r1, [pc, #56]	; (4010a0 <mcan_get_rx_buffer_element+0x48>)
  401066:	428b      	cmp	r3, r1
  401068:	d114      	bne.n	401094 <mcan_get_rx_buffer_element+0x3c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  40106a:	4c0e      	ldr	r4, [pc, #56]	; (4010a4 <mcan_get_rx_buffer_element+0x4c>)
  40106c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  401070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401072:	6028      	str	r0, [r5, #0]
  401074:	6069      	str	r1, [r5, #4]
  401076:	60aa      	str	r2, [r5, #8]
  401078:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  40107a:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  40107c:	bc30      	pop	{r4, r5}
  40107e:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  401080:	4c09      	ldr	r4, [pc, #36]	; (4010a8 <mcan_get_rx_buffer_element+0x50>)
  401082:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  401086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401088:	6028      	str	r0, [r5, #0]
  40108a:	6069      	str	r1, [r5, #4]
  40108c:	60aa      	str	r2, [r5, #8]
  40108e:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  401090:	2000      	movs	r0, #0
  401092:	e7f3      	b.n	40107c <mcan_get_rx_buffer_element+0x24>
	return ERR_INVALID_ARG;
  401094:	f06f 0007 	mvn.w	r0, #7
  401098:	e7f0      	b.n	40107c <mcan_get_rx_buffer_element+0x24>
  40109a:	bf00      	nop
  40109c:	40030000 	.word	0x40030000
  4010a0:	40034000 	.word	0x40034000
  4010a4:	20400b90 	.word	0x20400b90
  4010a8:	20400a50 	.word	0x20400a50

004010ac <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  4010ac:	b430      	push	{r4, r5}
  4010ae:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  4010b0:	6803      	ldr	r3, [r0, #0]
  4010b2:	490f      	ldr	r1, [pc, #60]	; (4010f0 <mcan_get_rx_fifo_0_element+0x44>)
  4010b4:	428b      	cmp	r3, r1
  4010b6:	d00d      	beq.n	4010d4 <mcan_get_rx_fifo_0_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  4010b8:	490e      	ldr	r1, [pc, #56]	; (4010f4 <mcan_get_rx_fifo_0_element+0x48>)
  4010ba:	428b      	cmp	r3, r1
  4010bc:	d114      	bne.n	4010e8 <mcan_get_rx_fifo_0_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4010be:	4c0e      	ldr	r4, [pc, #56]	; (4010f8 <mcan_get_rx_fifo_0_element+0x4c>)
  4010c0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  4010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4010c6:	6028      	str	r0, [r5, #0]
  4010c8:	6069      	str	r1, [r5, #4]
  4010ca:	60aa      	str	r2, [r5, #8]
  4010cc:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  4010ce:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  4010d0:	bc30      	pop	{r4, r5}
  4010d2:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4010d4:	4c09      	ldr	r4, [pc, #36]	; (4010fc <mcan_get_rx_fifo_0_element+0x50>)
  4010d6:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  4010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4010dc:	6028      	str	r0, [r5, #0]
  4010de:	6069      	str	r1, [r5, #4]
  4010e0:	60aa      	str	r2, [r5, #8]
  4010e2:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  4010e4:	2000      	movs	r0, #0
  4010e6:	e7f3      	b.n	4010d0 <mcan_get_rx_fifo_0_element+0x24>
	return ERR_INVALID_ARG;
  4010e8:	f06f 0007 	mvn.w	r0, #7
  4010ec:	e7f0      	b.n	4010d0 <mcan_get_rx_fifo_0_element+0x24>
  4010ee:	bf00      	nop
  4010f0:	40030000 	.word	0x40030000
  4010f4:	40034000 	.word	0x40034000
  4010f8:	20400be0 	.word	0x20400be0
  4010fc:	20400aa0 	.word	0x20400aa0

00401100 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  401100:	b430      	push	{r4, r5}
  401102:	460d      	mov	r5, r1
	if (module_inst->hw == MCAN0) {
  401104:	6803      	ldr	r3, [r0, #0]
  401106:	490f      	ldr	r1, [pc, #60]	; (401144 <mcan_get_rx_fifo_1_element+0x44>)
  401108:	428b      	cmp	r3, r1
  40110a:	d00d      	beq.n	401128 <mcan_get_rx_fifo_1_element+0x28>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  40110c:	490e      	ldr	r1, [pc, #56]	; (401148 <mcan_get_rx_fifo_1_element+0x48>)
  40110e:	428b      	cmp	r3, r1
  401110:	d114      	bne.n	40113c <mcan_get_rx_fifo_1_element+0x3c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401112:	4c0e      	ldr	r4, [pc, #56]	; (40114c <mcan_get_rx_fifo_1_element+0x4c>)
  401114:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  401118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40111a:	6028      	str	r0, [r5, #0]
  40111c:	6069      	str	r1, [r5, #4]
  40111e:	60aa      	str	r2, [r5, #8]
  401120:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  401122:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  401124:	bc30      	pop	{r4, r5}
  401126:	4770      	bx	lr
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401128:	4c09      	ldr	r4, [pc, #36]	; (401150 <mcan_get_rx_fifo_1_element+0x50>)
  40112a:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  40112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401130:	6028      	str	r0, [r5, #0]
  401132:	6069      	str	r1, [r5, #4]
  401134:	60aa      	str	r2, [r5, #8]
  401136:	60eb      	str	r3, [r5, #12]
		return STATUS_OK;
  401138:	2000      	movs	r0, #0
  40113a:	e7f3      	b.n	401124 <mcan_get_rx_fifo_1_element+0x24>
	return ERR_INVALID_ARG;
  40113c:	f06f 0007 	mvn.w	r0, #7
  401140:	e7f0      	b.n	401124 <mcan_get_rx_fifo_1_element+0x24>
  401142:	bf00      	nop
  401144:	40030000 	.word	0x40030000
  401148:	40034000 	.word	0x40034000
  40114c:	20400c20 	.word	0x20400c20
  401150:	20400ae0 	.word	0x20400ae0

00401154 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  401154:	b410      	push	{r4}
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  401156:	6803      	ldr	r3, [r0, #0]
  401158:	4819      	ldr	r0, [pc, #100]	; (4011c0 <mcan_set_tx_buffer_element+0x6c>)
  40115a:	4283      	cmp	r3, r0
  40115c:	d018      	beq.n	401190 <mcan_set_tx_buffer_element+0x3c>
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == MCAN1) {
  40115e:	4819      	ldr	r0, [pc, #100]	; (4011c4 <mcan_set_tx_buffer_element+0x70>)
  401160:	4283      	cmp	r3, r0
  401162:	d129      	bne.n	4011b8 <mcan_set_tx_buffer_element+0x64>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401164:	680c      	ldr	r4, [r1, #0]
  401166:	4818      	ldr	r0, [pc, #96]	; (4011c8 <mcan_set_tx_buffer_element+0x74>)
  401168:	0112      	lsls	r2, r2, #4
  40116a:	1883      	adds	r3, r0, r2
  40116c:	5084      	str	r4, [r0, r2]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  40116e:	684c      	ldr	r4, [r1, #4]
  401170:	605c      	str	r4, [r3, #4]
  401172:	f101 0308 	add.w	r3, r1, #8
  401176:	3207      	adds	r2, #7
  401178:	4402      	add	r2, r0
  40117a:	3110      	adds	r1, #16
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  40117c:	f813 0b01 	ldrb.w	r0, [r3], #1
  401180:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401184:	428b      	cmp	r3, r1
  401186:	d1f9      	bne.n	40117c <mcan_set_tx_buffer_element+0x28>
		}
		return STATUS_OK;
  401188:	2000      	movs	r0, #0
	}
	return ERR_INVALID_ARG;
}
  40118a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40118e:	4770      	bx	lr
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401190:	680c      	ldr	r4, [r1, #0]
  401192:	480e      	ldr	r0, [pc, #56]	; (4011cc <mcan_set_tx_buffer_element+0x78>)
  401194:	0112      	lsls	r2, r2, #4
  401196:	1883      	adds	r3, r0, r2
  401198:	5084      	str	r4, [r0, r2]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  40119a:	684c      	ldr	r4, [r1, #4]
  40119c:	605c      	str	r4, [r3, #4]
  40119e:	f101 0308 	add.w	r3, r1, #8
  4011a2:	3207      	adds	r2, #7
  4011a4:	4402      	add	r2, r0
  4011a6:	3110      	adds	r1, #16
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  4011a8:	f813 0b01 	ldrb.w	r0, [r3], #1
  4011ac:	f802 0f01 	strb.w	r0, [r2, #1]!
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4011b0:	428b      	cmp	r3, r1
  4011b2:	d1f9      	bne.n	4011a8 <mcan_set_tx_buffer_element+0x54>
		return STATUS_OK;
  4011b4:	2000      	movs	r0, #0
  4011b6:	e7e8      	b.n	40118a <mcan_set_tx_buffer_element+0x36>
	return ERR_INVALID_ARG;
  4011b8:	f06f 0007 	mvn.w	r0, #7
  4011bc:	e7e5      	b.n	40118a <mcan_set_tx_buffer_element+0x36>
  4011be:	bf00      	nop
  4011c0:	40030000 	.word	0x40030000
  4011c4:	40034000 	.word	0x40034000
  4011c8:	20400c70 	.word	0x20400c70
  4011cc:	20400b30 	.word	0x20400b30

004011d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4011d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4011d2:	4770      	bx	lr

004011d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4011d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4011d6:	4770      	bx	lr

004011d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011dc:	4604      	mov	r4, r0
  4011de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011e0:	4b0e      	ldr	r3, [pc, #56]	; (40121c <pio_handler_process+0x44>)
  4011e2:	4798      	blx	r3
  4011e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4011e6:	4620      	mov	r0, r4
  4011e8:	4b0d      	ldr	r3, [pc, #52]	; (401220 <pio_handler_process+0x48>)
  4011ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4011ec:	4005      	ands	r5, r0
  4011ee:	d013      	beq.n	401218 <pio_handler_process+0x40>
  4011f0:	4c0c      	ldr	r4, [pc, #48]	; (401224 <pio_handler_process+0x4c>)
  4011f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4011f6:	e003      	b.n	401200 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011f8:	42b4      	cmp	r4, r6
  4011fa:	d00d      	beq.n	401218 <pio_handler_process+0x40>
  4011fc:	3410      	adds	r4, #16
		while (status != 0) {
  4011fe:	b15d      	cbz	r5, 401218 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401200:	6820      	ldr	r0, [r4, #0]
  401202:	4540      	cmp	r0, r8
  401204:	d1f8      	bne.n	4011f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401206:	6861      	ldr	r1, [r4, #4]
  401208:	4229      	tst	r1, r5
  40120a:	d0f5      	beq.n	4011f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40120c:	68e3      	ldr	r3, [r4, #12]
  40120e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401210:	6863      	ldr	r3, [r4, #4]
  401212:	ea25 0503 	bic.w	r5, r5, r3
  401216:	e7ef      	b.n	4011f8 <pio_handler_process+0x20>
  401218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40121c:	004011d1 	.word	0x004011d1
  401220:	004011d5 	.word	0x004011d5
  401224:	20400cd0 	.word	0x20400cd0

00401228 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401228:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40122a:	210a      	movs	r1, #10
  40122c:	4801      	ldr	r0, [pc, #4]	; (401234 <PIOA_Handler+0xc>)
  40122e:	4b02      	ldr	r3, [pc, #8]	; (401238 <PIOA_Handler+0x10>)
  401230:	4798      	blx	r3
  401232:	bd08      	pop	{r3, pc}
  401234:	400e0e00 	.word	0x400e0e00
  401238:	004011d9 	.word	0x004011d9

0040123c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40123c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40123e:	210b      	movs	r1, #11
  401240:	4801      	ldr	r0, [pc, #4]	; (401248 <PIOB_Handler+0xc>)
  401242:	4b02      	ldr	r3, [pc, #8]	; (40124c <PIOB_Handler+0x10>)
  401244:	4798      	blx	r3
  401246:	bd08      	pop	{r3, pc}
  401248:	400e1000 	.word	0x400e1000
  40124c:	004011d9 	.word	0x004011d9

00401250 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401250:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401252:	210c      	movs	r1, #12
  401254:	4801      	ldr	r0, [pc, #4]	; (40125c <PIOC_Handler+0xc>)
  401256:	4b02      	ldr	r3, [pc, #8]	; (401260 <PIOC_Handler+0x10>)
  401258:	4798      	blx	r3
  40125a:	bd08      	pop	{r3, pc}
  40125c:	400e1200 	.word	0x400e1200
  401260:	004011d9 	.word	0x004011d9

00401264 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401264:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401266:	2110      	movs	r1, #16
  401268:	4801      	ldr	r0, [pc, #4]	; (401270 <PIOD_Handler+0xc>)
  40126a:	4b02      	ldr	r3, [pc, #8]	; (401274 <PIOD_Handler+0x10>)
  40126c:	4798      	blx	r3
  40126e:	bd08      	pop	{r3, pc}
  401270:	400e1400 	.word	0x400e1400
  401274:	004011d9 	.word	0x004011d9

00401278 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401278:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40127a:	2111      	movs	r1, #17
  40127c:	4801      	ldr	r0, [pc, #4]	; (401284 <PIOE_Handler+0xc>)
  40127e:	4b02      	ldr	r3, [pc, #8]	; (401288 <PIOE_Handler+0x10>)
  401280:	4798      	blx	r3
  401282:	bd08      	pop	{r3, pc}
  401284:	400e1600 	.word	0x400e1600
  401288:	004011d9 	.word	0x004011d9

0040128c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40128c:	2803      	cmp	r0, #3
  40128e:	d011      	beq.n	4012b4 <pmc_mck_set_division+0x28>
  401290:	2804      	cmp	r0, #4
  401292:	d012      	beq.n	4012ba <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401294:	2802      	cmp	r0, #2
  401296:	bf0c      	ite	eq
  401298:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40129c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40129e:	4a08      	ldr	r2, [pc, #32]	; (4012c0 <pmc_mck_set_division+0x34>)
  4012a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4012a6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4012a8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ac:	f013 0f08 	tst.w	r3, #8
  4012b0:	d0fb      	beq.n	4012aa <pmc_mck_set_division+0x1e>
}
  4012b2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4012b4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4012b8:	e7f1      	b.n	40129e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4012be:	e7ee      	b.n	40129e <pmc_mck_set_division+0x12>
  4012c0:	400e0600 	.word	0x400e0600

004012c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4012c4:	4a17      	ldr	r2, [pc, #92]	; (401324 <pmc_switch_mck_to_pllack+0x60>)
  4012c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4012cc:	4318      	orrs	r0, r3
  4012ce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012d2:	f013 0f08 	tst.w	r3, #8
  4012d6:	d10a      	bne.n	4012ee <pmc_switch_mck_to_pllack+0x2a>
  4012d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012dc:	4911      	ldr	r1, [pc, #68]	; (401324 <pmc_switch_mck_to_pllack+0x60>)
  4012de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012e0:	f012 0f08 	tst.w	r2, #8
  4012e4:	d103      	bne.n	4012ee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012e6:	3b01      	subs	r3, #1
  4012e8:	d1f9      	bne.n	4012de <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4012ea:	2001      	movs	r0, #1
  4012ec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4012ee:	4a0d      	ldr	r2, [pc, #52]	; (401324 <pmc_switch_mck_to_pllack+0x60>)
  4012f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f2:	f023 0303 	bic.w	r3, r3, #3
  4012f6:	f043 0302 	orr.w	r3, r3, #2
  4012fa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012fe:	f013 0f08 	tst.w	r3, #8
  401302:	d10a      	bne.n	40131a <pmc_switch_mck_to_pllack+0x56>
  401304:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401308:	4906      	ldr	r1, [pc, #24]	; (401324 <pmc_switch_mck_to_pllack+0x60>)
  40130a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40130c:	f012 0f08 	tst.w	r2, #8
  401310:	d105      	bne.n	40131e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401312:	3b01      	subs	r3, #1
  401314:	d1f9      	bne.n	40130a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401316:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401318:	4770      	bx	lr
	return 0;
  40131a:	2000      	movs	r0, #0
  40131c:	4770      	bx	lr
  40131e:	2000      	movs	r0, #0
  401320:	4770      	bx	lr
  401322:	bf00      	nop
  401324:	400e0600 	.word	0x400e0600

00401328 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401328:	b9a0      	cbnz	r0, 401354 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40132a:	480e      	ldr	r0, [pc, #56]	; (401364 <pmc_switch_mainck_to_xtal+0x3c>)
  40132c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40132e:	0209      	lsls	r1, r1, #8
  401330:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401332:	4a0d      	ldr	r2, [pc, #52]	; (401368 <pmc_switch_mainck_to_xtal+0x40>)
  401334:	401a      	ands	r2, r3
  401336:	4b0d      	ldr	r3, [pc, #52]	; (40136c <pmc_switch_mainck_to_xtal+0x44>)
  401338:	4313      	orrs	r3, r2
  40133a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40133c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40133e:	4602      	mov	r2, r0
  401340:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401342:	f013 0f01 	tst.w	r3, #1
  401346:	d0fb      	beq.n	401340 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401348:	4a06      	ldr	r2, [pc, #24]	; (401364 <pmc_switch_mainck_to_xtal+0x3c>)
  40134a:	6a11      	ldr	r1, [r2, #32]
  40134c:	4b08      	ldr	r3, [pc, #32]	; (401370 <pmc_switch_mainck_to_xtal+0x48>)
  40134e:	430b      	orrs	r3, r1
  401350:	6213      	str	r3, [r2, #32]
  401352:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401354:	4903      	ldr	r1, [pc, #12]	; (401364 <pmc_switch_mainck_to_xtal+0x3c>)
  401356:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401358:	4a06      	ldr	r2, [pc, #24]	; (401374 <pmc_switch_mainck_to_xtal+0x4c>)
  40135a:	401a      	ands	r2, r3
  40135c:	4b06      	ldr	r3, [pc, #24]	; (401378 <pmc_switch_mainck_to_xtal+0x50>)
  40135e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401360:	620b      	str	r3, [r1, #32]
  401362:	4770      	bx	lr
  401364:	400e0600 	.word	0x400e0600
  401368:	ffc8fffc 	.word	0xffc8fffc
  40136c:	00370001 	.word	0x00370001
  401370:	01370000 	.word	0x01370000
  401374:	fec8fffc 	.word	0xfec8fffc
  401378:	01370002 	.word	0x01370002

0040137c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40137c:	4b02      	ldr	r3, [pc, #8]	; (401388 <pmc_osc_is_ready_mainck+0xc>)
  40137e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401380:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401384:	4770      	bx	lr
  401386:	bf00      	nop
  401388:	400e0600 	.word	0x400e0600

0040138c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40138c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401390:	4b01      	ldr	r3, [pc, #4]	; (401398 <pmc_disable_pllack+0xc>)
  401392:	629a      	str	r2, [r3, #40]	; 0x28
  401394:	4770      	bx	lr
  401396:	bf00      	nop
  401398:	400e0600 	.word	0x400e0600

0040139c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40139c:	4b02      	ldr	r3, [pc, #8]	; (4013a8 <pmc_is_locked_pllack+0xc>)
  40139e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4013a0:	f000 0002 	and.w	r0, r0, #2
  4013a4:	4770      	bx	lr
  4013a6:	bf00      	nop
  4013a8:	400e0600 	.word	0x400e0600

004013ac <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4013ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4013b0:	4b05      	ldr	r3, [pc, #20]	; (4013c8 <pmc_enable_periph_clk+0x1c>)
  4013b2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4013b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4013ba:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4013be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4013c2:	2000      	movs	r0, #0
  4013c4:	4770      	bx	lr
  4013c6:	bf00      	nop
  4013c8:	400e0600 	.word	0x400e0600

004013cc <pmc_switch_pck_to_pllack>:
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  4013cc:	f041 0102 	orr.w	r1, r1, #2
  4013d0:	4b0c      	ldr	r3, [pc, #48]	; (401404 <pmc_switch_pck_to_pllack+0x38>)
  4013d2:	f100 0210 	add.w	r2, r0, #16
  4013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4013da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4013e0:	fa03 f000 	lsl.w	r0, r3, r0
	for (ul_timeout = PMC_TIMEOUT;
  4013e4:	4202      	tst	r2, r0
  4013e6:	d109      	bne.n	4013fc <pmc_switch_pck_to_pllack+0x30>
  4013e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4013ec:	4905      	ldr	r1, [pc, #20]	; (401404 <pmc_switch_pck_to_pllack+0x38>)
  4013ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	for (ul_timeout = PMC_TIMEOUT;
  4013f0:	4202      	tst	r2, r0
  4013f2:	d105      	bne.n	401400 <pmc_switch_pck_to_pllack+0x34>
		if (ul_timeout == 0) {
  4013f4:	3b01      	subs	r3, #1
  4013f6:	d1fa      	bne.n	4013ee <pmc_switch_pck_to_pllack+0x22>
			return 1;
  4013f8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4013fa:	4770      	bx	lr
	return 0;
  4013fc:	2000      	movs	r0, #0
  4013fe:	4770      	bx	lr
  401400:	2000      	movs	r0, #0
  401402:	4770      	bx	lr
  401404:	400e0600 	.word	0x400e0600

00401408 <pmc_get_slck_config>:
 *
 * \retval Crystal Oscillator Select value.
 */
uint32_t pmc_get_slck_config(void)
{
	return (SUPC->SUPC_CR & SUPC_CR_XTALSEL);
  401408:	4b02      	ldr	r3, [pc, #8]	; (401414 <pmc_get_slck_config+0xc>)
  40140a:	6818      	ldr	r0, [r3, #0]
}
  40140c:	f000 0008 	and.w	r0, r0, #8
  401410:	4770      	bx	lr
  401412:	bf00      	nop
  401414:	400e1810 	.word	0x400e1810

00401418 <pmc_get_mainck_config>:
 *
 * \retval Main Clock Source Oscillator Selection and Main RC Oscillator Frequency Selection values.
 */
uint32_t pmc_get_mainck_config(void)
{
	return (PMC->CKGR_MOR & (CKGR_MOR_MOSCSEL | CKGR_MOR_MOSCRCF_Msk));
  401418:	4b05      	ldr	r3, [pc, #20]	; (401430 <pmc_get_mainck_config+0x18>)
  40141a:	6a18      	ldr	r0, [r3, #32]
}
  40141c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
  401420:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
  401424:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  401428:	f020 008f 	bic.w	r0, r0, #143	; 0x8f
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	400e0600 	.word	0x400e0600

00401434 <pmc_get_pllack_config>:
 *
 * \retval PLLA Multiplier and PLLA Front End Divider values.
 */
uint32_t pmc_get_pllack_config(void)
{
	return (PMC->CKGR_PLLAR & (CKGR_PLLAR_DIVA_Msk | CKGR_PLLAR_MULA_Msk));
  401434:	4b02      	ldr	r3, [pc, #8]	; (401440 <pmc_get_pllack_config+0xc>)
  401436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
  401438:	4802      	ldr	r0, [pc, #8]	; (401444 <pmc_get_pllack_config+0x10>)
  40143a:	4018      	ands	r0, r3
  40143c:	4770      	bx	lr
  40143e:	bf00      	nop
  401440:	400e0600 	.word	0x400e0600
  401444:	07ff00ff 	.word	0x07ff00ff

00401448 <pmc_get_upllckdiv_config>:
 *
 * \retval UPLL Divider by 2 value.
 */
uint32_t pmc_get_upllckdiv_config(void)
{
	return (PMC->PMC_MCKR & PMC_MCKR_UPLLDIV2);
  401448:	4b02      	ldr	r3, [pc, #8]	; (401454 <pmc_get_upllckdiv_config+0xc>)
  40144a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
  40144c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600

00401458 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  401458:	f44f 7380 	mov.w	r3, #256	; 0x100
  40145c:	fa03 f000 	lsl.w	r0, r3, r0
  401460:	4b01      	ldr	r3, [pc, #4]	; (401468 <pmc_enable_pck+0x10>)
  401462:	6018      	str	r0, [r3, #0]
  401464:	4770      	bx	lr
  401466:	bf00      	nop
  401468:	400e0600 	.word	0x400e0600

0040146c <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  40146c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401470:	fa03 f000 	lsl.w	r0, r3, r0
  401474:	4b01      	ldr	r3, [pc, #4]	; (40147c <pmc_disable_pck+0x10>)
  401476:	6058      	str	r0, [r3, #4]
  401478:	4770      	bx	lr
  40147a:	bf00      	nop
  40147c:	400e0600 	.word	0x400e0600

00401480 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401480:	6943      	ldr	r3, [r0, #20]
  401482:	f013 0f02 	tst.w	r3, #2
  401486:	d002      	beq.n	40148e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401488:	61c1      	str	r1, [r0, #28]
	return 0;
  40148a:	2000      	movs	r0, #0
  40148c:	4770      	bx	lr
		return 1;
  40148e:	2001      	movs	r0, #1
}
  401490:	4770      	bx	lr

00401492 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401492:	6943      	ldr	r3, [r0, #20]
  401494:	f013 0f01 	tst.w	r3, #1
  401498:	d003      	beq.n	4014a2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40149a:	6983      	ldr	r3, [r0, #24]
  40149c:	700b      	strb	r3, [r1, #0]
	return 0;
  40149e:	2000      	movs	r0, #0
  4014a0:	4770      	bx	lr
		return 1;
  4014a2:	2001      	movs	r0, #1
}
  4014a4:	4770      	bx	lr

004014a6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4014a6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4014a8:	010b      	lsls	r3, r1, #4
  4014aa:	4293      	cmp	r3, r2
  4014ac:	d914      	bls.n	4014d8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4014ae:	00c9      	lsls	r1, r1, #3
  4014b0:	084b      	lsrs	r3, r1, #1
  4014b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4014b6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4014ba:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4014bc:	1e5c      	subs	r4, r3, #1
  4014be:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4014c2:	428c      	cmp	r4, r1
  4014c4:	d901      	bls.n	4014ca <usart_set_async_baudrate+0x24>
		return 1;
  4014c6:	2001      	movs	r0, #1
  4014c8:	e017      	b.n	4014fa <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4014ca:	6841      	ldr	r1, [r0, #4]
  4014cc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4014d0:	6041      	str	r1, [r0, #4]
  4014d2:	e00c      	b.n	4014ee <usart_set_async_baudrate+0x48>
		return 1;
  4014d4:	2001      	movs	r0, #1
  4014d6:	e010      	b.n	4014fa <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4014d8:	0859      	lsrs	r1, r3, #1
  4014da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4014de:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4014e2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4014e4:	1e5c      	subs	r4, r3, #1
  4014e6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4014ea:	428c      	cmp	r4, r1
  4014ec:	d8f2      	bhi.n	4014d4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4014ee:	0412      	lsls	r2, r2, #16
  4014f0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4014f4:	431a      	orrs	r2, r3
  4014f6:	6202      	str	r2, [r0, #32]

	return 0;
  4014f8:	2000      	movs	r0, #0
}
  4014fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014fe:	4770      	bx	lr

00401500 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401500:	4b08      	ldr	r3, [pc, #32]	; (401524 <usart_reset+0x24>)
  401502:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401506:	2300      	movs	r3, #0
  401508:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40150a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40150c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40150e:	2388      	movs	r3, #136	; 0x88
  401510:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401512:	2324      	movs	r3, #36	; 0x24
  401514:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401516:	f44f 7380 	mov.w	r3, #256	; 0x100
  40151a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40151c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401520:	6003      	str	r3, [r0, #0]
  401522:	4770      	bx	lr
  401524:	55534100 	.word	0x55534100

00401528 <usart_init_rs232>:
{
  401528:	b570      	push	{r4, r5, r6, lr}
  40152a:	4605      	mov	r5, r0
  40152c:	460c      	mov	r4, r1
  40152e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401530:	4b0f      	ldr	r3, [pc, #60]	; (401570 <usart_init_rs232+0x48>)
  401532:	4798      	blx	r3
	ul_reg_val = 0;
  401534:	2200      	movs	r2, #0
  401536:	4b0f      	ldr	r3, [pc, #60]	; (401574 <usart_init_rs232+0x4c>)
  401538:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40153a:	b1a4      	cbz	r4, 401566 <usart_init_rs232+0x3e>
  40153c:	4632      	mov	r2, r6
  40153e:	6821      	ldr	r1, [r4, #0]
  401540:	4628      	mov	r0, r5
  401542:	4b0d      	ldr	r3, [pc, #52]	; (401578 <usart_init_rs232+0x50>)
  401544:	4798      	blx	r3
  401546:	4602      	mov	r2, r0
  401548:	b978      	cbnz	r0, 40156a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40154a:	6863      	ldr	r3, [r4, #4]
  40154c:	68a1      	ldr	r1, [r4, #8]
  40154e:	430b      	orrs	r3, r1
  401550:	6921      	ldr	r1, [r4, #16]
  401552:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401554:	68e1      	ldr	r1, [r4, #12]
  401556:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401558:	4906      	ldr	r1, [pc, #24]	; (401574 <usart_init_rs232+0x4c>)
  40155a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40155c:	6869      	ldr	r1, [r5, #4]
  40155e:	430b      	orrs	r3, r1
  401560:	606b      	str	r3, [r5, #4]
}
  401562:	4610      	mov	r0, r2
  401564:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401566:	2201      	movs	r2, #1
  401568:	e7fb      	b.n	401562 <usart_init_rs232+0x3a>
  40156a:	2201      	movs	r2, #1
  40156c:	e7f9      	b.n	401562 <usart_init_rs232+0x3a>
  40156e:	bf00      	nop
  401570:	00401501 	.word	0x00401501
  401574:	20400d40 	.word	0x20400d40
  401578:	004014a7 	.word	0x004014a7

0040157c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40157c:	2340      	movs	r3, #64	; 0x40
  40157e:	6003      	str	r3, [r0, #0]
  401580:	4770      	bx	lr

00401582 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401582:	2310      	movs	r3, #16
  401584:	6003      	str	r3, [r0, #0]
  401586:	4770      	bx	lr

00401588 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401588:	6943      	ldr	r3, [r0, #20]
  40158a:	f013 0f02 	tst.w	r3, #2
  40158e:	d004      	beq.n	40159a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401590:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401594:	61c1      	str	r1, [r0, #28]
	return 0;
  401596:	2000      	movs	r0, #0
  401598:	4770      	bx	lr
		return 1;
  40159a:	2001      	movs	r0, #1
}
  40159c:	4770      	bx	lr

0040159e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40159e:	6943      	ldr	r3, [r0, #20]
  4015a0:	f013 0f01 	tst.w	r3, #1
  4015a4:	d005      	beq.n	4015b2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4015a6:	6983      	ldr	r3, [r0, #24]
  4015a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4015ac:	600b      	str	r3, [r1, #0]
	return 0;
  4015ae:	2000      	movs	r0, #0
  4015b0:	4770      	bx	lr
		return 1;
  4015b2:	2001      	movs	r0, #1
}
  4015b4:	4770      	bx	lr

004015b6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015b6:	e7fe      	b.n	4015b6 <Dummy_Handler>

004015b8 <Reset_Handler>:
{
  4015b8:	b500      	push	{lr}
  4015ba:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4015bc:	4b25      	ldr	r3, [pc, #148]	; (401654 <Reset_Handler+0x9c>)
  4015be:	4a26      	ldr	r2, [pc, #152]	; (401658 <Reset_Handler+0xa0>)
  4015c0:	429a      	cmp	r2, r3
  4015c2:	d010      	beq.n	4015e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4015c4:	4b25      	ldr	r3, [pc, #148]	; (40165c <Reset_Handler+0xa4>)
  4015c6:	4a23      	ldr	r2, [pc, #140]	; (401654 <Reset_Handler+0x9c>)
  4015c8:	429a      	cmp	r2, r3
  4015ca:	d20c      	bcs.n	4015e6 <Reset_Handler+0x2e>
  4015cc:	3b01      	subs	r3, #1
  4015ce:	1a9b      	subs	r3, r3, r2
  4015d0:	f023 0303 	bic.w	r3, r3, #3
  4015d4:	3304      	adds	r3, #4
  4015d6:	4413      	add	r3, r2
  4015d8:	491f      	ldr	r1, [pc, #124]	; (401658 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4015da:	f851 0b04 	ldr.w	r0, [r1], #4
  4015de:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4015e2:	429a      	cmp	r2, r3
  4015e4:	d1f9      	bne.n	4015da <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4015e6:	4b1e      	ldr	r3, [pc, #120]	; (401660 <Reset_Handler+0xa8>)
  4015e8:	4a1e      	ldr	r2, [pc, #120]	; (401664 <Reset_Handler+0xac>)
  4015ea:	429a      	cmp	r2, r3
  4015ec:	d20a      	bcs.n	401604 <Reset_Handler+0x4c>
  4015ee:	3b01      	subs	r3, #1
  4015f0:	1a9b      	subs	r3, r3, r2
  4015f2:	f023 0303 	bic.w	r3, r3, #3
  4015f6:	3304      	adds	r3, #4
  4015f8:	4413      	add	r3, r2
                *pDest++ = 0;
  4015fa:	2100      	movs	r1, #0
  4015fc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401600:	4293      	cmp	r3, r2
  401602:	d1fb      	bne.n	4015fc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401604:	4a18      	ldr	r2, [pc, #96]	; (401668 <Reset_Handler+0xb0>)
  401606:	4b19      	ldr	r3, [pc, #100]	; (40166c <Reset_Handler+0xb4>)
  401608:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40160c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40160e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401612:	fab3 f383 	clz	r3, r3
  401616:	095b      	lsrs	r3, r3, #5
  401618:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40161a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40161c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401620:	2200      	movs	r2, #0
  401622:	4b13      	ldr	r3, [pc, #76]	; (401670 <Reset_Handler+0xb8>)
  401624:	701a      	strb	r2, [r3, #0]
	return flags;
  401626:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401628:	4a12      	ldr	r2, [pc, #72]	; (401674 <Reset_Handler+0xbc>)
  40162a:	6813      	ldr	r3, [r2, #0]
  40162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401630:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401632:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401636:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40163a:	b129      	cbz	r1, 401648 <Reset_Handler+0x90>
		cpu_irq_enable();
  40163c:	2201      	movs	r2, #1
  40163e:	4b0c      	ldr	r3, [pc, #48]	; (401670 <Reset_Handler+0xb8>)
  401640:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401642:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401646:	b662      	cpsie	i
        __libc_init_array();
  401648:	4b0b      	ldr	r3, [pc, #44]	; (401678 <Reset_Handler+0xc0>)
  40164a:	4798      	blx	r3
        main();
  40164c:	4b0b      	ldr	r3, [pc, #44]	; (40167c <Reset_Handler+0xc4>)
  40164e:	4798      	blx	r3
  401650:	e7fe      	b.n	401650 <Reset_Handler+0x98>
  401652:	bf00      	nop
  401654:	20400000 	.word	0x20400000
  401658:	00406bb8 	.word	0x00406bb8
  40165c:	204009d8 	.word	0x204009d8
  401660:	20400dc0 	.word	0x20400dc0
  401664:	204009d8 	.word	0x204009d8
  401668:	e000ed00 	.word	0xe000ed00
  40166c:	00400000 	.word	0x00400000
  401670:	20400020 	.word	0x20400020
  401674:	e000ed88 	.word	0xe000ed88
  401678:	00401ffd 	.word	0x00401ffd
  40167c:	00401a19 	.word	0x00401a19

00401680 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401680:	4b3b      	ldr	r3, [pc, #236]	; (401770 <SystemCoreClockUpdate+0xf0>)
  401682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401684:	f003 0303 	and.w	r3, r3, #3
  401688:	2b01      	cmp	r3, #1
  40168a:	d01d      	beq.n	4016c8 <SystemCoreClockUpdate+0x48>
  40168c:	b183      	cbz	r3, 4016b0 <SystemCoreClockUpdate+0x30>
  40168e:	2b02      	cmp	r3, #2
  401690:	d036      	beq.n	401700 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401692:	4b37      	ldr	r3, [pc, #220]	; (401770 <SystemCoreClockUpdate+0xf0>)
  401694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401696:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40169a:	2b70      	cmp	r3, #112	; 0x70
  40169c:	d05f      	beq.n	40175e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40169e:	4b34      	ldr	r3, [pc, #208]	; (401770 <SystemCoreClockUpdate+0xf0>)
  4016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4016a2:	4934      	ldr	r1, [pc, #208]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016a4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4016a8:	680b      	ldr	r3, [r1, #0]
  4016aa:	40d3      	lsrs	r3, r2
  4016ac:	600b      	str	r3, [r1, #0]
  4016ae:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4016b0:	4b31      	ldr	r3, [pc, #196]	; (401778 <SystemCoreClockUpdate+0xf8>)
  4016b2:	695b      	ldr	r3, [r3, #20]
  4016b4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016b8:	bf14      	ite	ne
  4016ba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016be:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4016c2:	4b2c      	ldr	r3, [pc, #176]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016c4:	601a      	str	r2, [r3, #0]
  4016c6:	e7e4      	b.n	401692 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016c8:	4b29      	ldr	r3, [pc, #164]	; (401770 <SystemCoreClockUpdate+0xf0>)
  4016ca:	6a1b      	ldr	r3, [r3, #32]
  4016cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016d0:	d003      	beq.n	4016da <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4016d2:	4a2a      	ldr	r2, [pc, #168]	; (40177c <SystemCoreClockUpdate+0xfc>)
  4016d4:	4b27      	ldr	r3, [pc, #156]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016d6:	601a      	str	r2, [r3, #0]
  4016d8:	e7db      	b.n	401692 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016da:	4a29      	ldr	r2, [pc, #164]	; (401780 <SystemCoreClockUpdate+0x100>)
  4016dc:	4b25      	ldr	r3, [pc, #148]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016de:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016e0:	4b23      	ldr	r3, [pc, #140]	; (401770 <SystemCoreClockUpdate+0xf0>)
  4016e2:	6a1b      	ldr	r3, [r3, #32]
  4016e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016e8:	2b10      	cmp	r3, #16
  4016ea:	d005      	beq.n	4016f8 <SystemCoreClockUpdate+0x78>
  4016ec:	2b20      	cmp	r3, #32
  4016ee:	d1d0      	bne.n	401692 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4016f0:	4a22      	ldr	r2, [pc, #136]	; (40177c <SystemCoreClockUpdate+0xfc>)
  4016f2:	4b20      	ldr	r3, [pc, #128]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016f4:	601a      	str	r2, [r3, #0]
          break;
  4016f6:	e7cc      	b.n	401692 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4016f8:	4a22      	ldr	r2, [pc, #136]	; (401784 <SystemCoreClockUpdate+0x104>)
  4016fa:	4b1e      	ldr	r3, [pc, #120]	; (401774 <SystemCoreClockUpdate+0xf4>)
  4016fc:	601a      	str	r2, [r3, #0]
          break;
  4016fe:	e7c8      	b.n	401692 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401700:	4b1b      	ldr	r3, [pc, #108]	; (401770 <SystemCoreClockUpdate+0xf0>)
  401702:	6a1b      	ldr	r3, [r3, #32]
  401704:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401708:	d016      	beq.n	401738 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40170a:	4a1c      	ldr	r2, [pc, #112]	; (40177c <SystemCoreClockUpdate+0xfc>)
  40170c:	4b19      	ldr	r3, [pc, #100]	; (401774 <SystemCoreClockUpdate+0xf4>)
  40170e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401710:	4b17      	ldr	r3, [pc, #92]	; (401770 <SystemCoreClockUpdate+0xf0>)
  401712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401714:	f003 0303 	and.w	r3, r3, #3
  401718:	2b02      	cmp	r3, #2
  40171a:	d1ba      	bne.n	401692 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40171c:	4a14      	ldr	r2, [pc, #80]	; (401770 <SystemCoreClockUpdate+0xf0>)
  40171e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401720:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401722:	4814      	ldr	r0, [pc, #80]	; (401774 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401724:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401728:	6803      	ldr	r3, [r0, #0]
  40172a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40172e:	b2d2      	uxtb	r2, r2
  401730:	fbb3 f3f2 	udiv	r3, r3, r2
  401734:	6003      	str	r3, [r0, #0]
  401736:	e7ac      	b.n	401692 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401738:	4a11      	ldr	r2, [pc, #68]	; (401780 <SystemCoreClockUpdate+0x100>)
  40173a:	4b0e      	ldr	r3, [pc, #56]	; (401774 <SystemCoreClockUpdate+0xf4>)
  40173c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40173e:	4b0c      	ldr	r3, [pc, #48]	; (401770 <SystemCoreClockUpdate+0xf0>)
  401740:	6a1b      	ldr	r3, [r3, #32]
  401742:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401746:	2b10      	cmp	r3, #16
  401748:	d005      	beq.n	401756 <SystemCoreClockUpdate+0xd6>
  40174a:	2b20      	cmp	r3, #32
  40174c:	d1e0      	bne.n	401710 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40174e:	4a0b      	ldr	r2, [pc, #44]	; (40177c <SystemCoreClockUpdate+0xfc>)
  401750:	4b08      	ldr	r3, [pc, #32]	; (401774 <SystemCoreClockUpdate+0xf4>)
  401752:	601a      	str	r2, [r3, #0]
          break;
  401754:	e7dc      	b.n	401710 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401756:	4a0b      	ldr	r2, [pc, #44]	; (401784 <SystemCoreClockUpdate+0x104>)
  401758:	4b06      	ldr	r3, [pc, #24]	; (401774 <SystemCoreClockUpdate+0xf4>)
  40175a:	601a      	str	r2, [r3, #0]
          break;
  40175c:	e7d8      	b.n	401710 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40175e:	4a05      	ldr	r2, [pc, #20]	; (401774 <SystemCoreClockUpdate+0xf4>)
  401760:	6813      	ldr	r3, [r2, #0]
  401762:	4909      	ldr	r1, [pc, #36]	; (401788 <SystemCoreClockUpdate+0x108>)
  401764:	fba1 1303 	umull	r1, r3, r1, r3
  401768:	085b      	lsrs	r3, r3, #1
  40176a:	6013      	str	r3, [r2, #0]
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	400e0600 	.word	0x400e0600
  401774:	20400024 	.word	0x20400024
  401778:	400e1810 	.word	0x400e1810
  40177c:	00b71b00 	.word	0x00b71b00
  401780:	003d0900 	.word	0x003d0900
  401784:	007a1200 	.word	0x007a1200
  401788:	aaaaaaab 	.word	0xaaaaaaab

0040178c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40178c:	4b16      	ldr	r3, [pc, #88]	; (4017e8 <system_init_flash+0x5c>)
  40178e:	4298      	cmp	r0, r3
  401790:	d913      	bls.n	4017ba <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401792:	4b16      	ldr	r3, [pc, #88]	; (4017ec <system_init_flash+0x60>)
  401794:	4298      	cmp	r0, r3
  401796:	d915      	bls.n	4017c4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401798:	4b15      	ldr	r3, [pc, #84]	; (4017f0 <system_init_flash+0x64>)
  40179a:	4298      	cmp	r0, r3
  40179c:	d916      	bls.n	4017cc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40179e:	4b15      	ldr	r3, [pc, #84]	; (4017f4 <system_init_flash+0x68>)
  4017a0:	4298      	cmp	r0, r3
  4017a2:	d917      	bls.n	4017d4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4017a4:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <system_init_flash+0x6c>)
  4017a6:	4298      	cmp	r0, r3
  4017a8:	d918      	bls.n	4017dc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4017aa:	4b14      	ldr	r3, [pc, #80]	; (4017fc <system_init_flash+0x70>)
  4017ac:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017ae:	bf94      	ite	ls
  4017b0:	4a13      	ldrls	r2, [pc, #76]	; (401800 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4017b2:	4a14      	ldrhi	r2, [pc, #80]	; (401804 <system_init_flash+0x78>)
  4017b4:	4b14      	ldr	r3, [pc, #80]	; (401808 <system_init_flash+0x7c>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017be:	4b12      	ldr	r3, [pc, #72]	; (401808 <system_init_flash+0x7c>)
  4017c0:	601a      	str	r2, [r3, #0]
  4017c2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4017c4:	4a11      	ldr	r2, [pc, #68]	; (40180c <system_init_flash+0x80>)
  4017c6:	4b10      	ldr	r3, [pc, #64]	; (401808 <system_init_flash+0x7c>)
  4017c8:	601a      	str	r2, [r3, #0]
  4017ca:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017cc:	4a10      	ldr	r2, [pc, #64]	; (401810 <system_init_flash+0x84>)
  4017ce:	4b0e      	ldr	r3, [pc, #56]	; (401808 <system_init_flash+0x7c>)
  4017d0:	601a      	str	r2, [r3, #0]
  4017d2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017d4:	4a0f      	ldr	r2, [pc, #60]	; (401814 <system_init_flash+0x88>)
  4017d6:	4b0c      	ldr	r3, [pc, #48]	; (401808 <system_init_flash+0x7c>)
  4017d8:	601a      	str	r2, [r3, #0]
  4017da:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017dc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4017e0:	4b09      	ldr	r3, [pc, #36]	; (401808 <system_init_flash+0x7c>)
  4017e2:	601a      	str	r2, [r3, #0]
  4017e4:	4770      	bx	lr
  4017e6:	bf00      	nop
  4017e8:	015ef3bf 	.word	0x015ef3bf
  4017ec:	02bde77f 	.word	0x02bde77f
  4017f0:	041cdb3f 	.word	0x041cdb3f
  4017f4:	057bceff 	.word	0x057bceff
  4017f8:	06dac2bf 	.word	0x06dac2bf
  4017fc:	0839b67f 	.word	0x0839b67f
  401800:	04000500 	.word	0x04000500
  401804:	04000600 	.word	0x04000600
  401808:	400e0c00 	.word	0x400e0c00
  40180c:	04000100 	.word	0x04000100
  401810:	04000200 	.word	0x04000200
  401814:	04000300 	.word	0x04000300

00401818 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401818:	4b0a      	ldr	r3, [pc, #40]	; (401844 <_sbrk+0x2c>)
  40181a:	681b      	ldr	r3, [r3, #0]
  40181c:	b153      	cbz	r3, 401834 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40181e:	4b09      	ldr	r3, [pc, #36]	; (401844 <_sbrk+0x2c>)
  401820:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401822:	181a      	adds	r2, r3, r0
  401824:	4908      	ldr	r1, [pc, #32]	; (401848 <_sbrk+0x30>)
  401826:	4291      	cmp	r1, r2
  401828:	db08      	blt.n	40183c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40182a:	4610      	mov	r0, r2
  40182c:	4a05      	ldr	r2, [pc, #20]	; (401844 <_sbrk+0x2c>)
  40182e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401830:	4618      	mov	r0, r3
  401832:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401834:	4a05      	ldr	r2, [pc, #20]	; (40184c <_sbrk+0x34>)
  401836:	4b03      	ldr	r3, [pc, #12]	; (401844 <_sbrk+0x2c>)
  401838:	601a      	str	r2, [r3, #0]
  40183a:	e7f0      	b.n	40181e <_sbrk+0x6>
		return (caddr_t) -1;	
  40183c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401840:	4770      	bx	lr
  401842:	bf00      	nop
  401844:	20400d44 	.word	0x20400d44
  401848:	2045fffc 	.word	0x2045fffc
  40184c:	20402fc0 	.word	0x20402fc0

00401850 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401850:	f04f 30ff 	mov.w	r0, #4294967295
  401854:	4770      	bx	lr

00401856 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40185a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40185c:	2000      	movs	r0, #0
  40185e:	4770      	bx	lr

00401860 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401860:	2001      	movs	r0, #1
  401862:	4770      	bx	lr

00401864 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401864:	2000      	movs	r0, #0
  401866:	4770      	bx	lr

00401868 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401868:	b5f0      	push	{r4, r5, r6, r7, lr}
  40186a:	b083      	sub	sp, #12
  40186c:	4605      	mov	r5, r0
  40186e:	460c      	mov	r4, r1
	uint32_t val = 0;
  401870:	2300      	movs	r3, #0
  401872:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401874:	4b2a      	ldr	r3, [pc, #168]	; (401920 <usart_serial_getchar+0xb8>)
  401876:	4298      	cmp	r0, r3
  401878:	d013      	beq.n	4018a2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40187a:	4b2a      	ldr	r3, [pc, #168]	; (401924 <usart_serial_getchar+0xbc>)
  40187c:	4298      	cmp	r0, r3
  40187e:	d018      	beq.n	4018b2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401880:	4b29      	ldr	r3, [pc, #164]	; (401928 <usart_serial_getchar+0xc0>)
  401882:	4298      	cmp	r0, r3
  401884:	d01d      	beq.n	4018c2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401886:	4b29      	ldr	r3, [pc, #164]	; (40192c <usart_serial_getchar+0xc4>)
  401888:	429d      	cmp	r5, r3
  40188a:	d022      	beq.n	4018d2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40188c:	4b28      	ldr	r3, [pc, #160]	; (401930 <usart_serial_getchar+0xc8>)
  40188e:	429d      	cmp	r5, r3
  401890:	d027      	beq.n	4018e2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401892:	4b28      	ldr	r3, [pc, #160]	; (401934 <usart_serial_getchar+0xcc>)
  401894:	429d      	cmp	r5, r3
  401896:	d02e      	beq.n	4018f6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401898:	4b27      	ldr	r3, [pc, #156]	; (401938 <usart_serial_getchar+0xd0>)
  40189a:	429d      	cmp	r5, r3
  40189c:	d035      	beq.n	40190a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40189e:	b003      	add	sp, #12
  4018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4018a2:	461f      	mov	r7, r3
  4018a4:	4e25      	ldr	r6, [pc, #148]	; (40193c <usart_serial_getchar+0xd4>)
  4018a6:	4621      	mov	r1, r4
  4018a8:	4638      	mov	r0, r7
  4018aa:	47b0      	blx	r6
  4018ac:	2800      	cmp	r0, #0
  4018ae:	d1fa      	bne.n	4018a6 <usart_serial_getchar+0x3e>
  4018b0:	e7e9      	b.n	401886 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4018b2:	461f      	mov	r7, r3
  4018b4:	4e21      	ldr	r6, [pc, #132]	; (40193c <usart_serial_getchar+0xd4>)
  4018b6:	4621      	mov	r1, r4
  4018b8:	4638      	mov	r0, r7
  4018ba:	47b0      	blx	r6
  4018bc:	2800      	cmp	r0, #0
  4018be:	d1fa      	bne.n	4018b6 <usart_serial_getchar+0x4e>
  4018c0:	e7e4      	b.n	40188c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4018c2:	461f      	mov	r7, r3
  4018c4:	4e1d      	ldr	r6, [pc, #116]	; (40193c <usart_serial_getchar+0xd4>)
  4018c6:	4621      	mov	r1, r4
  4018c8:	4638      	mov	r0, r7
  4018ca:	47b0      	blx	r6
  4018cc:	2800      	cmp	r0, #0
  4018ce:	d1fa      	bne.n	4018c6 <usart_serial_getchar+0x5e>
  4018d0:	e7df      	b.n	401892 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4018d2:	461f      	mov	r7, r3
  4018d4:	4e19      	ldr	r6, [pc, #100]	; (40193c <usart_serial_getchar+0xd4>)
  4018d6:	4621      	mov	r1, r4
  4018d8:	4638      	mov	r0, r7
  4018da:	47b0      	blx	r6
  4018dc:	2800      	cmp	r0, #0
  4018de:	d1fa      	bne.n	4018d6 <usart_serial_getchar+0x6e>
  4018e0:	e7da      	b.n	401898 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4018e2:	461e      	mov	r6, r3
  4018e4:	4d16      	ldr	r5, [pc, #88]	; (401940 <usart_serial_getchar+0xd8>)
  4018e6:	a901      	add	r1, sp, #4
  4018e8:	4630      	mov	r0, r6
  4018ea:	47a8      	blx	r5
  4018ec:	2800      	cmp	r0, #0
  4018ee:	d1fa      	bne.n	4018e6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4018f0:	9b01      	ldr	r3, [sp, #4]
  4018f2:	7023      	strb	r3, [r4, #0]
  4018f4:	e7d3      	b.n	40189e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4018f6:	461e      	mov	r6, r3
  4018f8:	4d11      	ldr	r5, [pc, #68]	; (401940 <usart_serial_getchar+0xd8>)
  4018fa:	a901      	add	r1, sp, #4
  4018fc:	4630      	mov	r0, r6
  4018fe:	47a8      	blx	r5
  401900:	2800      	cmp	r0, #0
  401902:	d1fa      	bne.n	4018fa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  401904:	9b01      	ldr	r3, [sp, #4]
  401906:	7023      	strb	r3, [r4, #0]
  401908:	e7c9      	b.n	40189e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40190a:	461e      	mov	r6, r3
  40190c:	4d0c      	ldr	r5, [pc, #48]	; (401940 <usart_serial_getchar+0xd8>)
  40190e:	a901      	add	r1, sp, #4
  401910:	4630      	mov	r0, r6
  401912:	47a8      	blx	r5
  401914:	2800      	cmp	r0, #0
  401916:	d1fa      	bne.n	40190e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  401918:	9b01      	ldr	r3, [sp, #4]
  40191a:	7023      	strb	r3, [r4, #0]
}
  40191c:	e7bf      	b.n	40189e <usart_serial_getchar+0x36>
  40191e:	bf00      	nop
  401920:	400e0800 	.word	0x400e0800
  401924:	400e0a00 	.word	0x400e0a00
  401928:	400e1a00 	.word	0x400e1a00
  40192c:	400e1c00 	.word	0x400e1c00
  401930:	40024000 	.word	0x40024000
  401934:	40028000 	.word	0x40028000
  401938:	4002c000 	.word	0x4002c000
  40193c:	00401493 	.word	0x00401493
  401940:	0040159f 	.word	0x0040159f

00401944 <usart_serial_putchar>:
{
  401944:	b570      	push	{r4, r5, r6, lr}
  401946:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401948:	4b2a      	ldr	r3, [pc, #168]	; (4019f4 <usart_serial_putchar+0xb0>)
  40194a:	4298      	cmp	r0, r3
  40194c:	d013      	beq.n	401976 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40194e:	4b2a      	ldr	r3, [pc, #168]	; (4019f8 <usart_serial_putchar+0xb4>)
  401950:	4298      	cmp	r0, r3
  401952:	d019      	beq.n	401988 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401954:	4b29      	ldr	r3, [pc, #164]	; (4019fc <usart_serial_putchar+0xb8>)
  401956:	4298      	cmp	r0, r3
  401958:	d01f      	beq.n	40199a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40195a:	4b29      	ldr	r3, [pc, #164]	; (401a00 <usart_serial_putchar+0xbc>)
  40195c:	4298      	cmp	r0, r3
  40195e:	d025      	beq.n	4019ac <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401960:	4b28      	ldr	r3, [pc, #160]	; (401a04 <usart_serial_putchar+0xc0>)
  401962:	4298      	cmp	r0, r3
  401964:	d02b      	beq.n	4019be <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  401966:	4b28      	ldr	r3, [pc, #160]	; (401a08 <usart_serial_putchar+0xc4>)
  401968:	4298      	cmp	r0, r3
  40196a:	d031      	beq.n	4019d0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40196c:	4b27      	ldr	r3, [pc, #156]	; (401a0c <usart_serial_putchar+0xc8>)
  40196e:	4298      	cmp	r0, r3
  401970:	d037      	beq.n	4019e2 <usart_serial_putchar+0x9e>
	return 0;
  401972:	2000      	movs	r0, #0
}
  401974:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401976:	461e      	mov	r6, r3
  401978:	4d25      	ldr	r5, [pc, #148]	; (401a10 <usart_serial_putchar+0xcc>)
  40197a:	4621      	mov	r1, r4
  40197c:	4630      	mov	r0, r6
  40197e:	47a8      	blx	r5
  401980:	2800      	cmp	r0, #0
  401982:	d1fa      	bne.n	40197a <usart_serial_putchar+0x36>
		return 1;
  401984:	2001      	movs	r0, #1
  401986:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401988:	461e      	mov	r6, r3
  40198a:	4d21      	ldr	r5, [pc, #132]	; (401a10 <usart_serial_putchar+0xcc>)
  40198c:	4621      	mov	r1, r4
  40198e:	4630      	mov	r0, r6
  401990:	47a8      	blx	r5
  401992:	2800      	cmp	r0, #0
  401994:	d1fa      	bne.n	40198c <usart_serial_putchar+0x48>
		return 1;
  401996:	2001      	movs	r0, #1
  401998:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40199a:	461e      	mov	r6, r3
  40199c:	4d1c      	ldr	r5, [pc, #112]	; (401a10 <usart_serial_putchar+0xcc>)
  40199e:	4621      	mov	r1, r4
  4019a0:	4630      	mov	r0, r6
  4019a2:	47a8      	blx	r5
  4019a4:	2800      	cmp	r0, #0
  4019a6:	d1fa      	bne.n	40199e <usart_serial_putchar+0x5a>
		return 1;
  4019a8:	2001      	movs	r0, #1
  4019aa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4019ac:	461e      	mov	r6, r3
  4019ae:	4d18      	ldr	r5, [pc, #96]	; (401a10 <usart_serial_putchar+0xcc>)
  4019b0:	4621      	mov	r1, r4
  4019b2:	4630      	mov	r0, r6
  4019b4:	47a8      	blx	r5
  4019b6:	2800      	cmp	r0, #0
  4019b8:	d1fa      	bne.n	4019b0 <usart_serial_putchar+0x6c>
		return 1;
  4019ba:	2001      	movs	r0, #1
  4019bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4019be:	461e      	mov	r6, r3
  4019c0:	4d14      	ldr	r5, [pc, #80]	; (401a14 <usart_serial_putchar+0xd0>)
  4019c2:	4621      	mov	r1, r4
  4019c4:	4630      	mov	r0, r6
  4019c6:	47a8      	blx	r5
  4019c8:	2800      	cmp	r0, #0
  4019ca:	d1fa      	bne.n	4019c2 <usart_serial_putchar+0x7e>
		return 1;
  4019cc:	2001      	movs	r0, #1
  4019ce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4019d0:	461e      	mov	r6, r3
  4019d2:	4d10      	ldr	r5, [pc, #64]	; (401a14 <usart_serial_putchar+0xd0>)
  4019d4:	4621      	mov	r1, r4
  4019d6:	4630      	mov	r0, r6
  4019d8:	47a8      	blx	r5
  4019da:	2800      	cmp	r0, #0
  4019dc:	d1fa      	bne.n	4019d4 <usart_serial_putchar+0x90>
		return 1;
  4019de:	2001      	movs	r0, #1
  4019e0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4019e2:	461e      	mov	r6, r3
  4019e4:	4d0b      	ldr	r5, [pc, #44]	; (401a14 <usart_serial_putchar+0xd0>)
  4019e6:	4621      	mov	r1, r4
  4019e8:	4630      	mov	r0, r6
  4019ea:	47a8      	blx	r5
  4019ec:	2800      	cmp	r0, #0
  4019ee:	d1fa      	bne.n	4019e6 <usart_serial_putchar+0xa2>
		return 1;
  4019f0:	2001      	movs	r0, #1
  4019f2:	bd70      	pop	{r4, r5, r6, pc}
  4019f4:	400e0800 	.word	0x400e0800
  4019f8:	400e0a00 	.word	0x400e0a00
  4019fc:	400e1a00 	.word	0x400e1a00
  401a00:	400e1c00 	.word	0x400e1c00
  401a04:	40024000 	.word	0x40024000
  401a08:	40028000 	.word	0x40028000
  401a0c:	4002c000 	.word	0x4002c000
  401a10:	00401481 	.word	0x00401481
  401a14:	00401589 	.word	0x00401589

00401a18 <main>:
	cmd_init();
	//telemetry_init();
}

int main(void)
{
  401a18:	b580      	push	{r7, lr}
  401a1a:	b088      	sub	sp, #32
	sysclk_init();
  401a1c:	4b8b      	ldr	r3, [pc, #556]	; (401c4c <main+0x234>)
  401a1e:	4798      	blx	r3
	board_init();
  401a20:	4b8b      	ldr	r3, [pc, #556]	; (401c50 <main+0x238>)
  401a22:	4798      	blx	r3
  401a24:	200e      	movs	r0, #14
  401a26:	4e8b      	ldr	r6, [pc, #556]	; (401c54 <main+0x23c>)
  401a28:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401a2a:	4d8b      	ldr	r5, [pc, #556]	; (401c58 <main+0x240>)
  401a2c:	4b8b      	ldr	r3, [pc, #556]	; (401c5c <main+0x244>)
  401a2e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401a30:	4a8b      	ldr	r2, [pc, #556]	; (401c60 <main+0x248>)
  401a32:	4b8c      	ldr	r3, [pc, #560]	; (401c64 <main+0x24c>)
  401a34:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401a36:	4a8c      	ldr	r2, [pc, #560]	; (401c68 <main+0x250>)
  401a38:	4b8c      	ldr	r3, [pc, #560]	; (401c6c <main+0x254>)
  401a3a:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401a3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401a40:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  401a42:	23c0      	movs	r3, #192	; 0xc0
  401a44:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  401a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a4a:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  401a4c:	2400      	movs	r4, #0
  401a4e:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401a50:	9405      	str	r4, [sp, #20]
  401a52:	200e      	movs	r0, #14
  401a54:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  401a56:	4a86      	ldr	r2, [pc, #536]	; (401c70 <main+0x258>)
  401a58:	a901      	add	r1, sp, #4
  401a5a:	4628      	mov	r0, r5
  401a5c:	4b85      	ldr	r3, [pc, #532]	; (401c74 <main+0x25c>)
  401a5e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401a60:	4628      	mov	r0, r5
  401a62:	4b85      	ldr	r3, [pc, #532]	; (401c78 <main+0x260>)
  401a64:	4798      	blx	r3
		usart_enable_rx(p_usart);
  401a66:	4628      	mov	r0, r5
  401a68:	4b84      	ldr	r3, [pc, #528]	; (401c7c <main+0x264>)
  401a6a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401a6c:	4e84      	ldr	r6, [pc, #528]	; (401c80 <main+0x268>)
  401a6e:	6833      	ldr	r3, [r6, #0]
  401a70:	4621      	mov	r1, r4
  401a72:	6898      	ldr	r0, [r3, #8]
  401a74:	4d83      	ldr	r5, [pc, #524]	; (401c84 <main+0x26c>)
  401a76:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401a78:	6833      	ldr	r3, [r6, #0]
  401a7a:	4621      	mov	r1, r4
  401a7c:	6858      	ldr	r0, [r3, #4]
  401a7e:	47a8      	blx	r5
	can_init();
  401a80:	4b81      	ldr	r3, [pc, #516]	; (401c88 <main+0x270>)
  401a82:	4798      	blx	r3
	can_start();
  401a84:	4b81      	ldr	r3, [pc, #516]	; (401c8c <main+0x274>)
  401a86:	4798      	blx	r3
	printf("Menu :\r\n"
  401a88:	4881      	ldr	r0, [pc, #516]	; (401c90 <main+0x278>)
  401a8a:	4b82      	ldr	r3, [pc, #520]	; (401c94 <main+0x27c>)
  401a8c:	4798      	blx	r3
	cmd_init();
  401a8e:	4b82      	ldr	r3, [pc, #520]	; (401c98 <main+0x280>)
  401a90:	4798      	blx	r3
	uint8_t data_1[6] = {0x5, 0x4, 0x3, 0x2, 0x1, 0x0};
	
	system_init();

	while(1) {
		scanf("%c", (char *)&key);
  401a92:	4d82      	ldr	r5, [pc, #520]	; (401c9c <main+0x284>)
  401a94:	4c82      	ldr	r4, [pc, #520]	; (401ca0 <main+0x288>)
			commands_module_execute(0x07, 0x123456);
			break;

		case '9':
			printf(" 9: System 2: get temperature read. \r\n");
			commands_module_execute(0x08, 0x123456);
  401a96:	4e83      	ldr	r6, [pc, #524]	; (401ca4 <main+0x28c>)
  401a98:	e002      	b.n	401aa0 <main+0x88>
	printf("Menu :\r\n"
  401a9a:	487d      	ldr	r0, [pc, #500]	; (401c90 <main+0x278>)
  401a9c:	4b7d      	ldr	r3, [pc, #500]	; (401c94 <main+0x27c>)
  401a9e:	4798      	blx	r3
		scanf("%c", (char *)&key);
  401aa0:	f10d 011f 	add.w	r1, sp, #31
  401aa4:	4628      	mov	r0, r5
  401aa6:	47a0      	blx	r4
		switch (key) {
  401aa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  401aac:	3b30      	subs	r3, #48	; 0x30
  401aae:	2b38      	cmp	r3, #56	; 0x38
  401ab0:	d8f6      	bhi.n	401aa0 <main+0x88>
  401ab2:	a201      	add	r2, pc, #4	; (adr r2, 401ab8 <main+0xa0>)
  401ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ab8:	00401b9d 	.word	0x00401b9d
  401abc:	00401ba9 	.word	0x00401ba9
  401ac0:	00401bb1 	.word	0x00401bb1
  401ac4:	00401bc1 	.word	0x00401bc1
  401ac8:	00401bd1 	.word	0x00401bd1
  401acc:	00401be1 	.word	0x00401be1
  401ad0:	00401bf1 	.word	0x00401bf1
  401ad4:	00401c01 	.word	0x00401c01
  401ad8:	00401c11 	.word	0x00401c11
  401adc:	00401c21 	.word	0x00401c21
  401ae0:	00401aa1 	.word	0x00401aa1
  401ae4:	00401aa1 	.word	0x00401aa1
  401ae8:	00401aa1 	.word	0x00401aa1
  401aec:	00401aa1 	.word	0x00401aa1
  401af0:	00401aa1 	.word	0x00401aa1
  401af4:	00401aa1 	.word	0x00401aa1
  401af8:	00401aa1 	.word	0x00401aa1
  401afc:	00401aa1 	.word	0x00401aa1
  401b00:	00401aa1 	.word	0x00401aa1
  401b04:	00401aa1 	.word	0x00401aa1
  401b08:	00401aa1 	.word	0x00401aa1
  401b0c:	00401aa1 	.word	0x00401aa1
  401b10:	00401aa1 	.word	0x00401aa1
  401b14:	00401aa1 	.word	0x00401aa1
  401b18:	00401aa1 	.word	0x00401aa1
  401b1c:	00401aa1 	.word	0x00401aa1
  401b20:	00401aa1 	.word	0x00401aa1
  401b24:	00401aa1 	.word	0x00401aa1
  401b28:	00401aa1 	.word	0x00401aa1
  401b2c:	00401aa1 	.word	0x00401aa1
  401b30:	00401aa1 	.word	0x00401aa1
  401b34:	00401aa1 	.word	0x00401aa1
  401b38:	00401aa1 	.word	0x00401aa1
  401b3c:	00401aa1 	.word	0x00401aa1
  401b40:	00401aa1 	.word	0x00401aa1
  401b44:	00401aa1 	.word	0x00401aa1
  401b48:	00401aa1 	.word	0x00401aa1
  401b4c:	00401aa1 	.word	0x00401aa1
  401b50:	00401aa1 	.word	0x00401aa1
  401b54:	00401aa1 	.word	0x00401aa1
  401b58:	00401aa1 	.word	0x00401aa1
  401b5c:	00401aa1 	.word	0x00401aa1
  401b60:	00401aa1 	.word	0x00401aa1
  401b64:	00401aa1 	.word	0x00401aa1
  401b68:	00401aa1 	.word	0x00401aa1
  401b6c:	00401aa1 	.word	0x00401aa1
  401b70:	00401aa1 	.word	0x00401aa1
  401b74:	00401aa1 	.word	0x00401aa1
  401b78:	00401aa1 	.word	0x00401aa1
  401b7c:	00401c31 	.word	0x00401c31
  401b80:	00401aa1 	.word	0x00401aa1
  401b84:	00401aa1 	.word	0x00401aa1
  401b88:	00401aa1 	.word	0x00401aa1
  401b8c:	00401aa1 	.word	0x00401aa1
  401b90:	00401aa1 	.word	0x00401aa1
  401b94:	00401aa1 	.word	0x00401aa1
  401b98:	00401a9b 	.word	0x00401a9b
			printf(" 0: Download telemetry. \r\n");
  401b9c:	4842      	ldr	r0, [pc, #264]	; (401ca8 <main+0x290>)
  401b9e:	4b3d      	ldr	r3, [pc, #244]	; (401c94 <main+0x27c>)
  401ba0:	4798      	blx	r3
			telemetry_get();
  401ba2:	4b42      	ldr	r3, [pc, #264]	; (401cac <main+0x294>)
  401ba4:	4798      	blx	r3
			break;
  401ba6:	e77b      	b.n	401aa0 <main+0x88>
			printf(" 1: Get CPU temperature. \r\n");
  401ba8:	4841      	ldr	r0, [pc, #260]	; (401cb0 <main+0x298>)
  401baa:	4b3a      	ldr	r3, [pc, #232]	; (401c94 <main+0x27c>)
  401bac:	4798      	blx	r3
			break;
  401bae:	e777      	b.n	401aa0 <main+0x88>
			printf(" 2: System 1: turn ON actuator (LED). \r\n");
  401bb0:	4840      	ldr	r0, [pc, #256]	; (401cb4 <main+0x29c>)
  401bb2:	4b38      	ldr	r3, [pc, #224]	; (401c94 <main+0x27c>)
  401bb4:	4798      	blx	r3
			commands_module_execute(0x01, 0x123456);
  401bb6:	4631      	mov	r1, r6
  401bb8:	2001      	movs	r0, #1
  401bba:	4b3f      	ldr	r3, [pc, #252]	; (401cb8 <main+0x2a0>)
  401bbc:	4798      	blx	r3
			break;
  401bbe:	e76f      	b.n	401aa0 <main+0x88>
			printf(" 3: System 1: turn OFF actuator (LED). \r\n");
  401bc0:	483e      	ldr	r0, [pc, #248]	; (401cbc <main+0x2a4>)
  401bc2:	4b34      	ldr	r3, [pc, #208]	; (401c94 <main+0x27c>)
  401bc4:	4798      	blx	r3
			commands_module_execute(0x02, 0x123456);
  401bc6:	4631      	mov	r1, r6
  401bc8:	2002      	movs	r0, #2
  401bca:	4b3b      	ldr	r3, [pc, #236]	; (401cb8 <main+0x2a0>)
  401bcc:	4798      	blx	r3
			break;
  401bce:	e767      	b.n	401aa0 <main+0x88>
			printf(" 4: System 1: get actuator status (LED). \r\n");
  401bd0:	483b      	ldr	r0, [pc, #236]	; (401cc0 <main+0x2a8>)
  401bd2:	4b30      	ldr	r3, [pc, #192]	; (401c94 <main+0x27c>)
  401bd4:	4798      	blx	r3
			commands_module_execute(0x03, 0x123456);
  401bd6:	4631      	mov	r1, r6
  401bd8:	2003      	movs	r0, #3
  401bda:	4b37      	ldr	r3, [pc, #220]	; (401cb8 <main+0x2a0>)
  401bdc:	4798      	blx	r3
			break;
  401bde:	e75f      	b.n	401aa0 <main+0x88>
			printf(" 5: System 1: get temperature read. \r\n");
  401be0:	4838      	ldr	r0, [pc, #224]	; (401cc4 <main+0x2ac>)
  401be2:	4b2c      	ldr	r3, [pc, #176]	; (401c94 <main+0x27c>)
  401be4:	4798      	blx	r3
			commands_module_execute(0x04, 0x123456);
  401be6:	4631      	mov	r1, r6
  401be8:	2004      	movs	r0, #4
  401bea:	4b33      	ldr	r3, [pc, #204]	; (401cb8 <main+0x2a0>)
  401bec:	4798      	blx	r3
			break;
  401bee:	e757      	b.n	401aa0 <main+0x88>
			printf(" 6: System 2: turn ON actuator (LED). \r\n");
  401bf0:	4835      	ldr	r0, [pc, #212]	; (401cc8 <main+0x2b0>)
  401bf2:	4b28      	ldr	r3, [pc, #160]	; (401c94 <main+0x27c>)
  401bf4:	4798      	blx	r3
			commands_module_execute(0x05, 0x123456);
  401bf6:	4631      	mov	r1, r6
  401bf8:	2005      	movs	r0, #5
  401bfa:	4b2f      	ldr	r3, [pc, #188]	; (401cb8 <main+0x2a0>)
  401bfc:	4798      	blx	r3
			break;
  401bfe:	e74f      	b.n	401aa0 <main+0x88>
			printf(" 7: System 2: turn OFF actuator (LED). \r\n");
  401c00:	4832      	ldr	r0, [pc, #200]	; (401ccc <main+0x2b4>)
  401c02:	4b24      	ldr	r3, [pc, #144]	; (401c94 <main+0x27c>)
  401c04:	4798      	blx	r3
			commands_module_execute(0x06, 0x123456);
  401c06:	4631      	mov	r1, r6
  401c08:	2006      	movs	r0, #6
  401c0a:	4b2b      	ldr	r3, [pc, #172]	; (401cb8 <main+0x2a0>)
  401c0c:	4798      	blx	r3
			break;
  401c0e:	e747      	b.n	401aa0 <main+0x88>
			printf(" 8: System 2: get actuator status (LED). \r\n");
  401c10:	482f      	ldr	r0, [pc, #188]	; (401cd0 <main+0x2b8>)
  401c12:	4b20      	ldr	r3, [pc, #128]	; (401c94 <main+0x27c>)
  401c14:	4798      	blx	r3
			commands_module_execute(0x07, 0x123456);
  401c16:	4631      	mov	r1, r6
  401c18:	2007      	movs	r0, #7
  401c1a:	4b27      	ldr	r3, [pc, #156]	; (401cb8 <main+0x2a0>)
  401c1c:	4798      	blx	r3
			break;
  401c1e:	e73f      	b.n	401aa0 <main+0x88>
			printf(" 9: System 2: get temperature read. \r\n");
  401c20:	482c      	ldr	r0, [pc, #176]	; (401cd4 <main+0x2bc>)
  401c22:	4b1c      	ldr	r3, [pc, #112]	; (401c94 <main+0x27c>)
  401c24:	4798      	blx	r3
			commands_module_execute(0x08, 0x123456);
  401c26:	4631      	mov	r1, r6
  401c28:	2008      	movs	r0, #8
  401c2a:	4b23      	ldr	r3, [pc, #140]	; (401cb8 <main+0x2a0>)
  401c2c:	4798      	blx	r3
			break;
  401c2e:	e737      	b.n	401aa0 <main+0x88>
			
		case 'a':
			printf("Commands counters\r\n");
  401c30:	4829      	ldr	r0, [pc, #164]	; (401cd8 <main+0x2c0>)
  401c32:	4f18      	ldr	r7, [pc, #96]	; (401c94 <main+0x27c>)
  401c34:	47b8      	blx	r7
			printf(" Executed commands: %u \n\r", cmd_get_executed_count());
  401c36:	4b29      	ldr	r3, [pc, #164]	; (401cdc <main+0x2c4>)
  401c38:	4798      	blx	r3
  401c3a:	4601      	mov	r1, r0
  401c3c:	4828      	ldr	r0, [pc, #160]	; (401ce0 <main+0x2c8>)
  401c3e:	47b8      	blx	r7
			printf(" Aborted commands: %u \n\r", cmd_get_aborted_count());
  401c40:	4b28      	ldr	r3, [pc, #160]	; (401ce4 <main+0x2cc>)
  401c42:	4798      	blx	r3
  401c44:	4601      	mov	r1, r0
  401c46:	4828      	ldr	r0, [pc, #160]	; (401ce8 <main+0x2d0>)
  401c48:	47b8      	blx	r7
			break;
  401c4a:	e729      	b.n	401aa0 <main+0x88>
  401c4c:	004009a9 	.word	0x004009a9
  401c50:	00400aa5 	.word	0x00400aa5
  401c54:	004013ad 	.word	0x004013ad
  401c58:	40028000 	.word	0x40028000
  401c5c:	20400d94 	.word	0x20400d94
  401c60:	00401945 	.word	0x00401945
  401c64:	20400d90 	.word	0x20400d90
  401c68:	00401869 	.word	0x00401869
  401c6c:	20400d8c 	.word	0x20400d8c
  401c70:	08f0d180 	.word	0x08f0d180
  401c74:	00401529 	.word	0x00401529
  401c78:	0040157d 	.word	0x0040157d
  401c7c:	00401583 	.word	0x00401583
  401c80:	20400028 	.word	0x20400028
  401c84:	00402139 	.word	0x00402139
  401c88:	004001d5 	.word	0x004001d5
  401c8c:	004002a1 	.word	0x004002a1
  401c90:	0040663c 	.word	0x0040663c
  401c94:	0040204d 	.word	0x0040204d
  401c98:	0040064d 	.word	0x0040064d
  401c9c:	00406820 	.word	0x00406820
  401ca0:	00402075 	.word	0x00402075
  401ca4:	00123456 	.word	0x00123456
  401ca8:	00406824 	.word	0x00406824
  401cac:	00400919 	.word	0x00400919
  401cb0:	00406840 	.word	0x00406840
  401cb4:	0040685c 	.word	0x0040685c
  401cb8:	00400751 	.word	0x00400751
  401cbc:	00406888 	.word	0x00406888
  401cc0:	004068b4 	.word	0x004068b4
  401cc4:	004068e0 	.word	0x004068e0
  401cc8:	00406908 	.word	0x00406908
  401ccc:	00406934 	.word	0x00406934
  401cd0:	00406960 	.word	0x00406960
  401cd4:	0040698c 	.word	0x0040698c
  401cd8:	004069b4 	.word	0x004069b4
  401cdc:	00400661 	.word	0x00400661
  401ce0:	004069c8 	.word	0x004069c8
  401ce4:	00400679 	.word	0x00400679
  401ce8:	004069e4 	.word	0x004069e4

00401cec <__aeabi_uldivmod>:
  401cec:	b953      	cbnz	r3, 401d04 <__aeabi_uldivmod+0x18>
  401cee:	b94a      	cbnz	r2, 401d04 <__aeabi_uldivmod+0x18>
  401cf0:	2900      	cmp	r1, #0
  401cf2:	bf08      	it	eq
  401cf4:	2800      	cmpeq	r0, #0
  401cf6:	bf1c      	itt	ne
  401cf8:	f04f 31ff 	movne.w	r1, #4294967295
  401cfc:	f04f 30ff 	movne.w	r0, #4294967295
  401d00:	f000 b97a 	b.w	401ff8 <__aeabi_idiv0>
  401d04:	f1ad 0c08 	sub.w	ip, sp, #8
  401d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401d0c:	f000 f806 	bl	401d1c <__udivmoddi4>
  401d10:	f8dd e004 	ldr.w	lr, [sp, #4]
  401d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401d18:	b004      	add	sp, #16
  401d1a:	4770      	bx	lr

00401d1c <__udivmoddi4>:
  401d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d20:	468c      	mov	ip, r1
  401d22:	460d      	mov	r5, r1
  401d24:	4604      	mov	r4, r0
  401d26:	9e08      	ldr	r6, [sp, #32]
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d151      	bne.n	401dd0 <__udivmoddi4+0xb4>
  401d2c:	428a      	cmp	r2, r1
  401d2e:	4617      	mov	r7, r2
  401d30:	d96d      	bls.n	401e0e <__udivmoddi4+0xf2>
  401d32:	fab2 fe82 	clz	lr, r2
  401d36:	f1be 0f00 	cmp.w	lr, #0
  401d3a:	d00b      	beq.n	401d54 <__udivmoddi4+0x38>
  401d3c:	f1ce 0c20 	rsb	ip, lr, #32
  401d40:	fa01 f50e 	lsl.w	r5, r1, lr
  401d44:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d48:	fa02 f70e 	lsl.w	r7, r2, lr
  401d4c:	ea4c 0c05 	orr.w	ip, ip, r5
  401d50:	fa00 f40e 	lsl.w	r4, r0, lr
  401d54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401d58:	0c25      	lsrs	r5, r4, #16
  401d5a:	fbbc f8fa 	udiv	r8, ip, sl
  401d5e:	fa1f f987 	uxth.w	r9, r7
  401d62:	fb0a cc18 	mls	ip, sl, r8, ip
  401d66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401d6a:	fb08 f309 	mul.w	r3, r8, r9
  401d6e:	42ab      	cmp	r3, r5
  401d70:	d90a      	bls.n	401d88 <__udivmoddi4+0x6c>
  401d72:	19ed      	adds	r5, r5, r7
  401d74:	f108 32ff 	add.w	r2, r8, #4294967295
  401d78:	f080 8123 	bcs.w	401fc2 <__udivmoddi4+0x2a6>
  401d7c:	42ab      	cmp	r3, r5
  401d7e:	f240 8120 	bls.w	401fc2 <__udivmoddi4+0x2a6>
  401d82:	f1a8 0802 	sub.w	r8, r8, #2
  401d86:	443d      	add	r5, r7
  401d88:	1aed      	subs	r5, r5, r3
  401d8a:	b2a4      	uxth	r4, r4
  401d8c:	fbb5 f0fa 	udiv	r0, r5, sl
  401d90:	fb0a 5510 	mls	r5, sl, r0, r5
  401d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401d98:	fb00 f909 	mul.w	r9, r0, r9
  401d9c:	45a1      	cmp	r9, r4
  401d9e:	d909      	bls.n	401db4 <__udivmoddi4+0x98>
  401da0:	19e4      	adds	r4, r4, r7
  401da2:	f100 33ff 	add.w	r3, r0, #4294967295
  401da6:	f080 810a 	bcs.w	401fbe <__udivmoddi4+0x2a2>
  401daa:	45a1      	cmp	r9, r4
  401dac:	f240 8107 	bls.w	401fbe <__udivmoddi4+0x2a2>
  401db0:	3802      	subs	r0, #2
  401db2:	443c      	add	r4, r7
  401db4:	eba4 0409 	sub.w	r4, r4, r9
  401db8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401dbc:	2100      	movs	r1, #0
  401dbe:	2e00      	cmp	r6, #0
  401dc0:	d061      	beq.n	401e86 <__udivmoddi4+0x16a>
  401dc2:	fa24 f40e 	lsr.w	r4, r4, lr
  401dc6:	2300      	movs	r3, #0
  401dc8:	6034      	str	r4, [r6, #0]
  401dca:	6073      	str	r3, [r6, #4]
  401dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401dd0:	428b      	cmp	r3, r1
  401dd2:	d907      	bls.n	401de4 <__udivmoddi4+0xc8>
  401dd4:	2e00      	cmp	r6, #0
  401dd6:	d054      	beq.n	401e82 <__udivmoddi4+0x166>
  401dd8:	2100      	movs	r1, #0
  401dda:	e886 0021 	stmia.w	r6, {r0, r5}
  401dde:	4608      	mov	r0, r1
  401de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401de4:	fab3 f183 	clz	r1, r3
  401de8:	2900      	cmp	r1, #0
  401dea:	f040 808e 	bne.w	401f0a <__udivmoddi4+0x1ee>
  401dee:	42ab      	cmp	r3, r5
  401df0:	d302      	bcc.n	401df8 <__udivmoddi4+0xdc>
  401df2:	4282      	cmp	r2, r0
  401df4:	f200 80fa 	bhi.w	401fec <__udivmoddi4+0x2d0>
  401df8:	1a84      	subs	r4, r0, r2
  401dfa:	eb65 0503 	sbc.w	r5, r5, r3
  401dfe:	2001      	movs	r0, #1
  401e00:	46ac      	mov	ip, r5
  401e02:	2e00      	cmp	r6, #0
  401e04:	d03f      	beq.n	401e86 <__udivmoddi4+0x16a>
  401e06:	e886 1010 	stmia.w	r6, {r4, ip}
  401e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e0e:	b912      	cbnz	r2, 401e16 <__udivmoddi4+0xfa>
  401e10:	2701      	movs	r7, #1
  401e12:	fbb7 f7f2 	udiv	r7, r7, r2
  401e16:	fab7 fe87 	clz	lr, r7
  401e1a:	f1be 0f00 	cmp.w	lr, #0
  401e1e:	d134      	bne.n	401e8a <__udivmoddi4+0x16e>
  401e20:	1beb      	subs	r3, r5, r7
  401e22:	0c3a      	lsrs	r2, r7, #16
  401e24:	fa1f fc87 	uxth.w	ip, r7
  401e28:	2101      	movs	r1, #1
  401e2a:	fbb3 f8f2 	udiv	r8, r3, r2
  401e2e:	0c25      	lsrs	r5, r4, #16
  401e30:	fb02 3318 	mls	r3, r2, r8, r3
  401e34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401e38:	fb0c f308 	mul.w	r3, ip, r8
  401e3c:	42ab      	cmp	r3, r5
  401e3e:	d907      	bls.n	401e50 <__udivmoddi4+0x134>
  401e40:	19ed      	adds	r5, r5, r7
  401e42:	f108 30ff 	add.w	r0, r8, #4294967295
  401e46:	d202      	bcs.n	401e4e <__udivmoddi4+0x132>
  401e48:	42ab      	cmp	r3, r5
  401e4a:	f200 80d1 	bhi.w	401ff0 <__udivmoddi4+0x2d4>
  401e4e:	4680      	mov	r8, r0
  401e50:	1aed      	subs	r5, r5, r3
  401e52:	b2a3      	uxth	r3, r4
  401e54:	fbb5 f0f2 	udiv	r0, r5, r2
  401e58:	fb02 5510 	mls	r5, r2, r0, r5
  401e5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401e60:	fb0c fc00 	mul.w	ip, ip, r0
  401e64:	45a4      	cmp	ip, r4
  401e66:	d907      	bls.n	401e78 <__udivmoddi4+0x15c>
  401e68:	19e4      	adds	r4, r4, r7
  401e6a:	f100 33ff 	add.w	r3, r0, #4294967295
  401e6e:	d202      	bcs.n	401e76 <__udivmoddi4+0x15a>
  401e70:	45a4      	cmp	ip, r4
  401e72:	f200 80b8 	bhi.w	401fe6 <__udivmoddi4+0x2ca>
  401e76:	4618      	mov	r0, r3
  401e78:	eba4 040c 	sub.w	r4, r4, ip
  401e7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401e80:	e79d      	b.n	401dbe <__udivmoddi4+0xa2>
  401e82:	4631      	mov	r1, r6
  401e84:	4630      	mov	r0, r6
  401e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e8a:	f1ce 0420 	rsb	r4, lr, #32
  401e8e:	fa05 f30e 	lsl.w	r3, r5, lr
  401e92:	fa07 f70e 	lsl.w	r7, r7, lr
  401e96:	fa20 f804 	lsr.w	r8, r0, r4
  401e9a:	0c3a      	lsrs	r2, r7, #16
  401e9c:	fa25 f404 	lsr.w	r4, r5, r4
  401ea0:	ea48 0803 	orr.w	r8, r8, r3
  401ea4:	fbb4 f1f2 	udiv	r1, r4, r2
  401ea8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401eac:	fb02 4411 	mls	r4, r2, r1, r4
  401eb0:	fa1f fc87 	uxth.w	ip, r7
  401eb4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401eb8:	fb01 f30c 	mul.w	r3, r1, ip
  401ebc:	42ab      	cmp	r3, r5
  401ebe:	fa00 f40e 	lsl.w	r4, r0, lr
  401ec2:	d909      	bls.n	401ed8 <__udivmoddi4+0x1bc>
  401ec4:	19ed      	adds	r5, r5, r7
  401ec6:	f101 30ff 	add.w	r0, r1, #4294967295
  401eca:	f080 808a 	bcs.w	401fe2 <__udivmoddi4+0x2c6>
  401ece:	42ab      	cmp	r3, r5
  401ed0:	f240 8087 	bls.w	401fe2 <__udivmoddi4+0x2c6>
  401ed4:	3902      	subs	r1, #2
  401ed6:	443d      	add	r5, r7
  401ed8:	1aeb      	subs	r3, r5, r3
  401eda:	fa1f f588 	uxth.w	r5, r8
  401ede:	fbb3 f0f2 	udiv	r0, r3, r2
  401ee2:	fb02 3310 	mls	r3, r2, r0, r3
  401ee6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401eea:	fb00 f30c 	mul.w	r3, r0, ip
  401eee:	42ab      	cmp	r3, r5
  401ef0:	d907      	bls.n	401f02 <__udivmoddi4+0x1e6>
  401ef2:	19ed      	adds	r5, r5, r7
  401ef4:	f100 38ff 	add.w	r8, r0, #4294967295
  401ef8:	d26f      	bcs.n	401fda <__udivmoddi4+0x2be>
  401efa:	42ab      	cmp	r3, r5
  401efc:	d96d      	bls.n	401fda <__udivmoddi4+0x2be>
  401efe:	3802      	subs	r0, #2
  401f00:	443d      	add	r5, r7
  401f02:	1aeb      	subs	r3, r5, r3
  401f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401f08:	e78f      	b.n	401e2a <__udivmoddi4+0x10e>
  401f0a:	f1c1 0720 	rsb	r7, r1, #32
  401f0e:	fa22 f807 	lsr.w	r8, r2, r7
  401f12:	408b      	lsls	r3, r1
  401f14:	fa05 f401 	lsl.w	r4, r5, r1
  401f18:	ea48 0303 	orr.w	r3, r8, r3
  401f1c:	fa20 fe07 	lsr.w	lr, r0, r7
  401f20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401f24:	40fd      	lsrs	r5, r7
  401f26:	ea4e 0e04 	orr.w	lr, lr, r4
  401f2a:	fbb5 f9fc 	udiv	r9, r5, ip
  401f2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401f32:	fb0c 5519 	mls	r5, ip, r9, r5
  401f36:	fa1f f883 	uxth.w	r8, r3
  401f3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401f3e:	fb09 f408 	mul.w	r4, r9, r8
  401f42:	42ac      	cmp	r4, r5
  401f44:	fa02 f201 	lsl.w	r2, r2, r1
  401f48:	fa00 fa01 	lsl.w	sl, r0, r1
  401f4c:	d908      	bls.n	401f60 <__udivmoddi4+0x244>
  401f4e:	18ed      	adds	r5, r5, r3
  401f50:	f109 30ff 	add.w	r0, r9, #4294967295
  401f54:	d243      	bcs.n	401fde <__udivmoddi4+0x2c2>
  401f56:	42ac      	cmp	r4, r5
  401f58:	d941      	bls.n	401fde <__udivmoddi4+0x2c2>
  401f5a:	f1a9 0902 	sub.w	r9, r9, #2
  401f5e:	441d      	add	r5, r3
  401f60:	1b2d      	subs	r5, r5, r4
  401f62:	fa1f fe8e 	uxth.w	lr, lr
  401f66:	fbb5 f0fc 	udiv	r0, r5, ip
  401f6a:	fb0c 5510 	mls	r5, ip, r0, r5
  401f6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401f72:	fb00 f808 	mul.w	r8, r0, r8
  401f76:	45a0      	cmp	r8, r4
  401f78:	d907      	bls.n	401f8a <__udivmoddi4+0x26e>
  401f7a:	18e4      	adds	r4, r4, r3
  401f7c:	f100 35ff 	add.w	r5, r0, #4294967295
  401f80:	d229      	bcs.n	401fd6 <__udivmoddi4+0x2ba>
  401f82:	45a0      	cmp	r8, r4
  401f84:	d927      	bls.n	401fd6 <__udivmoddi4+0x2ba>
  401f86:	3802      	subs	r0, #2
  401f88:	441c      	add	r4, r3
  401f8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401f8e:	eba4 0408 	sub.w	r4, r4, r8
  401f92:	fba0 8902 	umull	r8, r9, r0, r2
  401f96:	454c      	cmp	r4, r9
  401f98:	46c6      	mov	lr, r8
  401f9a:	464d      	mov	r5, r9
  401f9c:	d315      	bcc.n	401fca <__udivmoddi4+0x2ae>
  401f9e:	d012      	beq.n	401fc6 <__udivmoddi4+0x2aa>
  401fa0:	b156      	cbz	r6, 401fb8 <__udivmoddi4+0x29c>
  401fa2:	ebba 030e 	subs.w	r3, sl, lr
  401fa6:	eb64 0405 	sbc.w	r4, r4, r5
  401faa:	fa04 f707 	lsl.w	r7, r4, r7
  401fae:	40cb      	lsrs	r3, r1
  401fb0:	431f      	orrs	r7, r3
  401fb2:	40cc      	lsrs	r4, r1
  401fb4:	6037      	str	r7, [r6, #0]
  401fb6:	6074      	str	r4, [r6, #4]
  401fb8:	2100      	movs	r1, #0
  401fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401fbe:	4618      	mov	r0, r3
  401fc0:	e6f8      	b.n	401db4 <__udivmoddi4+0x98>
  401fc2:	4690      	mov	r8, r2
  401fc4:	e6e0      	b.n	401d88 <__udivmoddi4+0x6c>
  401fc6:	45c2      	cmp	sl, r8
  401fc8:	d2ea      	bcs.n	401fa0 <__udivmoddi4+0x284>
  401fca:	ebb8 0e02 	subs.w	lr, r8, r2
  401fce:	eb69 0503 	sbc.w	r5, r9, r3
  401fd2:	3801      	subs	r0, #1
  401fd4:	e7e4      	b.n	401fa0 <__udivmoddi4+0x284>
  401fd6:	4628      	mov	r0, r5
  401fd8:	e7d7      	b.n	401f8a <__udivmoddi4+0x26e>
  401fda:	4640      	mov	r0, r8
  401fdc:	e791      	b.n	401f02 <__udivmoddi4+0x1e6>
  401fde:	4681      	mov	r9, r0
  401fe0:	e7be      	b.n	401f60 <__udivmoddi4+0x244>
  401fe2:	4601      	mov	r1, r0
  401fe4:	e778      	b.n	401ed8 <__udivmoddi4+0x1bc>
  401fe6:	3802      	subs	r0, #2
  401fe8:	443c      	add	r4, r7
  401fea:	e745      	b.n	401e78 <__udivmoddi4+0x15c>
  401fec:	4608      	mov	r0, r1
  401fee:	e708      	b.n	401e02 <__udivmoddi4+0xe6>
  401ff0:	f1a8 0802 	sub.w	r8, r8, #2
  401ff4:	443d      	add	r5, r7
  401ff6:	e72b      	b.n	401e50 <__udivmoddi4+0x134>

00401ff8 <__aeabi_idiv0>:
  401ff8:	4770      	bx	lr
  401ffa:	bf00      	nop

00401ffc <__libc_init_array>:
  401ffc:	b570      	push	{r4, r5, r6, lr}
  401ffe:	4e0f      	ldr	r6, [pc, #60]	; (40203c <__libc_init_array+0x40>)
  402000:	4d0f      	ldr	r5, [pc, #60]	; (402040 <__libc_init_array+0x44>)
  402002:	1b76      	subs	r6, r6, r5
  402004:	10b6      	asrs	r6, r6, #2
  402006:	bf18      	it	ne
  402008:	2400      	movne	r4, #0
  40200a:	d005      	beq.n	402018 <__libc_init_array+0x1c>
  40200c:	3401      	adds	r4, #1
  40200e:	f855 3b04 	ldr.w	r3, [r5], #4
  402012:	4798      	blx	r3
  402014:	42a6      	cmp	r6, r4
  402016:	d1f9      	bne.n	40200c <__libc_init_array+0x10>
  402018:	4e0a      	ldr	r6, [pc, #40]	; (402044 <__libc_init_array+0x48>)
  40201a:	4d0b      	ldr	r5, [pc, #44]	; (402048 <__libc_init_array+0x4c>)
  40201c:	1b76      	subs	r6, r6, r5
  40201e:	f004 fdb5 	bl	406b8c <_init>
  402022:	10b6      	asrs	r6, r6, #2
  402024:	bf18      	it	ne
  402026:	2400      	movne	r4, #0
  402028:	d006      	beq.n	402038 <__libc_init_array+0x3c>
  40202a:	3401      	adds	r4, #1
  40202c:	f855 3b04 	ldr.w	r3, [r5], #4
  402030:	4798      	blx	r3
  402032:	42a6      	cmp	r6, r4
  402034:	d1f9      	bne.n	40202a <__libc_init_array+0x2e>
  402036:	bd70      	pop	{r4, r5, r6, pc}
  402038:	bd70      	pop	{r4, r5, r6, pc}
  40203a:	bf00      	nop
  40203c:	00406b98 	.word	0x00406b98
  402040:	00406b98 	.word	0x00406b98
  402044:	00406ba0 	.word	0x00406ba0
  402048:	00406b98 	.word	0x00406b98

0040204c <iprintf>:
  40204c:	b40f      	push	{r0, r1, r2, r3}
  40204e:	b500      	push	{lr}
  402050:	4907      	ldr	r1, [pc, #28]	; (402070 <iprintf+0x24>)
  402052:	b083      	sub	sp, #12
  402054:	ab04      	add	r3, sp, #16
  402056:	6808      	ldr	r0, [r1, #0]
  402058:	f853 2b04 	ldr.w	r2, [r3], #4
  40205c:	6881      	ldr	r1, [r0, #8]
  40205e:	9301      	str	r3, [sp, #4]
  402060:	f000 f97a 	bl	402358 <_vfiprintf_r>
  402064:	b003      	add	sp, #12
  402066:	f85d eb04 	ldr.w	lr, [sp], #4
  40206a:	b004      	add	sp, #16
  40206c:	4770      	bx	lr
  40206e:	bf00      	nop
  402070:	20400028 	.word	0x20400028

00402074 <iscanf>:
  402074:	b40f      	push	{r0, r1, r2, r3}
  402076:	b500      	push	{lr}
  402078:	4907      	ldr	r1, [pc, #28]	; (402098 <iscanf+0x24>)
  40207a:	b083      	sub	sp, #12
  40207c:	ab04      	add	r3, sp, #16
  40207e:	6808      	ldr	r0, [r1, #0]
  402080:	f853 2b04 	ldr.w	r2, [r3], #4
  402084:	6841      	ldr	r1, [r0, #4]
  402086:	9301      	str	r3, [sp, #4]
  402088:	f000 fff0 	bl	40306c <__svfiscanf_r>
  40208c:	b003      	add	sp, #12
  40208e:	f85d eb04 	ldr.w	lr, [sp], #4
  402092:	b004      	add	sp, #16
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	20400028 	.word	0x20400028

0040209c <memset>:
  40209c:	b470      	push	{r4, r5, r6}
  40209e:	0786      	lsls	r6, r0, #30
  4020a0:	d046      	beq.n	402130 <memset+0x94>
  4020a2:	1e54      	subs	r4, r2, #1
  4020a4:	2a00      	cmp	r2, #0
  4020a6:	d041      	beq.n	40212c <memset+0x90>
  4020a8:	b2ca      	uxtb	r2, r1
  4020aa:	4603      	mov	r3, r0
  4020ac:	e002      	b.n	4020b4 <memset+0x18>
  4020ae:	f114 34ff 	adds.w	r4, r4, #4294967295
  4020b2:	d33b      	bcc.n	40212c <memset+0x90>
  4020b4:	f803 2b01 	strb.w	r2, [r3], #1
  4020b8:	079d      	lsls	r5, r3, #30
  4020ba:	d1f8      	bne.n	4020ae <memset+0x12>
  4020bc:	2c03      	cmp	r4, #3
  4020be:	d92e      	bls.n	40211e <memset+0x82>
  4020c0:	b2cd      	uxtb	r5, r1
  4020c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4020c6:	2c0f      	cmp	r4, #15
  4020c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4020cc:	d919      	bls.n	402102 <memset+0x66>
  4020ce:	f103 0210 	add.w	r2, r3, #16
  4020d2:	4626      	mov	r6, r4
  4020d4:	3e10      	subs	r6, #16
  4020d6:	2e0f      	cmp	r6, #15
  4020d8:	f842 5c10 	str.w	r5, [r2, #-16]
  4020dc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4020e0:	f842 5c08 	str.w	r5, [r2, #-8]
  4020e4:	f842 5c04 	str.w	r5, [r2, #-4]
  4020e8:	f102 0210 	add.w	r2, r2, #16
  4020ec:	d8f2      	bhi.n	4020d4 <memset+0x38>
  4020ee:	f1a4 0210 	sub.w	r2, r4, #16
  4020f2:	f022 020f 	bic.w	r2, r2, #15
  4020f6:	f004 040f 	and.w	r4, r4, #15
  4020fa:	3210      	adds	r2, #16
  4020fc:	2c03      	cmp	r4, #3
  4020fe:	4413      	add	r3, r2
  402100:	d90d      	bls.n	40211e <memset+0x82>
  402102:	461e      	mov	r6, r3
  402104:	4622      	mov	r2, r4
  402106:	3a04      	subs	r2, #4
  402108:	2a03      	cmp	r2, #3
  40210a:	f846 5b04 	str.w	r5, [r6], #4
  40210e:	d8fa      	bhi.n	402106 <memset+0x6a>
  402110:	1f22      	subs	r2, r4, #4
  402112:	f022 0203 	bic.w	r2, r2, #3
  402116:	3204      	adds	r2, #4
  402118:	4413      	add	r3, r2
  40211a:	f004 0403 	and.w	r4, r4, #3
  40211e:	b12c      	cbz	r4, 40212c <memset+0x90>
  402120:	b2c9      	uxtb	r1, r1
  402122:	441c      	add	r4, r3
  402124:	f803 1b01 	strb.w	r1, [r3], #1
  402128:	429c      	cmp	r4, r3
  40212a:	d1fb      	bne.n	402124 <memset+0x88>
  40212c:	bc70      	pop	{r4, r5, r6}
  40212e:	4770      	bx	lr
  402130:	4614      	mov	r4, r2
  402132:	4603      	mov	r3, r0
  402134:	e7c2      	b.n	4020bc <memset+0x20>
  402136:	bf00      	nop

00402138 <setbuf>:
  402138:	2900      	cmp	r1, #0
  40213a:	bf0c      	ite	eq
  40213c:	2202      	moveq	r2, #2
  40213e:	2200      	movne	r2, #0
  402140:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402144:	f000 b800 	b.w	402148 <setvbuf>

00402148 <setvbuf>:
  402148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40214c:	4c61      	ldr	r4, [pc, #388]	; (4022d4 <setvbuf+0x18c>)
  40214e:	6825      	ldr	r5, [r4, #0]
  402150:	b083      	sub	sp, #12
  402152:	4604      	mov	r4, r0
  402154:	460f      	mov	r7, r1
  402156:	4690      	mov	r8, r2
  402158:	461e      	mov	r6, r3
  40215a:	b115      	cbz	r5, 402162 <setvbuf+0x1a>
  40215c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40215e:	2b00      	cmp	r3, #0
  402160:	d064      	beq.n	40222c <setvbuf+0xe4>
  402162:	f1b8 0f02 	cmp.w	r8, #2
  402166:	d006      	beq.n	402176 <setvbuf+0x2e>
  402168:	f1b8 0f01 	cmp.w	r8, #1
  40216c:	f200 809f 	bhi.w	4022ae <setvbuf+0x166>
  402170:	2e00      	cmp	r6, #0
  402172:	f2c0 809c 	blt.w	4022ae <setvbuf+0x166>
  402176:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402178:	07d8      	lsls	r0, r3, #31
  40217a:	d534      	bpl.n	4021e6 <setvbuf+0x9e>
  40217c:	4621      	mov	r1, r4
  40217e:	4628      	mov	r0, r5
  402180:	f001 fd92 	bl	403ca8 <_fflush_r>
  402184:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402186:	b141      	cbz	r1, 40219a <setvbuf+0x52>
  402188:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40218c:	4299      	cmp	r1, r3
  40218e:	d002      	beq.n	402196 <setvbuf+0x4e>
  402190:	4628      	mov	r0, r5
  402192:	f001 fffb 	bl	40418c <_free_r>
  402196:	2300      	movs	r3, #0
  402198:	6323      	str	r3, [r4, #48]	; 0x30
  40219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40219e:	2200      	movs	r2, #0
  4021a0:	61a2      	str	r2, [r4, #24]
  4021a2:	6062      	str	r2, [r4, #4]
  4021a4:	061a      	lsls	r2, r3, #24
  4021a6:	d43a      	bmi.n	40221e <setvbuf+0xd6>
  4021a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4021ac:	f023 0303 	bic.w	r3, r3, #3
  4021b0:	f1b8 0f02 	cmp.w	r8, #2
  4021b4:	81a3      	strh	r3, [r4, #12]
  4021b6:	d01d      	beq.n	4021f4 <setvbuf+0xac>
  4021b8:	ab01      	add	r3, sp, #4
  4021ba:	466a      	mov	r2, sp
  4021bc:	4621      	mov	r1, r4
  4021be:	4628      	mov	r0, r5
  4021c0:	f002 fac8 	bl	404754 <__swhatbuf_r>
  4021c4:	89a3      	ldrh	r3, [r4, #12]
  4021c6:	4318      	orrs	r0, r3
  4021c8:	81a0      	strh	r0, [r4, #12]
  4021ca:	2e00      	cmp	r6, #0
  4021cc:	d132      	bne.n	402234 <setvbuf+0xec>
  4021ce:	9e00      	ldr	r6, [sp, #0]
  4021d0:	4630      	mov	r0, r6
  4021d2:	f002 fb37 	bl	404844 <malloc>
  4021d6:	4607      	mov	r7, r0
  4021d8:	2800      	cmp	r0, #0
  4021da:	d06b      	beq.n	4022b4 <setvbuf+0x16c>
  4021dc:	89a3      	ldrh	r3, [r4, #12]
  4021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4021e2:	81a3      	strh	r3, [r4, #12]
  4021e4:	e028      	b.n	402238 <setvbuf+0xf0>
  4021e6:	89a3      	ldrh	r3, [r4, #12]
  4021e8:	0599      	lsls	r1, r3, #22
  4021ea:	d4c7      	bmi.n	40217c <setvbuf+0x34>
  4021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4021ee:	f002 faad 	bl	40474c <__retarget_lock_acquire_recursive>
  4021f2:	e7c3      	b.n	40217c <setvbuf+0x34>
  4021f4:	2500      	movs	r5, #0
  4021f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4021f8:	2600      	movs	r6, #0
  4021fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021fe:	f043 0302 	orr.w	r3, r3, #2
  402202:	2001      	movs	r0, #1
  402204:	60a6      	str	r6, [r4, #8]
  402206:	07ce      	lsls	r6, r1, #31
  402208:	81a3      	strh	r3, [r4, #12]
  40220a:	6022      	str	r2, [r4, #0]
  40220c:	6122      	str	r2, [r4, #16]
  40220e:	6160      	str	r0, [r4, #20]
  402210:	d401      	bmi.n	402216 <setvbuf+0xce>
  402212:	0598      	lsls	r0, r3, #22
  402214:	d53e      	bpl.n	402294 <setvbuf+0x14c>
  402216:	4628      	mov	r0, r5
  402218:	b003      	add	sp, #12
  40221a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40221e:	6921      	ldr	r1, [r4, #16]
  402220:	4628      	mov	r0, r5
  402222:	f001 ffb3 	bl	40418c <_free_r>
  402226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40222a:	e7bd      	b.n	4021a8 <setvbuf+0x60>
  40222c:	4628      	mov	r0, r5
  40222e:	f001 fda5 	bl	403d7c <__sinit>
  402232:	e796      	b.n	402162 <setvbuf+0x1a>
  402234:	2f00      	cmp	r7, #0
  402236:	d0cb      	beq.n	4021d0 <setvbuf+0x88>
  402238:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40223a:	2b00      	cmp	r3, #0
  40223c:	d033      	beq.n	4022a6 <setvbuf+0x15e>
  40223e:	9b00      	ldr	r3, [sp, #0]
  402240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402244:	6027      	str	r7, [r4, #0]
  402246:	429e      	cmp	r6, r3
  402248:	bf1c      	itt	ne
  40224a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40224e:	81a2      	strhne	r2, [r4, #12]
  402250:	f1b8 0f01 	cmp.w	r8, #1
  402254:	bf04      	itt	eq
  402256:	f042 0201 	orreq.w	r2, r2, #1
  40225a:	81a2      	strheq	r2, [r4, #12]
  40225c:	b292      	uxth	r2, r2
  40225e:	f012 0308 	ands.w	r3, r2, #8
  402262:	6127      	str	r7, [r4, #16]
  402264:	6166      	str	r6, [r4, #20]
  402266:	d00e      	beq.n	402286 <setvbuf+0x13e>
  402268:	07d1      	lsls	r1, r2, #31
  40226a:	d51a      	bpl.n	4022a2 <setvbuf+0x15a>
  40226c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40226e:	4276      	negs	r6, r6
  402270:	2300      	movs	r3, #0
  402272:	f015 0501 	ands.w	r5, r5, #1
  402276:	61a6      	str	r6, [r4, #24]
  402278:	60a3      	str	r3, [r4, #8]
  40227a:	d009      	beq.n	402290 <setvbuf+0x148>
  40227c:	2500      	movs	r5, #0
  40227e:	4628      	mov	r0, r5
  402280:	b003      	add	sp, #12
  402282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402286:	60a3      	str	r3, [r4, #8]
  402288:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40228a:	f015 0501 	ands.w	r5, r5, #1
  40228e:	d1f5      	bne.n	40227c <setvbuf+0x134>
  402290:	0593      	lsls	r3, r2, #22
  402292:	d4c0      	bmi.n	402216 <setvbuf+0xce>
  402294:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402296:	f002 fa5b 	bl	404750 <__retarget_lock_release_recursive>
  40229a:	4628      	mov	r0, r5
  40229c:	b003      	add	sp, #12
  40229e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4022a2:	60a6      	str	r6, [r4, #8]
  4022a4:	e7f0      	b.n	402288 <setvbuf+0x140>
  4022a6:	4628      	mov	r0, r5
  4022a8:	f001 fd68 	bl	403d7c <__sinit>
  4022ac:	e7c7      	b.n	40223e <setvbuf+0xf6>
  4022ae:	f04f 35ff 	mov.w	r5, #4294967295
  4022b2:	e7b0      	b.n	402216 <setvbuf+0xce>
  4022b4:	f8dd 9000 	ldr.w	r9, [sp]
  4022b8:	45b1      	cmp	r9, r6
  4022ba:	d004      	beq.n	4022c6 <setvbuf+0x17e>
  4022bc:	4648      	mov	r0, r9
  4022be:	f002 fac1 	bl	404844 <malloc>
  4022c2:	4607      	mov	r7, r0
  4022c4:	b920      	cbnz	r0, 4022d0 <setvbuf+0x188>
  4022c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022ca:	f04f 35ff 	mov.w	r5, #4294967295
  4022ce:	e792      	b.n	4021f6 <setvbuf+0xae>
  4022d0:	464e      	mov	r6, r9
  4022d2:	e783      	b.n	4021dc <setvbuf+0x94>
  4022d4:	20400028 	.word	0x20400028

004022d8 <__sprint_r.part.0>:
  4022d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4022de:	049c      	lsls	r4, r3, #18
  4022e0:	4693      	mov	fp, r2
  4022e2:	d52f      	bpl.n	402344 <__sprint_r.part.0+0x6c>
  4022e4:	6893      	ldr	r3, [r2, #8]
  4022e6:	6812      	ldr	r2, [r2, #0]
  4022e8:	b353      	cbz	r3, 402340 <__sprint_r.part.0+0x68>
  4022ea:	460e      	mov	r6, r1
  4022ec:	4607      	mov	r7, r0
  4022ee:	f102 0908 	add.w	r9, r2, #8
  4022f2:	e919 0420 	ldmdb	r9, {r5, sl}
  4022f6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4022fa:	d017      	beq.n	40232c <__sprint_r.part.0+0x54>
  4022fc:	3d04      	subs	r5, #4
  4022fe:	2400      	movs	r4, #0
  402300:	e001      	b.n	402306 <__sprint_r.part.0+0x2e>
  402302:	45a0      	cmp	r8, r4
  402304:	d010      	beq.n	402328 <__sprint_r.part.0+0x50>
  402306:	4632      	mov	r2, r6
  402308:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40230c:	4638      	mov	r0, r7
  40230e:	f001 fdd7 	bl	403ec0 <_fputwc_r>
  402312:	1c43      	adds	r3, r0, #1
  402314:	f104 0401 	add.w	r4, r4, #1
  402318:	d1f3      	bne.n	402302 <__sprint_r.part.0+0x2a>
  40231a:	2300      	movs	r3, #0
  40231c:	f8cb 3008 	str.w	r3, [fp, #8]
  402320:	f8cb 3004 	str.w	r3, [fp, #4]
  402324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402328:	f8db 3008 	ldr.w	r3, [fp, #8]
  40232c:	f02a 0a03 	bic.w	sl, sl, #3
  402330:	eba3 030a 	sub.w	r3, r3, sl
  402334:	f8cb 3008 	str.w	r3, [fp, #8]
  402338:	f109 0908 	add.w	r9, r9, #8
  40233c:	2b00      	cmp	r3, #0
  40233e:	d1d8      	bne.n	4022f2 <__sprint_r.part.0+0x1a>
  402340:	2000      	movs	r0, #0
  402342:	e7ea      	b.n	40231a <__sprint_r.part.0+0x42>
  402344:	f002 f808 	bl	404358 <__sfvwrite_r>
  402348:	2300      	movs	r3, #0
  40234a:	f8cb 3008 	str.w	r3, [fp, #8]
  40234e:	f8cb 3004 	str.w	r3, [fp, #4]
  402352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402356:	bf00      	nop

00402358 <_vfiprintf_r>:
  402358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40235c:	b0ad      	sub	sp, #180	; 0xb4
  40235e:	461d      	mov	r5, r3
  402360:	468b      	mov	fp, r1
  402362:	4690      	mov	r8, r2
  402364:	9307      	str	r3, [sp, #28]
  402366:	9006      	str	r0, [sp, #24]
  402368:	b118      	cbz	r0, 402372 <_vfiprintf_r+0x1a>
  40236a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40236c:	2b00      	cmp	r3, #0
  40236e:	f000 80f3 	beq.w	402558 <_vfiprintf_r+0x200>
  402372:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402376:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40237a:	07df      	lsls	r7, r3, #31
  40237c:	b281      	uxth	r1, r0
  40237e:	d402      	bmi.n	402386 <_vfiprintf_r+0x2e>
  402380:	058e      	lsls	r6, r1, #22
  402382:	f140 80fc 	bpl.w	40257e <_vfiprintf_r+0x226>
  402386:	048c      	lsls	r4, r1, #18
  402388:	d40a      	bmi.n	4023a0 <_vfiprintf_r+0x48>
  40238a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40238e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402396:	f8ab 100c 	strh.w	r1, [fp, #12]
  40239a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40239e:	b289      	uxth	r1, r1
  4023a0:	0708      	lsls	r0, r1, #28
  4023a2:	f140 80b3 	bpl.w	40250c <_vfiprintf_r+0x1b4>
  4023a6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	f000 80ae 	beq.w	40250c <_vfiprintf_r+0x1b4>
  4023b0:	f001 031a 	and.w	r3, r1, #26
  4023b4:	2b0a      	cmp	r3, #10
  4023b6:	f000 80b5 	beq.w	402524 <_vfiprintf_r+0x1cc>
  4023ba:	2300      	movs	r3, #0
  4023bc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4023c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4023c2:	9311      	str	r3, [sp, #68]	; 0x44
  4023c4:	9310      	str	r3, [sp, #64]	; 0x40
  4023c6:	9303      	str	r3, [sp, #12]
  4023c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4023cc:	46ca      	mov	sl, r9
  4023ce:	f8cd b010 	str.w	fp, [sp, #16]
  4023d2:	f898 3000 	ldrb.w	r3, [r8]
  4023d6:	4644      	mov	r4, r8
  4023d8:	b1fb      	cbz	r3, 40241a <_vfiprintf_r+0xc2>
  4023da:	2b25      	cmp	r3, #37	; 0x25
  4023dc:	d102      	bne.n	4023e4 <_vfiprintf_r+0x8c>
  4023de:	e01c      	b.n	40241a <_vfiprintf_r+0xc2>
  4023e0:	2b25      	cmp	r3, #37	; 0x25
  4023e2:	d003      	beq.n	4023ec <_vfiprintf_r+0x94>
  4023e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	d1f9      	bne.n	4023e0 <_vfiprintf_r+0x88>
  4023ec:	eba4 0508 	sub.w	r5, r4, r8
  4023f0:	b19d      	cbz	r5, 40241a <_vfiprintf_r+0xc2>
  4023f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4023f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023f6:	f8ca 8000 	str.w	r8, [sl]
  4023fa:	3301      	adds	r3, #1
  4023fc:	442a      	add	r2, r5
  4023fe:	2b07      	cmp	r3, #7
  402400:	f8ca 5004 	str.w	r5, [sl, #4]
  402404:	9211      	str	r2, [sp, #68]	; 0x44
  402406:	9310      	str	r3, [sp, #64]	; 0x40
  402408:	dd7a      	ble.n	402500 <_vfiprintf_r+0x1a8>
  40240a:	2a00      	cmp	r2, #0
  40240c:	f040 84b0 	bne.w	402d70 <_vfiprintf_r+0xa18>
  402410:	9b03      	ldr	r3, [sp, #12]
  402412:	9210      	str	r2, [sp, #64]	; 0x40
  402414:	442b      	add	r3, r5
  402416:	46ca      	mov	sl, r9
  402418:	9303      	str	r3, [sp, #12]
  40241a:	7823      	ldrb	r3, [r4, #0]
  40241c:	2b00      	cmp	r3, #0
  40241e:	f000 83e0 	beq.w	402be2 <_vfiprintf_r+0x88a>
  402422:	2000      	movs	r0, #0
  402424:	f04f 0300 	mov.w	r3, #0
  402428:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40242c:	f104 0801 	add.w	r8, r4, #1
  402430:	7862      	ldrb	r2, [r4, #1]
  402432:	4605      	mov	r5, r0
  402434:	4606      	mov	r6, r0
  402436:	4603      	mov	r3, r0
  402438:	f04f 34ff 	mov.w	r4, #4294967295
  40243c:	f108 0801 	add.w	r8, r8, #1
  402440:	f1a2 0120 	sub.w	r1, r2, #32
  402444:	2958      	cmp	r1, #88	; 0x58
  402446:	f200 82de 	bhi.w	402a06 <_vfiprintf_r+0x6ae>
  40244a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40244e:	0221      	.short	0x0221
  402450:	02dc02dc 	.word	0x02dc02dc
  402454:	02dc0229 	.word	0x02dc0229
  402458:	02dc02dc 	.word	0x02dc02dc
  40245c:	02dc02dc 	.word	0x02dc02dc
  402460:	028902dc 	.word	0x028902dc
  402464:	02dc0295 	.word	0x02dc0295
  402468:	02bd00a2 	.word	0x02bd00a2
  40246c:	019f02dc 	.word	0x019f02dc
  402470:	01a401a4 	.word	0x01a401a4
  402474:	01a401a4 	.word	0x01a401a4
  402478:	01a401a4 	.word	0x01a401a4
  40247c:	01a401a4 	.word	0x01a401a4
  402480:	02dc01a4 	.word	0x02dc01a4
  402484:	02dc02dc 	.word	0x02dc02dc
  402488:	02dc02dc 	.word	0x02dc02dc
  40248c:	02dc02dc 	.word	0x02dc02dc
  402490:	02dc02dc 	.word	0x02dc02dc
  402494:	01b202dc 	.word	0x01b202dc
  402498:	02dc02dc 	.word	0x02dc02dc
  40249c:	02dc02dc 	.word	0x02dc02dc
  4024a0:	02dc02dc 	.word	0x02dc02dc
  4024a4:	02dc02dc 	.word	0x02dc02dc
  4024a8:	02dc02dc 	.word	0x02dc02dc
  4024ac:	02dc0197 	.word	0x02dc0197
  4024b0:	02dc02dc 	.word	0x02dc02dc
  4024b4:	02dc02dc 	.word	0x02dc02dc
  4024b8:	02dc019b 	.word	0x02dc019b
  4024bc:	025302dc 	.word	0x025302dc
  4024c0:	02dc02dc 	.word	0x02dc02dc
  4024c4:	02dc02dc 	.word	0x02dc02dc
  4024c8:	02dc02dc 	.word	0x02dc02dc
  4024cc:	02dc02dc 	.word	0x02dc02dc
  4024d0:	02dc02dc 	.word	0x02dc02dc
  4024d4:	021b025a 	.word	0x021b025a
  4024d8:	02dc02dc 	.word	0x02dc02dc
  4024dc:	026e02dc 	.word	0x026e02dc
  4024e0:	02dc021b 	.word	0x02dc021b
  4024e4:	027302dc 	.word	0x027302dc
  4024e8:	01f502dc 	.word	0x01f502dc
  4024ec:	02090182 	.word	0x02090182
  4024f0:	02dc02d7 	.word	0x02dc02d7
  4024f4:	02dc029a 	.word	0x02dc029a
  4024f8:	02dc00a7 	.word	0x02dc00a7
  4024fc:	022e02dc 	.word	0x022e02dc
  402500:	f10a 0a08 	add.w	sl, sl, #8
  402504:	9b03      	ldr	r3, [sp, #12]
  402506:	442b      	add	r3, r5
  402508:	9303      	str	r3, [sp, #12]
  40250a:	e786      	b.n	40241a <_vfiprintf_r+0xc2>
  40250c:	4659      	mov	r1, fp
  40250e:	9806      	ldr	r0, [sp, #24]
  402510:	f001 fab6 	bl	403a80 <__swsetup_r>
  402514:	bb18      	cbnz	r0, 40255e <_vfiprintf_r+0x206>
  402516:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40251a:	f001 031a 	and.w	r3, r1, #26
  40251e:	2b0a      	cmp	r3, #10
  402520:	f47f af4b 	bne.w	4023ba <_vfiprintf_r+0x62>
  402524:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402528:	2b00      	cmp	r3, #0
  40252a:	f6ff af46 	blt.w	4023ba <_vfiprintf_r+0x62>
  40252e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402532:	07db      	lsls	r3, r3, #31
  402534:	d405      	bmi.n	402542 <_vfiprintf_r+0x1ea>
  402536:	058f      	lsls	r7, r1, #22
  402538:	d403      	bmi.n	402542 <_vfiprintf_r+0x1ea>
  40253a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40253e:	f002 f907 	bl	404750 <__retarget_lock_release_recursive>
  402542:	462b      	mov	r3, r5
  402544:	4642      	mov	r2, r8
  402546:	4659      	mov	r1, fp
  402548:	9806      	ldr	r0, [sp, #24]
  40254a:	f000 fd4d 	bl	402fe8 <__sbprintf>
  40254e:	9003      	str	r0, [sp, #12]
  402550:	9803      	ldr	r0, [sp, #12]
  402552:	b02d      	add	sp, #180	; 0xb4
  402554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402558:	f001 fc10 	bl	403d7c <__sinit>
  40255c:	e709      	b.n	402372 <_vfiprintf_r+0x1a>
  40255e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402562:	07d9      	lsls	r1, r3, #31
  402564:	d404      	bmi.n	402570 <_vfiprintf_r+0x218>
  402566:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40256a:	059a      	lsls	r2, r3, #22
  40256c:	f140 84aa 	bpl.w	402ec4 <_vfiprintf_r+0xb6c>
  402570:	f04f 33ff 	mov.w	r3, #4294967295
  402574:	9303      	str	r3, [sp, #12]
  402576:	9803      	ldr	r0, [sp, #12]
  402578:	b02d      	add	sp, #180	; 0xb4
  40257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40257e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402582:	f002 f8e3 	bl	40474c <__retarget_lock_acquire_recursive>
  402586:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40258a:	b281      	uxth	r1, r0
  40258c:	e6fb      	b.n	402386 <_vfiprintf_r+0x2e>
  40258e:	4276      	negs	r6, r6
  402590:	9207      	str	r2, [sp, #28]
  402592:	f043 0304 	orr.w	r3, r3, #4
  402596:	f898 2000 	ldrb.w	r2, [r8]
  40259a:	e74f      	b.n	40243c <_vfiprintf_r+0xe4>
  40259c:	9608      	str	r6, [sp, #32]
  40259e:	069e      	lsls	r6, r3, #26
  4025a0:	f100 8450 	bmi.w	402e44 <_vfiprintf_r+0xaec>
  4025a4:	9907      	ldr	r1, [sp, #28]
  4025a6:	06dd      	lsls	r5, r3, #27
  4025a8:	460a      	mov	r2, r1
  4025aa:	f100 83ef 	bmi.w	402d8c <_vfiprintf_r+0xa34>
  4025ae:	0658      	lsls	r0, r3, #25
  4025b0:	f140 83ec 	bpl.w	402d8c <_vfiprintf_r+0xa34>
  4025b4:	880e      	ldrh	r6, [r1, #0]
  4025b6:	3104      	adds	r1, #4
  4025b8:	2700      	movs	r7, #0
  4025ba:	2201      	movs	r2, #1
  4025bc:	9107      	str	r1, [sp, #28]
  4025be:	f04f 0100 	mov.w	r1, #0
  4025c2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4025c6:	2500      	movs	r5, #0
  4025c8:	1c61      	adds	r1, r4, #1
  4025ca:	f000 8116 	beq.w	4027fa <_vfiprintf_r+0x4a2>
  4025ce:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4025d2:	9102      	str	r1, [sp, #8]
  4025d4:	ea56 0107 	orrs.w	r1, r6, r7
  4025d8:	f040 8114 	bne.w	402804 <_vfiprintf_r+0x4ac>
  4025dc:	2c00      	cmp	r4, #0
  4025de:	f040 835c 	bne.w	402c9a <_vfiprintf_r+0x942>
  4025e2:	2a00      	cmp	r2, #0
  4025e4:	f040 83b7 	bne.w	402d56 <_vfiprintf_r+0x9fe>
  4025e8:	f013 0301 	ands.w	r3, r3, #1
  4025ec:	9305      	str	r3, [sp, #20]
  4025ee:	f000 8457 	beq.w	402ea0 <_vfiprintf_r+0xb48>
  4025f2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4025f6:	2330      	movs	r3, #48	; 0x30
  4025f8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4025fc:	9b05      	ldr	r3, [sp, #20]
  4025fe:	42a3      	cmp	r3, r4
  402600:	bfb8      	it	lt
  402602:	4623      	movlt	r3, r4
  402604:	9301      	str	r3, [sp, #4]
  402606:	b10d      	cbz	r5, 40260c <_vfiprintf_r+0x2b4>
  402608:	3301      	adds	r3, #1
  40260a:	9301      	str	r3, [sp, #4]
  40260c:	9b02      	ldr	r3, [sp, #8]
  40260e:	f013 0302 	ands.w	r3, r3, #2
  402612:	9309      	str	r3, [sp, #36]	; 0x24
  402614:	d002      	beq.n	40261c <_vfiprintf_r+0x2c4>
  402616:	9b01      	ldr	r3, [sp, #4]
  402618:	3302      	adds	r3, #2
  40261a:	9301      	str	r3, [sp, #4]
  40261c:	9b02      	ldr	r3, [sp, #8]
  40261e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402622:	930a      	str	r3, [sp, #40]	; 0x28
  402624:	f040 8217 	bne.w	402a56 <_vfiprintf_r+0x6fe>
  402628:	9b08      	ldr	r3, [sp, #32]
  40262a:	9a01      	ldr	r2, [sp, #4]
  40262c:	1a9d      	subs	r5, r3, r2
  40262e:	2d00      	cmp	r5, #0
  402630:	f340 8211 	ble.w	402a56 <_vfiprintf_r+0x6fe>
  402634:	2d10      	cmp	r5, #16
  402636:	f340 8490 	ble.w	402f5a <_vfiprintf_r+0xc02>
  40263a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40263c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40263e:	4ec4      	ldr	r6, [pc, #784]	; (402950 <_vfiprintf_r+0x5f8>)
  402640:	46d6      	mov	lr, sl
  402642:	2710      	movs	r7, #16
  402644:	46a2      	mov	sl, r4
  402646:	4619      	mov	r1, r3
  402648:	9c06      	ldr	r4, [sp, #24]
  40264a:	e007      	b.n	40265c <_vfiprintf_r+0x304>
  40264c:	f101 0c02 	add.w	ip, r1, #2
  402650:	f10e 0e08 	add.w	lr, lr, #8
  402654:	4601      	mov	r1, r0
  402656:	3d10      	subs	r5, #16
  402658:	2d10      	cmp	r5, #16
  40265a:	dd11      	ble.n	402680 <_vfiprintf_r+0x328>
  40265c:	1c48      	adds	r0, r1, #1
  40265e:	3210      	adds	r2, #16
  402660:	2807      	cmp	r0, #7
  402662:	9211      	str	r2, [sp, #68]	; 0x44
  402664:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402668:	9010      	str	r0, [sp, #64]	; 0x40
  40266a:	ddef      	ble.n	40264c <_vfiprintf_r+0x2f4>
  40266c:	2a00      	cmp	r2, #0
  40266e:	f040 81e4 	bne.w	402a3a <_vfiprintf_r+0x6e2>
  402672:	3d10      	subs	r5, #16
  402674:	2d10      	cmp	r5, #16
  402676:	4611      	mov	r1, r2
  402678:	f04f 0c01 	mov.w	ip, #1
  40267c:	46ce      	mov	lr, r9
  40267e:	dced      	bgt.n	40265c <_vfiprintf_r+0x304>
  402680:	4654      	mov	r4, sl
  402682:	4661      	mov	r1, ip
  402684:	46f2      	mov	sl, lr
  402686:	442a      	add	r2, r5
  402688:	2907      	cmp	r1, #7
  40268a:	9211      	str	r2, [sp, #68]	; 0x44
  40268c:	f8ca 6000 	str.w	r6, [sl]
  402690:	f8ca 5004 	str.w	r5, [sl, #4]
  402694:	9110      	str	r1, [sp, #64]	; 0x40
  402696:	f300 82ec 	bgt.w	402c72 <_vfiprintf_r+0x91a>
  40269a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40269e:	f10a 0a08 	add.w	sl, sl, #8
  4026a2:	1c48      	adds	r0, r1, #1
  4026a4:	2d00      	cmp	r5, #0
  4026a6:	f040 81de 	bne.w	402a66 <_vfiprintf_r+0x70e>
  4026aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4026ac:	2b00      	cmp	r3, #0
  4026ae:	f000 81f8 	beq.w	402aa2 <_vfiprintf_r+0x74a>
  4026b2:	3202      	adds	r2, #2
  4026b4:	a90e      	add	r1, sp, #56	; 0x38
  4026b6:	2302      	movs	r3, #2
  4026b8:	2807      	cmp	r0, #7
  4026ba:	9211      	str	r2, [sp, #68]	; 0x44
  4026bc:	9010      	str	r0, [sp, #64]	; 0x40
  4026be:	e88a 000a 	stmia.w	sl, {r1, r3}
  4026c2:	f340 81ea 	ble.w	402a9a <_vfiprintf_r+0x742>
  4026c6:	2a00      	cmp	r2, #0
  4026c8:	f040 838c 	bne.w	402de4 <_vfiprintf_r+0xa8c>
  4026cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4026ce:	2b80      	cmp	r3, #128	; 0x80
  4026d0:	f04f 0001 	mov.w	r0, #1
  4026d4:	4611      	mov	r1, r2
  4026d6:	46ca      	mov	sl, r9
  4026d8:	f040 81e7 	bne.w	402aaa <_vfiprintf_r+0x752>
  4026dc:	9b08      	ldr	r3, [sp, #32]
  4026de:	9d01      	ldr	r5, [sp, #4]
  4026e0:	1b5e      	subs	r6, r3, r5
  4026e2:	2e00      	cmp	r6, #0
  4026e4:	f340 81e1 	ble.w	402aaa <_vfiprintf_r+0x752>
  4026e8:	2e10      	cmp	r6, #16
  4026ea:	4d9a      	ldr	r5, [pc, #616]	; (402954 <_vfiprintf_r+0x5fc>)
  4026ec:	f340 8450 	ble.w	402f90 <_vfiprintf_r+0xc38>
  4026f0:	46d4      	mov	ip, sl
  4026f2:	2710      	movs	r7, #16
  4026f4:	46a2      	mov	sl, r4
  4026f6:	9c06      	ldr	r4, [sp, #24]
  4026f8:	e007      	b.n	40270a <_vfiprintf_r+0x3b2>
  4026fa:	f101 0e02 	add.w	lr, r1, #2
  4026fe:	f10c 0c08 	add.w	ip, ip, #8
  402702:	4601      	mov	r1, r0
  402704:	3e10      	subs	r6, #16
  402706:	2e10      	cmp	r6, #16
  402708:	dd11      	ble.n	40272e <_vfiprintf_r+0x3d6>
  40270a:	1c48      	adds	r0, r1, #1
  40270c:	3210      	adds	r2, #16
  40270e:	2807      	cmp	r0, #7
  402710:	9211      	str	r2, [sp, #68]	; 0x44
  402712:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402716:	9010      	str	r0, [sp, #64]	; 0x40
  402718:	ddef      	ble.n	4026fa <_vfiprintf_r+0x3a2>
  40271a:	2a00      	cmp	r2, #0
  40271c:	f040 829d 	bne.w	402c5a <_vfiprintf_r+0x902>
  402720:	3e10      	subs	r6, #16
  402722:	2e10      	cmp	r6, #16
  402724:	f04f 0e01 	mov.w	lr, #1
  402728:	4611      	mov	r1, r2
  40272a:	46cc      	mov	ip, r9
  40272c:	dced      	bgt.n	40270a <_vfiprintf_r+0x3b2>
  40272e:	4654      	mov	r4, sl
  402730:	46e2      	mov	sl, ip
  402732:	4432      	add	r2, r6
  402734:	f1be 0f07 	cmp.w	lr, #7
  402738:	9211      	str	r2, [sp, #68]	; 0x44
  40273a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40273e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402742:	f300 8369 	bgt.w	402e18 <_vfiprintf_r+0xac0>
  402746:	f10a 0a08 	add.w	sl, sl, #8
  40274a:	f10e 0001 	add.w	r0, lr, #1
  40274e:	4671      	mov	r1, lr
  402750:	e1ab      	b.n	402aaa <_vfiprintf_r+0x752>
  402752:	9608      	str	r6, [sp, #32]
  402754:	f013 0220 	ands.w	r2, r3, #32
  402758:	f040 838c 	bne.w	402e74 <_vfiprintf_r+0xb1c>
  40275c:	f013 0110 	ands.w	r1, r3, #16
  402760:	f040 831a 	bne.w	402d98 <_vfiprintf_r+0xa40>
  402764:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402768:	f000 8316 	beq.w	402d98 <_vfiprintf_r+0xa40>
  40276c:	9807      	ldr	r0, [sp, #28]
  40276e:	460a      	mov	r2, r1
  402770:	4601      	mov	r1, r0
  402772:	3104      	adds	r1, #4
  402774:	8806      	ldrh	r6, [r0, #0]
  402776:	9107      	str	r1, [sp, #28]
  402778:	2700      	movs	r7, #0
  40277a:	e720      	b.n	4025be <_vfiprintf_r+0x266>
  40277c:	9608      	str	r6, [sp, #32]
  40277e:	f043 0310 	orr.w	r3, r3, #16
  402782:	e7e7      	b.n	402754 <_vfiprintf_r+0x3fc>
  402784:	9608      	str	r6, [sp, #32]
  402786:	f043 0310 	orr.w	r3, r3, #16
  40278a:	e708      	b.n	40259e <_vfiprintf_r+0x246>
  40278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402790:	f898 2000 	ldrb.w	r2, [r8]
  402794:	e652      	b.n	40243c <_vfiprintf_r+0xe4>
  402796:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40279a:	2600      	movs	r6, #0
  40279c:	f818 2b01 	ldrb.w	r2, [r8], #1
  4027a0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4027a4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4027a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4027ac:	2909      	cmp	r1, #9
  4027ae:	d9f5      	bls.n	40279c <_vfiprintf_r+0x444>
  4027b0:	e646      	b.n	402440 <_vfiprintf_r+0xe8>
  4027b2:	9608      	str	r6, [sp, #32]
  4027b4:	2800      	cmp	r0, #0
  4027b6:	f040 8408 	bne.w	402fca <_vfiprintf_r+0xc72>
  4027ba:	f043 0310 	orr.w	r3, r3, #16
  4027be:	069e      	lsls	r6, r3, #26
  4027c0:	f100 834c 	bmi.w	402e5c <_vfiprintf_r+0xb04>
  4027c4:	06dd      	lsls	r5, r3, #27
  4027c6:	f100 82f3 	bmi.w	402db0 <_vfiprintf_r+0xa58>
  4027ca:	0658      	lsls	r0, r3, #25
  4027cc:	f140 82f0 	bpl.w	402db0 <_vfiprintf_r+0xa58>
  4027d0:	9d07      	ldr	r5, [sp, #28]
  4027d2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4027d6:	462a      	mov	r2, r5
  4027d8:	17f7      	asrs	r7, r6, #31
  4027da:	3204      	adds	r2, #4
  4027dc:	4630      	mov	r0, r6
  4027de:	4639      	mov	r1, r7
  4027e0:	9207      	str	r2, [sp, #28]
  4027e2:	2800      	cmp	r0, #0
  4027e4:	f171 0200 	sbcs.w	r2, r1, #0
  4027e8:	f2c0 835d 	blt.w	402ea6 <_vfiprintf_r+0xb4e>
  4027ec:	1c61      	adds	r1, r4, #1
  4027ee:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4027f2:	f04f 0201 	mov.w	r2, #1
  4027f6:	f47f aeea 	bne.w	4025ce <_vfiprintf_r+0x276>
  4027fa:	ea56 0107 	orrs.w	r1, r6, r7
  4027fe:	f000 824d 	beq.w	402c9c <_vfiprintf_r+0x944>
  402802:	9302      	str	r3, [sp, #8]
  402804:	2a01      	cmp	r2, #1
  402806:	f000 828c 	beq.w	402d22 <_vfiprintf_r+0x9ca>
  40280a:	2a02      	cmp	r2, #2
  40280c:	f040 825c 	bne.w	402cc8 <_vfiprintf_r+0x970>
  402810:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402812:	46cb      	mov	fp, r9
  402814:	0933      	lsrs	r3, r6, #4
  402816:	f006 010f 	and.w	r1, r6, #15
  40281a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40281e:	093a      	lsrs	r2, r7, #4
  402820:	461e      	mov	r6, r3
  402822:	4617      	mov	r7, r2
  402824:	5c43      	ldrb	r3, [r0, r1]
  402826:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40282a:	ea56 0307 	orrs.w	r3, r6, r7
  40282e:	d1f1      	bne.n	402814 <_vfiprintf_r+0x4bc>
  402830:	eba9 030b 	sub.w	r3, r9, fp
  402834:	9305      	str	r3, [sp, #20]
  402836:	e6e1      	b.n	4025fc <_vfiprintf_r+0x2a4>
  402838:	2800      	cmp	r0, #0
  40283a:	f040 83c0 	bne.w	402fbe <_vfiprintf_r+0xc66>
  40283e:	0699      	lsls	r1, r3, #26
  402840:	f100 8367 	bmi.w	402f12 <_vfiprintf_r+0xbba>
  402844:	06da      	lsls	r2, r3, #27
  402846:	f100 80f1 	bmi.w	402a2c <_vfiprintf_r+0x6d4>
  40284a:	065b      	lsls	r3, r3, #25
  40284c:	f140 80ee 	bpl.w	402a2c <_vfiprintf_r+0x6d4>
  402850:	9a07      	ldr	r2, [sp, #28]
  402852:	6813      	ldr	r3, [r2, #0]
  402854:	3204      	adds	r2, #4
  402856:	9207      	str	r2, [sp, #28]
  402858:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40285c:	801a      	strh	r2, [r3, #0]
  40285e:	e5b8      	b.n	4023d2 <_vfiprintf_r+0x7a>
  402860:	9807      	ldr	r0, [sp, #28]
  402862:	4a3d      	ldr	r2, [pc, #244]	; (402958 <_vfiprintf_r+0x600>)
  402864:	9608      	str	r6, [sp, #32]
  402866:	920b      	str	r2, [sp, #44]	; 0x2c
  402868:	6806      	ldr	r6, [r0, #0]
  40286a:	2278      	movs	r2, #120	; 0x78
  40286c:	2130      	movs	r1, #48	; 0x30
  40286e:	3004      	adds	r0, #4
  402870:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402874:	f043 0302 	orr.w	r3, r3, #2
  402878:	9007      	str	r0, [sp, #28]
  40287a:	2700      	movs	r7, #0
  40287c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402880:	2202      	movs	r2, #2
  402882:	e69c      	b.n	4025be <_vfiprintf_r+0x266>
  402884:	9608      	str	r6, [sp, #32]
  402886:	2800      	cmp	r0, #0
  402888:	d099      	beq.n	4027be <_vfiprintf_r+0x466>
  40288a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40288e:	e796      	b.n	4027be <_vfiprintf_r+0x466>
  402890:	f898 2000 	ldrb.w	r2, [r8]
  402894:	2d00      	cmp	r5, #0
  402896:	f47f add1 	bne.w	40243c <_vfiprintf_r+0xe4>
  40289a:	2001      	movs	r0, #1
  40289c:	2520      	movs	r5, #32
  40289e:	e5cd      	b.n	40243c <_vfiprintf_r+0xe4>
  4028a0:	f043 0301 	orr.w	r3, r3, #1
  4028a4:	f898 2000 	ldrb.w	r2, [r8]
  4028a8:	e5c8      	b.n	40243c <_vfiprintf_r+0xe4>
  4028aa:	9608      	str	r6, [sp, #32]
  4028ac:	2800      	cmp	r0, #0
  4028ae:	f040 8393 	bne.w	402fd8 <_vfiprintf_r+0xc80>
  4028b2:	4929      	ldr	r1, [pc, #164]	; (402958 <_vfiprintf_r+0x600>)
  4028b4:	910b      	str	r1, [sp, #44]	; 0x2c
  4028b6:	069f      	lsls	r7, r3, #26
  4028b8:	f100 82e8 	bmi.w	402e8c <_vfiprintf_r+0xb34>
  4028bc:	9807      	ldr	r0, [sp, #28]
  4028be:	06de      	lsls	r6, r3, #27
  4028c0:	4601      	mov	r1, r0
  4028c2:	f100 8270 	bmi.w	402da6 <_vfiprintf_r+0xa4e>
  4028c6:	065d      	lsls	r5, r3, #25
  4028c8:	f140 826d 	bpl.w	402da6 <_vfiprintf_r+0xa4e>
  4028cc:	3104      	adds	r1, #4
  4028ce:	8806      	ldrh	r6, [r0, #0]
  4028d0:	9107      	str	r1, [sp, #28]
  4028d2:	2700      	movs	r7, #0
  4028d4:	07d8      	lsls	r0, r3, #31
  4028d6:	f140 8222 	bpl.w	402d1e <_vfiprintf_r+0x9c6>
  4028da:	ea56 0107 	orrs.w	r1, r6, r7
  4028de:	f000 821e 	beq.w	402d1e <_vfiprintf_r+0x9c6>
  4028e2:	2130      	movs	r1, #48	; 0x30
  4028e4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4028e8:	f043 0302 	orr.w	r3, r3, #2
  4028ec:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4028f0:	2202      	movs	r2, #2
  4028f2:	e664      	b.n	4025be <_vfiprintf_r+0x266>
  4028f4:	9608      	str	r6, [sp, #32]
  4028f6:	2800      	cmp	r0, #0
  4028f8:	f040 836b 	bne.w	402fd2 <_vfiprintf_r+0xc7a>
  4028fc:	4917      	ldr	r1, [pc, #92]	; (40295c <_vfiprintf_r+0x604>)
  4028fe:	910b      	str	r1, [sp, #44]	; 0x2c
  402900:	e7d9      	b.n	4028b6 <_vfiprintf_r+0x55e>
  402902:	9907      	ldr	r1, [sp, #28]
  402904:	9608      	str	r6, [sp, #32]
  402906:	680a      	ldr	r2, [r1, #0]
  402908:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40290c:	f04f 0000 	mov.w	r0, #0
  402910:	460a      	mov	r2, r1
  402912:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  402916:	3204      	adds	r2, #4
  402918:	2001      	movs	r0, #1
  40291a:	9001      	str	r0, [sp, #4]
  40291c:	9207      	str	r2, [sp, #28]
  40291e:	9005      	str	r0, [sp, #20]
  402920:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402924:	9302      	str	r3, [sp, #8]
  402926:	2400      	movs	r4, #0
  402928:	e670      	b.n	40260c <_vfiprintf_r+0x2b4>
  40292a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40292e:	f898 2000 	ldrb.w	r2, [r8]
  402932:	e583      	b.n	40243c <_vfiprintf_r+0xe4>
  402934:	f898 2000 	ldrb.w	r2, [r8]
  402938:	2a6c      	cmp	r2, #108	; 0x6c
  40293a:	bf03      	ittte	eq
  40293c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402940:	f043 0320 	orreq.w	r3, r3, #32
  402944:	f108 0801 	addeq.w	r8, r8, #1
  402948:	f043 0310 	orrne.w	r3, r3, #16
  40294c:	e576      	b.n	40243c <_vfiprintf_r+0xe4>
  40294e:	bf00      	nop
  402950:	00406a34 	.word	0x00406a34
  402954:	00406a44 	.word	0x00406a44
  402958:	00406a18 	.word	0x00406a18
  40295c:	00406a04 	.word	0x00406a04
  402960:	9907      	ldr	r1, [sp, #28]
  402962:	680e      	ldr	r6, [r1, #0]
  402964:	460a      	mov	r2, r1
  402966:	2e00      	cmp	r6, #0
  402968:	f102 0204 	add.w	r2, r2, #4
  40296c:	f6ff ae0f 	blt.w	40258e <_vfiprintf_r+0x236>
  402970:	9207      	str	r2, [sp, #28]
  402972:	f898 2000 	ldrb.w	r2, [r8]
  402976:	e561      	b.n	40243c <_vfiprintf_r+0xe4>
  402978:	f898 2000 	ldrb.w	r2, [r8]
  40297c:	2001      	movs	r0, #1
  40297e:	252b      	movs	r5, #43	; 0x2b
  402980:	e55c      	b.n	40243c <_vfiprintf_r+0xe4>
  402982:	9907      	ldr	r1, [sp, #28]
  402984:	9608      	str	r6, [sp, #32]
  402986:	f8d1 b000 	ldr.w	fp, [r1]
  40298a:	f04f 0200 	mov.w	r2, #0
  40298e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402992:	1d0e      	adds	r6, r1, #4
  402994:	f1bb 0f00 	cmp.w	fp, #0
  402998:	f000 82e5 	beq.w	402f66 <_vfiprintf_r+0xc0e>
  40299c:	1c67      	adds	r7, r4, #1
  40299e:	f000 82c4 	beq.w	402f2a <_vfiprintf_r+0xbd2>
  4029a2:	4622      	mov	r2, r4
  4029a4:	2100      	movs	r1, #0
  4029a6:	4658      	mov	r0, fp
  4029a8:	9301      	str	r3, [sp, #4]
  4029aa:	f002 fa49 	bl	404e40 <memchr>
  4029ae:	9b01      	ldr	r3, [sp, #4]
  4029b0:	2800      	cmp	r0, #0
  4029b2:	f000 82e5 	beq.w	402f80 <_vfiprintf_r+0xc28>
  4029b6:	eba0 020b 	sub.w	r2, r0, fp
  4029ba:	9205      	str	r2, [sp, #20]
  4029bc:	9607      	str	r6, [sp, #28]
  4029be:	9302      	str	r3, [sp, #8]
  4029c0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4029c4:	2400      	movs	r4, #0
  4029c6:	e619      	b.n	4025fc <_vfiprintf_r+0x2a4>
  4029c8:	f898 2000 	ldrb.w	r2, [r8]
  4029cc:	2a2a      	cmp	r2, #42	; 0x2a
  4029ce:	f108 0701 	add.w	r7, r8, #1
  4029d2:	f000 82e9 	beq.w	402fa8 <_vfiprintf_r+0xc50>
  4029d6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4029da:	2909      	cmp	r1, #9
  4029dc:	46b8      	mov	r8, r7
  4029de:	f04f 0400 	mov.w	r4, #0
  4029e2:	f63f ad2d 	bhi.w	402440 <_vfiprintf_r+0xe8>
  4029e6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4029ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4029ee:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4029f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4029f6:	2909      	cmp	r1, #9
  4029f8:	d9f5      	bls.n	4029e6 <_vfiprintf_r+0x68e>
  4029fa:	e521      	b.n	402440 <_vfiprintf_r+0xe8>
  4029fc:	f043 0320 	orr.w	r3, r3, #32
  402a00:	f898 2000 	ldrb.w	r2, [r8]
  402a04:	e51a      	b.n	40243c <_vfiprintf_r+0xe4>
  402a06:	9608      	str	r6, [sp, #32]
  402a08:	2800      	cmp	r0, #0
  402a0a:	f040 82db 	bne.w	402fc4 <_vfiprintf_r+0xc6c>
  402a0e:	2a00      	cmp	r2, #0
  402a10:	f000 80e7 	beq.w	402be2 <_vfiprintf_r+0x88a>
  402a14:	2101      	movs	r1, #1
  402a16:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402a1a:	f04f 0200 	mov.w	r2, #0
  402a1e:	9101      	str	r1, [sp, #4]
  402a20:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402a24:	9105      	str	r1, [sp, #20]
  402a26:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402a2a:	e77b      	b.n	402924 <_vfiprintf_r+0x5cc>
  402a2c:	9a07      	ldr	r2, [sp, #28]
  402a2e:	6813      	ldr	r3, [r2, #0]
  402a30:	3204      	adds	r2, #4
  402a32:	9207      	str	r2, [sp, #28]
  402a34:	9a03      	ldr	r2, [sp, #12]
  402a36:	601a      	str	r2, [r3, #0]
  402a38:	e4cb      	b.n	4023d2 <_vfiprintf_r+0x7a>
  402a3a:	aa0f      	add	r2, sp, #60	; 0x3c
  402a3c:	9904      	ldr	r1, [sp, #16]
  402a3e:	4620      	mov	r0, r4
  402a40:	f7ff fc4a 	bl	4022d8 <__sprint_r.part.0>
  402a44:	2800      	cmp	r0, #0
  402a46:	f040 8139 	bne.w	402cbc <_vfiprintf_r+0x964>
  402a4a:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a4e:	f101 0c01 	add.w	ip, r1, #1
  402a52:	46ce      	mov	lr, r9
  402a54:	e5ff      	b.n	402656 <_vfiprintf_r+0x2fe>
  402a56:	9910      	ldr	r1, [sp, #64]	; 0x40
  402a58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a5a:	1c48      	adds	r0, r1, #1
  402a5c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402a60:	2d00      	cmp	r5, #0
  402a62:	f43f ae22 	beq.w	4026aa <_vfiprintf_r+0x352>
  402a66:	3201      	adds	r2, #1
  402a68:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402a6c:	2101      	movs	r1, #1
  402a6e:	2807      	cmp	r0, #7
  402a70:	9211      	str	r2, [sp, #68]	; 0x44
  402a72:	9010      	str	r0, [sp, #64]	; 0x40
  402a74:	f8ca 5000 	str.w	r5, [sl]
  402a78:	f8ca 1004 	str.w	r1, [sl, #4]
  402a7c:	f340 8108 	ble.w	402c90 <_vfiprintf_r+0x938>
  402a80:	2a00      	cmp	r2, #0
  402a82:	f040 81bc 	bne.w	402dfe <_vfiprintf_r+0xaa6>
  402a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a88:	2b00      	cmp	r3, #0
  402a8a:	f43f ae1f 	beq.w	4026cc <_vfiprintf_r+0x374>
  402a8e:	ab0e      	add	r3, sp, #56	; 0x38
  402a90:	2202      	movs	r2, #2
  402a92:	4608      	mov	r0, r1
  402a94:	931c      	str	r3, [sp, #112]	; 0x70
  402a96:	921d      	str	r2, [sp, #116]	; 0x74
  402a98:	46ca      	mov	sl, r9
  402a9a:	4601      	mov	r1, r0
  402a9c:	f10a 0a08 	add.w	sl, sl, #8
  402aa0:	3001      	adds	r0, #1
  402aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402aa4:	2b80      	cmp	r3, #128	; 0x80
  402aa6:	f43f ae19 	beq.w	4026dc <_vfiprintf_r+0x384>
  402aaa:	9b05      	ldr	r3, [sp, #20]
  402aac:	1ae4      	subs	r4, r4, r3
  402aae:	2c00      	cmp	r4, #0
  402ab0:	dd2e      	ble.n	402b10 <_vfiprintf_r+0x7b8>
  402ab2:	2c10      	cmp	r4, #16
  402ab4:	4db3      	ldr	r5, [pc, #716]	; (402d84 <_vfiprintf_r+0xa2c>)
  402ab6:	dd1e      	ble.n	402af6 <_vfiprintf_r+0x79e>
  402ab8:	46d6      	mov	lr, sl
  402aba:	2610      	movs	r6, #16
  402abc:	9f06      	ldr	r7, [sp, #24]
  402abe:	f8dd a010 	ldr.w	sl, [sp, #16]
  402ac2:	e006      	b.n	402ad2 <_vfiprintf_r+0x77a>
  402ac4:	1c88      	adds	r0, r1, #2
  402ac6:	f10e 0e08 	add.w	lr, lr, #8
  402aca:	4619      	mov	r1, r3
  402acc:	3c10      	subs	r4, #16
  402ace:	2c10      	cmp	r4, #16
  402ad0:	dd10      	ble.n	402af4 <_vfiprintf_r+0x79c>
  402ad2:	1c4b      	adds	r3, r1, #1
  402ad4:	3210      	adds	r2, #16
  402ad6:	2b07      	cmp	r3, #7
  402ad8:	9211      	str	r2, [sp, #68]	; 0x44
  402ada:	e88e 0060 	stmia.w	lr, {r5, r6}
  402ade:	9310      	str	r3, [sp, #64]	; 0x40
  402ae0:	ddf0      	ble.n	402ac4 <_vfiprintf_r+0x76c>
  402ae2:	2a00      	cmp	r2, #0
  402ae4:	d165      	bne.n	402bb2 <_vfiprintf_r+0x85a>
  402ae6:	3c10      	subs	r4, #16
  402ae8:	2c10      	cmp	r4, #16
  402aea:	f04f 0001 	mov.w	r0, #1
  402aee:	4611      	mov	r1, r2
  402af0:	46ce      	mov	lr, r9
  402af2:	dcee      	bgt.n	402ad2 <_vfiprintf_r+0x77a>
  402af4:	46f2      	mov	sl, lr
  402af6:	4422      	add	r2, r4
  402af8:	2807      	cmp	r0, #7
  402afa:	9211      	str	r2, [sp, #68]	; 0x44
  402afc:	f8ca 5000 	str.w	r5, [sl]
  402b00:	f8ca 4004 	str.w	r4, [sl, #4]
  402b04:	9010      	str	r0, [sp, #64]	; 0x40
  402b06:	f300 8085 	bgt.w	402c14 <_vfiprintf_r+0x8bc>
  402b0a:	f10a 0a08 	add.w	sl, sl, #8
  402b0e:	3001      	adds	r0, #1
  402b10:	9905      	ldr	r1, [sp, #20]
  402b12:	f8ca b000 	str.w	fp, [sl]
  402b16:	440a      	add	r2, r1
  402b18:	2807      	cmp	r0, #7
  402b1a:	9211      	str	r2, [sp, #68]	; 0x44
  402b1c:	f8ca 1004 	str.w	r1, [sl, #4]
  402b20:	9010      	str	r0, [sp, #64]	; 0x40
  402b22:	f340 8082 	ble.w	402c2a <_vfiprintf_r+0x8d2>
  402b26:	2a00      	cmp	r2, #0
  402b28:	f040 8118 	bne.w	402d5c <_vfiprintf_r+0xa04>
  402b2c:	9b02      	ldr	r3, [sp, #8]
  402b2e:	9210      	str	r2, [sp, #64]	; 0x40
  402b30:	0758      	lsls	r0, r3, #29
  402b32:	d535      	bpl.n	402ba0 <_vfiprintf_r+0x848>
  402b34:	9b08      	ldr	r3, [sp, #32]
  402b36:	9901      	ldr	r1, [sp, #4]
  402b38:	1a5c      	subs	r4, r3, r1
  402b3a:	2c00      	cmp	r4, #0
  402b3c:	f340 80e7 	ble.w	402d0e <_vfiprintf_r+0x9b6>
  402b40:	46ca      	mov	sl, r9
  402b42:	2c10      	cmp	r4, #16
  402b44:	f340 8218 	ble.w	402f78 <_vfiprintf_r+0xc20>
  402b48:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b4a:	4e8f      	ldr	r6, [pc, #572]	; (402d88 <_vfiprintf_r+0xa30>)
  402b4c:	9f06      	ldr	r7, [sp, #24]
  402b4e:	f8dd b010 	ldr.w	fp, [sp, #16]
  402b52:	2510      	movs	r5, #16
  402b54:	e006      	b.n	402b64 <_vfiprintf_r+0x80c>
  402b56:	1c88      	adds	r0, r1, #2
  402b58:	f10a 0a08 	add.w	sl, sl, #8
  402b5c:	4619      	mov	r1, r3
  402b5e:	3c10      	subs	r4, #16
  402b60:	2c10      	cmp	r4, #16
  402b62:	dd11      	ble.n	402b88 <_vfiprintf_r+0x830>
  402b64:	1c4b      	adds	r3, r1, #1
  402b66:	3210      	adds	r2, #16
  402b68:	2b07      	cmp	r3, #7
  402b6a:	9211      	str	r2, [sp, #68]	; 0x44
  402b6c:	f8ca 6000 	str.w	r6, [sl]
  402b70:	f8ca 5004 	str.w	r5, [sl, #4]
  402b74:	9310      	str	r3, [sp, #64]	; 0x40
  402b76:	ddee      	ble.n	402b56 <_vfiprintf_r+0x7fe>
  402b78:	bb42      	cbnz	r2, 402bcc <_vfiprintf_r+0x874>
  402b7a:	3c10      	subs	r4, #16
  402b7c:	2c10      	cmp	r4, #16
  402b7e:	f04f 0001 	mov.w	r0, #1
  402b82:	4611      	mov	r1, r2
  402b84:	46ca      	mov	sl, r9
  402b86:	dced      	bgt.n	402b64 <_vfiprintf_r+0x80c>
  402b88:	4422      	add	r2, r4
  402b8a:	2807      	cmp	r0, #7
  402b8c:	9211      	str	r2, [sp, #68]	; 0x44
  402b8e:	f8ca 6000 	str.w	r6, [sl]
  402b92:	f8ca 4004 	str.w	r4, [sl, #4]
  402b96:	9010      	str	r0, [sp, #64]	; 0x40
  402b98:	dd51      	ble.n	402c3e <_vfiprintf_r+0x8e6>
  402b9a:	2a00      	cmp	r2, #0
  402b9c:	f040 819b 	bne.w	402ed6 <_vfiprintf_r+0xb7e>
  402ba0:	9b03      	ldr	r3, [sp, #12]
  402ba2:	9a08      	ldr	r2, [sp, #32]
  402ba4:	9901      	ldr	r1, [sp, #4]
  402ba6:	428a      	cmp	r2, r1
  402ba8:	bfac      	ite	ge
  402baa:	189b      	addge	r3, r3, r2
  402bac:	185b      	addlt	r3, r3, r1
  402bae:	9303      	str	r3, [sp, #12]
  402bb0:	e04e      	b.n	402c50 <_vfiprintf_r+0x8f8>
  402bb2:	aa0f      	add	r2, sp, #60	; 0x3c
  402bb4:	4651      	mov	r1, sl
  402bb6:	4638      	mov	r0, r7
  402bb8:	f7ff fb8e 	bl	4022d8 <__sprint_r.part.0>
  402bbc:	2800      	cmp	r0, #0
  402bbe:	f040 813f 	bne.w	402e40 <_vfiprintf_r+0xae8>
  402bc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  402bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402bc6:	1c48      	adds	r0, r1, #1
  402bc8:	46ce      	mov	lr, r9
  402bca:	e77f      	b.n	402acc <_vfiprintf_r+0x774>
  402bcc:	aa0f      	add	r2, sp, #60	; 0x3c
  402bce:	4659      	mov	r1, fp
  402bd0:	4638      	mov	r0, r7
  402bd2:	f7ff fb81 	bl	4022d8 <__sprint_r.part.0>
  402bd6:	b960      	cbnz	r0, 402bf2 <_vfiprintf_r+0x89a>
  402bd8:	9910      	ldr	r1, [sp, #64]	; 0x40
  402bda:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402bdc:	1c48      	adds	r0, r1, #1
  402bde:	46ca      	mov	sl, r9
  402be0:	e7bd      	b.n	402b5e <_vfiprintf_r+0x806>
  402be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402be4:	f8dd b010 	ldr.w	fp, [sp, #16]
  402be8:	2b00      	cmp	r3, #0
  402bea:	f040 81d4 	bne.w	402f96 <_vfiprintf_r+0xc3e>
  402bee:	2300      	movs	r3, #0
  402bf0:	9310      	str	r3, [sp, #64]	; 0x40
  402bf2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402bf6:	f013 0f01 	tst.w	r3, #1
  402bfa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402bfe:	d102      	bne.n	402c06 <_vfiprintf_r+0x8ae>
  402c00:	059a      	lsls	r2, r3, #22
  402c02:	f140 80de 	bpl.w	402dc2 <_vfiprintf_r+0xa6a>
  402c06:	065b      	lsls	r3, r3, #25
  402c08:	f53f acb2 	bmi.w	402570 <_vfiprintf_r+0x218>
  402c0c:	9803      	ldr	r0, [sp, #12]
  402c0e:	b02d      	add	sp, #180	; 0xb4
  402c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c14:	2a00      	cmp	r2, #0
  402c16:	f040 8106 	bne.w	402e26 <_vfiprintf_r+0xace>
  402c1a:	9a05      	ldr	r2, [sp, #20]
  402c1c:	921d      	str	r2, [sp, #116]	; 0x74
  402c1e:	2301      	movs	r3, #1
  402c20:	9211      	str	r2, [sp, #68]	; 0x44
  402c22:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402c26:	9310      	str	r3, [sp, #64]	; 0x40
  402c28:	46ca      	mov	sl, r9
  402c2a:	f10a 0a08 	add.w	sl, sl, #8
  402c2e:	9b02      	ldr	r3, [sp, #8]
  402c30:	0759      	lsls	r1, r3, #29
  402c32:	d504      	bpl.n	402c3e <_vfiprintf_r+0x8e6>
  402c34:	9b08      	ldr	r3, [sp, #32]
  402c36:	9901      	ldr	r1, [sp, #4]
  402c38:	1a5c      	subs	r4, r3, r1
  402c3a:	2c00      	cmp	r4, #0
  402c3c:	dc81      	bgt.n	402b42 <_vfiprintf_r+0x7ea>
  402c3e:	9b03      	ldr	r3, [sp, #12]
  402c40:	9908      	ldr	r1, [sp, #32]
  402c42:	9801      	ldr	r0, [sp, #4]
  402c44:	4281      	cmp	r1, r0
  402c46:	bfac      	ite	ge
  402c48:	185b      	addge	r3, r3, r1
  402c4a:	181b      	addlt	r3, r3, r0
  402c4c:	9303      	str	r3, [sp, #12]
  402c4e:	bb72      	cbnz	r2, 402cae <_vfiprintf_r+0x956>
  402c50:	2300      	movs	r3, #0
  402c52:	9310      	str	r3, [sp, #64]	; 0x40
  402c54:	46ca      	mov	sl, r9
  402c56:	f7ff bbbc 	b.w	4023d2 <_vfiprintf_r+0x7a>
  402c5a:	aa0f      	add	r2, sp, #60	; 0x3c
  402c5c:	9904      	ldr	r1, [sp, #16]
  402c5e:	4620      	mov	r0, r4
  402c60:	f7ff fb3a 	bl	4022d8 <__sprint_r.part.0>
  402c64:	bb50      	cbnz	r0, 402cbc <_vfiprintf_r+0x964>
  402c66:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c6a:	f101 0e01 	add.w	lr, r1, #1
  402c6e:	46cc      	mov	ip, r9
  402c70:	e548      	b.n	402704 <_vfiprintf_r+0x3ac>
  402c72:	2a00      	cmp	r2, #0
  402c74:	f040 8140 	bne.w	402ef8 <_vfiprintf_r+0xba0>
  402c78:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402c7c:	2900      	cmp	r1, #0
  402c7e:	f000 811b 	beq.w	402eb8 <_vfiprintf_r+0xb60>
  402c82:	2201      	movs	r2, #1
  402c84:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402c88:	4610      	mov	r0, r2
  402c8a:	921d      	str	r2, [sp, #116]	; 0x74
  402c8c:	911c      	str	r1, [sp, #112]	; 0x70
  402c8e:	46ca      	mov	sl, r9
  402c90:	4601      	mov	r1, r0
  402c92:	f10a 0a08 	add.w	sl, sl, #8
  402c96:	3001      	adds	r0, #1
  402c98:	e507      	b.n	4026aa <_vfiprintf_r+0x352>
  402c9a:	9b02      	ldr	r3, [sp, #8]
  402c9c:	2a01      	cmp	r2, #1
  402c9e:	f000 8098 	beq.w	402dd2 <_vfiprintf_r+0xa7a>
  402ca2:	2a02      	cmp	r2, #2
  402ca4:	d10d      	bne.n	402cc2 <_vfiprintf_r+0x96a>
  402ca6:	9302      	str	r3, [sp, #8]
  402ca8:	2600      	movs	r6, #0
  402caa:	2700      	movs	r7, #0
  402cac:	e5b0      	b.n	402810 <_vfiprintf_r+0x4b8>
  402cae:	aa0f      	add	r2, sp, #60	; 0x3c
  402cb0:	9904      	ldr	r1, [sp, #16]
  402cb2:	9806      	ldr	r0, [sp, #24]
  402cb4:	f7ff fb10 	bl	4022d8 <__sprint_r.part.0>
  402cb8:	2800      	cmp	r0, #0
  402cba:	d0c9      	beq.n	402c50 <_vfiprintf_r+0x8f8>
  402cbc:	f8dd b010 	ldr.w	fp, [sp, #16]
  402cc0:	e797      	b.n	402bf2 <_vfiprintf_r+0x89a>
  402cc2:	9302      	str	r3, [sp, #8]
  402cc4:	2600      	movs	r6, #0
  402cc6:	2700      	movs	r7, #0
  402cc8:	4649      	mov	r1, r9
  402cca:	e000      	b.n	402cce <_vfiprintf_r+0x976>
  402ccc:	4659      	mov	r1, fp
  402cce:	08f2      	lsrs	r2, r6, #3
  402cd0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402cd4:	08f8      	lsrs	r0, r7, #3
  402cd6:	f006 0307 	and.w	r3, r6, #7
  402cda:	4607      	mov	r7, r0
  402cdc:	4616      	mov	r6, r2
  402cde:	3330      	adds	r3, #48	; 0x30
  402ce0:	ea56 0207 	orrs.w	r2, r6, r7
  402ce4:	f801 3c01 	strb.w	r3, [r1, #-1]
  402ce8:	f101 3bff 	add.w	fp, r1, #4294967295
  402cec:	d1ee      	bne.n	402ccc <_vfiprintf_r+0x974>
  402cee:	9a02      	ldr	r2, [sp, #8]
  402cf0:	07d6      	lsls	r6, r2, #31
  402cf2:	f57f ad9d 	bpl.w	402830 <_vfiprintf_r+0x4d8>
  402cf6:	2b30      	cmp	r3, #48	; 0x30
  402cf8:	f43f ad9a 	beq.w	402830 <_vfiprintf_r+0x4d8>
  402cfc:	3902      	subs	r1, #2
  402cfe:	2330      	movs	r3, #48	; 0x30
  402d00:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402d04:	eba9 0301 	sub.w	r3, r9, r1
  402d08:	9305      	str	r3, [sp, #20]
  402d0a:	468b      	mov	fp, r1
  402d0c:	e476      	b.n	4025fc <_vfiprintf_r+0x2a4>
  402d0e:	9b03      	ldr	r3, [sp, #12]
  402d10:	9a08      	ldr	r2, [sp, #32]
  402d12:	428a      	cmp	r2, r1
  402d14:	bfac      	ite	ge
  402d16:	189b      	addge	r3, r3, r2
  402d18:	185b      	addlt	r3, r3, r1
  402d1a:	9303      	str	r3, [sp, #12]
  402d1c:	e798      	b.n	402c50 <_vfiprintf_r+0x8f8>
  402d1e:	2202      	movs	r2, #2
  402d20:	e44d      	b.n	4025be <_vfiprintf_r+0x266>
  402d22:	2f00      	cmp	r7, #0
  402d24:	bf08      	it	eq
  402d26:	2e0a      	cmpeq	r6, #10
  402d28:	d352      	bcc.n	402dd0 <_vfiprintf_r+0xa78>
  402d2a:	46cb      	mov	fp, r9
  402d2c:	4630      	mov	r0, r6
  402d2e:	4639      	mov	r1, r7
  402d30:	220a      	movs	r2, #10
  402d32:	2300      	movs	r3, #0
  402d34:	f7fe ffda 	bl	401cec <__aeabi_uldivmod>
  402d38:	3230      	adds	r2, #48	; 0x30
  402d3a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402d3e:	4630      	mov	r0, r6
  402d40:	4639      	mov	r1, r7
  402d42:	2300      	movs	r3, #0
  402d44:	220a      	movs	r2, #10
  402d46:	f7fe ffd1 	bl	401cec <__aeabi_uldivmod>
  402d4a:	4606      	mov	r6, r0
  402d4c:	460f      	mov	r7, r1
  402d4e:	ea56 0307 	orrs.w	r3, r6, r7
  402d52:	d1eb      	bne.n	402d2c <_vfiprintf_r+0x9d4>
  402d54:	e56c      	b.n	402830 <_vfiprintf_r+0x4d8>
  402d56:	9405      	str	r4, [sp, #20]
  402d58:	46cb      	mov	fp, r9
  402d5a:	e44f      	b.n	4025fc <_vfiprintf_r+0x2a4>
  402d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  402d5e:	9904      	ldr	r1, [sp, #16]
  402d60:	9806      	ldr	r0, [sp, #24]
  402d62:	f7ff fab9 	bl	4022d8 <__sprint_r.part.0>
  402d66:	2800      	cmp	r0, #0
  402d68:	d1a8      	bne.n	402cbc <_vfiprintf_r+0x964>
  402d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d6c:	46ca      	mov	sl, r9
  402d6e:	e75e      	b.n	402c2e <_vfiprintf_r+0x8d6>
  402d70:	aa0f      	add	r2, sp, #60	; 0x3c
  402d72:	9904      	ldr	r1, [sp, #16]
  402d74:	9806      	ldr	r0, [sp, #24]
  402d76:	f7ff faaf 	bl	4022d8 <__sprint_r.part.0>
  402d7a:	2800      	cmp	r0, #0
  402d7c:	d19e      	bne.n	402cbc <_vfiprintf_r+0x964>
  402d7e:	46ca      	mov	sl, r9
  402d80:	f7ff bbc0 	b.w	402504 <_vfiprintf_r+0x1ac>
  402d84:	00406a44 	.word	0x00406a44
  402d88:	00406a34 	.word	0x00406a34
  402d8c:	3104      	adds	r1, #4
  402d8e:	6816      	ldr	r6, [r2, #0]
  402d90:	9107      	str	r1, [sp, #28]
  402d92:	2201      	movs	r2, #1
  402d94:	2700      	movs	r7, #0
  402d96:	e412      	b.n	4025be <_vfiprintf_r+0x266>
  402d98:	9807      	ldr	r0, [sp, #28]
  402d9a:	4601      	mov	r1, r0
  402d9c:	3104      	adds	r1, #4
  402d9e:	6806      	ldr	r6, [r0, #0]
  402da0:	9107      	str	r1, [sp, #28]
  402da2:	2700      	movs	r7, #0
  402da4:	e40b      	b.n	4025be <_vfiprintf_r+0x266>
  402da6:	680e      	ldr	r6, [r1, #0]
  402da8:	3104      	adds	r1, #4
  402daa:	9107      	str	r1, [sp, #28]
  402dac:	2700      	movs	r7, #0
  402dae:	e591      	b.n	4028d4 <_vfiprintf_r+0x57c>
  402db0:	9907      	ldr	r1, [sp, #28]
  402db2:	680e      	ldr	r6, [r1, #0]
  402db4:	460a      	mov	r2, r1
  402db6:	17f7      	asrs	r7, r6, #31
  402db8:	3204      	adds	r2, #4
  402dba:	9207      	str	r2, [sp, #28]
  402dbc:	4630      	mov	r0, r6
  402dbe:	4639      	mov	r1, r7
  402dc0:	e50f      	b.n	4027e2 <_vfiprintf_r+0x48a>
  402dc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402dc6:	f001 fcc3 	bl	404750 <__retarget_lock_release_recursive>
  402dca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402dce:	e71a      	b.n	402c06 <_vfiprintf_r+0x8ae>
  402dd0:	9b02      	ldr	r3, [sp, #8]
  402dd2:	9302      	str	r3, [sp, #8]
  402dd4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402dd8:	3630      	adds	r6, #48	; 0x30
  402dda:	2301      	movs	r3, #1
  402ddc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402de0:	9305      	str	r3, [sp, #20]
  402de2:	e40b      	b.n	4025fc <_vfiprintf_r+0x2a4>
  402de4:	aa0f      	add	r2, sp, #60	; 0x3c
  402de6:	9904      	ldr	r1, [sp, #16]
  402de8:	9806      	ldr	r0, [sp, #24]
  402dea:	f7ff fa75 	bl	4022d8 <__sprint_r.part.0>
  402dee:	2800      	cmp	r0, #0
  402df0:	f47f af64 	bne.w	402cbc <_vfiprintf_r+0x964>
  402df4:	9910      	ldr	r1, [sp, #64]	; 0x40
  402df6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402df8:	1c48      	adds	r0, r1, #1
  402dfa:	46ca      	mov	sl, r9
  402dfc:	e651      	b.n	402aa2 <_vfiprintf_r+0x74a>
  402dfe:	aa0f      	add	r2, sp, #60	; 0x3c
  402e00:	9904      	ldr	r1, [sp, #16]
  402e02:	9806      	ldr	r0, [sp, #24]
  402e04:	f7ff fa68 	bl	4022d8 <__sprint_r.part.0>
  402e08:	2800      	cmp	r0, #0
  402e0a:	f47f af57 	bne.w	402cbc <_vfiprintf_r+0x964>
  402e0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e12:	1c48      	adds	r0, r1, #1
  402e14:	46ca      	mov	sl, r9
  402e16:	e448      	b.n	4026aa <_vfiprintf_r+0x352>
  402e18:	2a00      	cmp	r2, #0
  402e1a:	f040 8091 	bne.w	402f40 <_vfiprintf_r+0xbe8>
  402e1e:	2001      	movs	r0, #1
  402e20:	4611      	mov	r1, r2
  402e22:	46ca      	mov	sl, r9
  402e24:	e641      	b.n	402aaa <_vfiprintf_r+0x752>
  402e26:	aa0f      	add	r2, sp, #60	; 0x3c
  402e28:	9904      	ldr	r1, [sp, #16]
  402e2a:	9806      	ldr	r0, [sp, #24]
  402e2c:	f7ff fa54 	bl	4022d8 <__sprint_r.part.0>
  402e30:	2800      	cmp	r0, #0
  402e32:	f47f af43 	bne.w	402cbc <_vfiprintf_r+0x964>
  402e36:	9810      	ldr	r0, [sp, #64]	; 0x40
  402e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402e3a:	3001      	adds	r0, #1
  402e3c:	46ca      	mov	sl, r9
  402e3e:	e667      	b.n	402b10 <_vfiprintf_r+0x7b8>
  402e40:	46d3      	mov	fp, sl
  402e42:	e6d6      	b.n	402bf2 <_vfiprintf_r+0x89a>
  402e44:	9e07      	ldr	r6, [sp, #28]
  402e46:	3607      	adds	r6, #7
  402e48:	f026 0207 	bic.w	r2, r6, #7
  402e4c:	f102 0108 	add.w	r1, r2, #8
  402e50:	e9d2 6700 	ldrd	r6, r7, [r2]
  402e54:	9107      	str	r1, [sp, #28]
  402e56:	2201      	movs	r2, #1
  402e58:	f7ff bbb1 	b.w	4025be <_vfiprintf_r+0x266>
  402e5c:	9e07      	ldr	r6, [sp, #28]
  402e5e:	3607      	adds	r6, #7
  402e60:	f026 0607 	bic.w	r6, r6, #7
  402e64:	e9d6 0100 	ldrd	r0, r1, [r6]
  402e68:	f106 0208 	add.w	r2, r6, #8
  402e6c:	9207      	str	r2, [sp, #28]
  402e6e:	4606      	mov	r6, r0
  402e70:	460f      	mov	r7, r1
  402e72:	e4b6      	b.n	4027e2 <_vfiprintf_r+0x48a>
  402e74:	9e07      	ldr	r6, [sp, #28]
  402e76:	3607      	adds	r6, #7
  402e78:	f026 0207 	bic.w	r2, r6, #7
  402e7c:	f102 0108 	add.w	r1, r2, #8
  402e80:	e9d2 6700 	ldrd	r6, r7, [r2]
  402e84:	9107      	str	r1, [sp, #28]
  402e86:	2200      	movs	r2, #0
  402e88:	f7ff bb99 	b.w	4025be <_vfiprintf_r+0x266>
  402e8c:	9e07      	ldr	r6, [sp, #28]
  402e8e:	3607      	adds	r6, #7
  402e90:	f026 0107 	bic.w	r1, r6, #7
  402e94:	f101 0008 	add.w	r0, r1, #8
  402e98:	9007      	str	r0, [sp, #28]
  402e9a:	e9d1 6700 	ldrd	r6, r7, [r1]
  402e9e:	e519      	b.n	4028d4 <_vfiprintf_r+0x57c>
  402ea0:	46cb      	mov	fp, r9
  402ea2:	f7ff bbab 	b.w	4025fc <_vfiprintf_r+0x2a4>
  402ea6:	252d      	movs	r5, #45	; 0x2d
  402ea8:	4276      	negs	r6, r6
  402eaa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402eae:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402eb2:	2201      	movs	r2, #1
  402eb4:	f7ff bb88 	b.w	4025c8 <_vfiprintf_r+0x270>
  402eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402eba:	b9b3      	cbnz	r3, 402eea <_vfiprintf_r+0xb92>
  402ebc:	4611      	mov	r1, r2
  402ebe:	2001      	movs	r0, #1
  402ec0:	46ca      	mov	sl, r9
  402ec2:	e5f2      	b.n	402aaa <_vfiprintf_r+0x752>
  402ec4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402ec8:	f001 fc42 	bl	404750 <__retarget_lock_release_recursive>
  402ecc:	f04f 33ff 	mov.w	r3, #4294967295
  402ed0:	9303      	str	r3, [sp, #12]
  402ed2:	f7ff bb50 	b.w	402576 <_vfiprintf_r+0x21e>
  402ed6:	aa0f      	add	r2, sp, #60	; 0x3c
  402ed8:	9904      	ldr	r1, [sp, #16]
  402eda:	9806      	ldr	r0, [sp, #24]
  402edc:	f7ff f9fc 	bl	4022d8 <__sprint_r.part.0>
  402ee0:	2800      	cmp	r0, #0
  402ee2:	f47f aeeb 	bne.w	402cbc <_vfiprintf_r+0x964>
  402ee6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402ee8:	e6a9      	b.n	402c3e <_vfiprintf_r+0x8e6>
  402eea:	ab0e      	add	r3, sp, #56	; 0x38
  402eec:	2202      	movs	r2, #2
  402eee:	931c      	str	r3, [sp, #112]	; 0x70
  402ef0:	921d      	str	r2, [sp, #116]	; 0x74
  402ef2:	2001      	movs	r0, #1
  402ef4:	46ca      	mov	sl, r9
  402ef6:	e5d0      	b.n	402a9a <_vfiprintf_r+0x742>
  402ef8:	aa0f      	add	r2, sp, #60	; 0x3c
  402efa:	9904      	ldr	r1, [sp, #16]
  402efc:	9806      	ldr	r0, [sp, #24]
  402efe:	f7ff f9eb 	bl	4022d8 <__sprint_r.part.0>
  402f02:	2800      	cmp	r0, #0
  402f04:	f47f aeda 	bne.w	402cbc <_vfiprintf_r+0x964>
  402f08:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f0c:	1c48      	adds	r0, r1, #1
  402f0e:	46ca      	mov	sl, r9
  402f10:	e5a4      	b.n	402a5c <_vfiprintf_r+0x704>
  402f12:	9a07      	ldr	r2, [sp, #28]
  402f14:	9903      	ldr	r1, [sp, #12]
  402f16:	6813      	ldr	r3, [r2, #0]
  402f18:	17cd      	asrs	r5, r1, #31
  402f1a:	4608      	mov	r0, r1
  402f1c:	3204      	adds	r2, #4
  402f1e:	4629      	mov	r1, r5
  402f20:	9207      	str	r2, [sp, #28]
  402f22:	e9c3 0100 	strd	r0, r1, [r3]
  402f26:	f7ff ba54 	b.w	4023d2 <_vfiprintf_r+0x7a>
  402f2a:	4658      	mov	r0, fp
  402f2c:	9607      	str	r6, [sp, #28]
  402f2e:	9302      	str	r3, [sp, #8]
  402f30:	f002 fbc6 	bl	4056c0 <strlen>
  402f34:	2400      	movs	r4, #0
  402f36:	9005      	str	r0, [sp, #20]
  402f38:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f3c:	f7ff bb5e 	b.w	4025fc <_vfiprintf_r+0x2a4>
  402f40:	aa0f      	add	r2, sp, #60	; 0x3c
  402f42:	9904      	ldr	r1, [sp, #16]
  402f44:	9806      	ldr	r0, [sp, #24]
  402f46:	f7ff f9c7 	bl	4022d8 <__sprint_r.part.0>
  402f4a:	2800      	cmp	r0, #0
  402f4c:	f47f aeb6 	bne.w	402cbc <_vfiprintf_r+0x964>
  402f50:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f52:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f54:	1c48      	adds	r0, r1, #1
  402f56:	46ca      	mov	sl, r9
  402f58:	e5a7      	b.n	402aaa <_vfiprintf_r+0x752>
  402f5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  402f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402f5e:	4e20      	ldr	r6, [pc, #128]	; (402fe0 <_vfiprintf_r+0xc88>)
  402f60:	3101      	adds	r1, #1
  402f62:	f7ff bb90 	b.w	402686 <_vfiprintf_r+0x32e>
  402f66:	2c06      	cmp	r4, #6
  402f68:	bf28      	it	cs
  402f6a:	2406      	movcs	r4, #6
  402f6c:	9405      	str	r4, [sp, #20]
  402f6e:	9607      	str	r6, [sp, #28]
  402f70:	9401      	str	r4, [sp, #4]
  402f72:	f8df b070 	ldr.w	fp, [pc, #112]	; 402fe4 <_vfiprintf_r+0xc8c>
  402f76:	e4d5      	b.n	402924 <_vfiprintf_r+0x5cc>
  402f78:	9810      	ldr	r0, [sp, #64]	; 0x40
  402f7a:	4e19      	ldr	r6, [pc, #100]	; (402fe0 <_vfiprintf_r+0xc88>)
  402f7c:	3001      	adds	r0, #1
  402f7e:	e603      	b.n	402b88 <_vfiprintf_r+0x830>
  402f80:	9405      	str	r4, [sp, #20]
  402f82:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f86:	9607      	str	r6, [sp, #28]
  402f88:	9302      	str	r3, [sp, #8]
  402f8a:	4604      	mov	r4, r0
  402f8c:	f7ff bb36 	b.w	4025fc <_vfiprintf_r+0x2a4>
  402f90:	4686      	mov	lr, r0
  402f92:	f7ff bbce 	b.w	402732 <_vfiprintf_r+0x3da>
  402f96:	9806      	ldr	r0, [sp, #24]
  402f98:	aa0f      	add	r2, sp, #60	; 0x3c
  402f9a:	4659      	mov	r1, fp
  402f9c:	f7ff f99c 	bl	4022d8 <__sprint_r.part.0>
  402fa0:	2800      	cmp	r0, #0
  402fa2:	f43f ae24 	beq.w	402bee <_vfiprintf_r+0x896>
  402fa6:	e624      	b.n	402bf2 <_vfiprintf_r+0x89a>
  402fa8:	9907      	ldr	r1, [sp, #28]
  402faa:	f898 2001 	ldrb.w	r2, [r8, #1]
  402fae:	680c      	ldr	r4, [r1, #0]
  402fb0:	3104      	adds	r1, #4
  402fb2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402fb6:	46b8      	mov	r8, r7
  402fb8:	9107      	str	r1, [sp, #28]
  402fba:	f7ff ba3f 	b.w	40243c <_vfiprintf_r+0xe4>
  402fbe:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fc2:	e43c      	b.n	40283e <_vfiprintf_r+0x4e6>
  402fc4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fc8:	e521      	b.n	402a0e <_vfiprintf_r+0x6b6>
  402fca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fce:	f7ff bbf4 	b.w	4027ba <_vfiprintf_r+0x462>
  402fd2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fd6:	e491      	b.n	4028fc <_vfiprintf_r+0x5a4>
  402fd8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fdc:	e469      	b.n	4028b2 <_vfiprintf_r+0x55a>
  402fde:	bf00      	nop
  402fe0:	00406a34 	.word	0x00406a34
  402fe4:	00406a2c 	.word	0x00406a2c

00402fe8 <__sbprintf>:
  402fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fec:	460c      	mov	r4, r1
  402fee:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402ff2:	8989      	ldrh	r1, [r1, #12]
  402ff4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402ff6:	89e5      	ldrh	r5, [r4, #14]
  402ff8:	9619      	str	r6, [sp, #100]	; 0x64
  402ffa:	f021 0102 	bic.w	r1, r1, #2
  402ffe:	4606      	mov	r6, r0
  403000:	69e0      	ldr	r0, [r4, #28]
  403002:	f8ad 100c 	strh.w	r1, [sp, #12]
  403006:	4617      	mov	r7, r2
  403008:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40300c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40300e:	f8ad 500e 	strh.w	r5, [sp, #14]
  403012:	4698      	mov	r8, r3
  403014:	ad1a      	add	r5, sp, #104	; 0x68
  403016:	2300      	movs	r3, #0
  403018:	9007      	str	r0, [sp, #28]
  40301a:	a816      	add	r0, sp, #88	; 0x58
  40301c:	9209      	str	r2, [sp, #36]	; 0x24
  40301e:	9306      	str	r3, [sp, #24]
  403020:	9500      	str	r5, [sp, #0]
  403022:	9504      	str	r5, [sp, #16]
  403024:	9102      	str	r1, [sp, #8]
  403026:	9105      	str	r1, [sp, #20]
  403028:	f001 fb8c 	bl	404744 <__retarget_lock_init_recursive>
  40302c:	4643      	mov	r3, r8
  40302e:	463a      	mov	r2, r7
  403030:	4669      	mov	r1, sp
  403032:	4630      	mov	r0, r6
  403034:	f7ff f990 	bl	402358 <_vfiprintf_r>
  403038:	1e05      	subs	r5, r0, #0
  40303a:	db07      	blt.n	40304c <__sbprintf+0x64>
  40303c:	4630      	mov	r0, r6
  40303e:	4669      	mov	r1, sp
  403040:	f000 fe32 	bl	403ca8 <_fflush_r>
  403044:	2800      	cmp	r0, #0
  403046:	bf18      	it	ne
  403048:	f04f 35ff 	movne.w	r5, #4294967295
  40304c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403050:	065b      	lsls	r3, r3, #25
  403052:	d503      	bpl.n	40305c <__sbprintf+0x74>
  403054:	89a3      	ldrh	r3, [r4, #12]
  403056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40305a:	81a3      	strh	r3, [r4, #12]
  40305c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40305e:	f001 fb73 	bl	404748 <__retarget_lock_close_recursive>
  403062:	4628      	mov	r0, r5
  403064:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040306c <__svfiscanf_r>:
  40306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403070:	468b      	mov	fp, r1
  403072:	b0d9      	sub	sp, #356	; 0x164
  403074:	6e49      	ldr	r1, [r1, #100]	; 0x64
  403076:	9306      	str	r3, [sp, #24]
  403078:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  40307c:	f011 0f01 	tst.w	r1, #1
  403080:	4607      	mov	r7, r0
  403082:	b299      	uxth	r1, r3
  403084:	d102      	bne.n	40308c <__svfiscanf_r+0x20>
  403086:	058c      	lsls	r4, r1, #22
  403088:	f140 83e5 	bpl.w	403856 <__svfiscanf_r+0x7ea>
  40308c:	0488      	lsls	r0, r1, #18
  40308e:	d409      	bmi.n	4030a4 <__svfiscanf_r+0x38>
  403090:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
  403094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403098:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40309c:	f8ab 300c 	strh.w	r3, [fp, #12]
  4030a0:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
  4030a4:	4614      	mov	r4, r2
  4030a6:	4626      	mov	r6, r4
  4030a8:	2300      	movs	r3, #0
  4030aa:	9307      	str	r3, [sp, #28]
  4030ac:	9304      	str	r3, [sp, #16]
  4030ae:	469a      	mov	sl, r3
  4030b0:	9305      	str	r3, [sp, #20]
  4030b2:	f816 3b01 	ldrb.w	r3, [r6], #1
  4030b6:	930b      	str	r3, [sp, #44]	; 0x2c
  4030b8:	b363      	cbz	r3, 403114 <__svfiscanf_r+0xa8>
  4030ba:	f001 fb35 	bl	404728 <__locale_ctype_ptr>
  4030be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4030c0:	4418      	add	r0, r3
  4030c2:	7845      	ldrb	r5, [r0, #1]
  4030c4:	f015 0508 	ands.w	r5, r5, #8
  4030c8:	d033      	beq.n	403132 <__svfiscanf_r+0xc6>
  4030ca:	f8db 2004 	ldr.w	r2, [fp, #4]
  4030ce:	e012      	b.n	4030f6 <__svfiscanf_r+0x8a>
  4030d0:	f001 fb2a 	bl	404728 <__locale_ctype_ptr>
  4030d4:	f8db 3000 	ldr.w	r3, [fp]
  4030d8:	781a      	ldrb	r2, [r3, #0]
  4030da:	4410      	add	r0, r2
  4030dc:	3301      	adds	r3, #1
  4030de:	7842      	ldrb	r2, [r0, #1]
  4030e0:	0711      	lsls	r1, r2, #28
  4030e2:	d510      	bpl.n	403106 <__svfiscanf_r+0x9a>
  4030e4:	f8db 2004 	ldr.w	r2, [fp, #4]
  4030e8:	f8cb 3000 	str.w	r3, [fp]
  4030ec:	3a01      	subs	r2, #1
  4030ee:	f10a 0a01 	add.w	sl, sl, #1
  4030f2:	f8cb 2004 	str.w	r2, [fp, #4]
  4030f6:	2a00      	cmp	r2, #0
  4030f8:	dcea      	bgt.n	4030d0 <__svfiscanf_r+0x64>
  4030fa:	4659      	mov	r1, fp
  4030fc:	4638      	mov	r0, r7
  4030fe:	f002 f9a9 	bl	405454 <__srefill_r>
  403102:	2800      	cmp	r0, #0
  403104:	d0e4      	beq.n	4030d0 <__svfiscanf_r+0x64>
  403106:	4634      	mov	r4, r6
  403108:	4626      	mov	r6, r4
  40310a:	f816 3b01 	ldrb.w	r3, [r6], #1
  40310e:	930b      	str	r3, [sp, #44]	; 0x2c
  403110:	2b00      	cmp	r3, #0
  403112:	d1d2      	bne.n	4030ba <__svfiscanf_r+0x4e>
  403114:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403118:	07da      	lsls	r2, r3, #31
  40311a:	f100 81a7 	bmi.w	40346c <__svfiscanf_r+0x400>
  40311e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403122:	059b      	lsls	r3, r3, #22
  403124:	f100 81a2 	bmi.w	40346c <__svfiscanf_r+0x400>
  403128:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40312c:	f001 fb10 	bl	404750 <__retarget_lock_release_recursive>
  403130:	e19c      	b.n	40346c <__svfiscanf_r+0x400>
  403132:	2b25      	cmp	r3, #37	; 0x25
  403134:	f040 8084 	bne.w	403240 <__svfiscanf_r+0x1d4>
  403138:	f894 8001 	ldrb.w	r8, [r4, #1]
  40313c:	462c      	mov	r4, r5
  40313e:	1c73      	adds	r3, r6, #1
  403140:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
  403144:	f200 8196 	bhi.w	403474 <__svfiscanf_r+0x408>
  403148:	e8df f018 	tbh	[pc, r8, lsl #1]
  40314c:	01940184 	.word	0x01940184
  403150:	01940194 	.word	0x01940194
  403154:	01940194 	.word	0x01940194
  403158:	01940194 	.word	0x01940194
  40315c:	01940194 	.word	0x01940194
  403160:	01940194 	.word	0x01940194
  403164:	01940194 	.word	0x01940194
  403168:	01940194 	.word	0x01940194
  40316c:	01940194 	.word	0x01940194
  403170:	01940194 	.word	0x01940194
  403174:	01940194 	.word	0x01940194
  403178:	01940194 	.word	0x01940194
  40317c:	01940194 	.word	0x01940194
  403180:	01940194 	.word	0x01940194
  403184:	01940194 	.word	0x01940194
  403188:	01940194 	.word	0x01940194
  40318c:	01940194 	.word	0x01940194
  403190:	01940194 	.word	0x01940194
  403194:	00790194 	.word	0x00790194
  403198:	01940194 	.word	0x01940194
  40319c:	01940194 	.word	0x01940194
  4031a0:	0194017e 	.word	0x0194017e
  4031a4:	01940194 	.word	0x01940194
  4031a8:	01940194 	.word	0x01940194
  4031ac:	01750175 	.word	0x01750175
  4031b0:	01750175 	.word	0x01750175
  4031b4:	01750175 	.word	0x01750175
  4031b8:	01750175 	.word	0x01750175
  4031bc:	01750175 	.word	0x01750175
  4031c0:	01940194 	.word	0x01940194
  4031c4:	01940194 	.word	0x01940194
  4031c8:	01940194 	.word	0x01940194
  4031cc:	01940194 	.word	0x01940194
  4031d0:	01940194 	.word	0x01940194
  4031d4:	01940171 	.word	0x01940171
  4031d8:	01940194 	.word	0x01940194
  4031dc:	01940194 	.word	0x01940194
  4031e0:	01940194 	.word	0x01940194
  4031e4:	0194016b 	.word	0x0194016b
  4031e8:	01310194 	.word	0x01310194
  4031ec:	01940194 	.word	0x01940194
  4031f0:	01940194 	.word	0x01940194
  4031f4:	01940194 	.word	0x01940194
  4031f8:	01940194 	.word	0x01940194
  4031fc:	01940128 	.word	0x01940128
  403200:	011f0194 	.word	0x011f0194
  403204:	01940194 	.word	0x01940194
  403208:	01940194 	.word	0x01940194
  40320c:	01940194 	.word	0x01940194
  403210:	011a0194 	.word	0x011a0194
  403214:	01940108 	.word	0x01940108
  403218:	01940194 	.word	0x01940194
  40321c:	00930102 	.word	0x00930102
  403220:	01940194 	.word	0x01940194
  403224:	01940161 	.word	0x01940161
  403228:	0148014a 	.word	0x0148014a
  40322c:	01940144 	.word	0x01940144
  403230:	01410194 	.word	0x01410194
  403234:	013a0194 	.word	0x013a0194
  403238:	01940194 	.word	0x01940194
  40323c:	0128      	.short	0x0128
  40323e:	461e      	mov	r6, r3
  403240:	f8db 3004 	ldr.w	r3, [fp, #4]
  403244:	2b00      	cmp	r3, #0
  403246:	f340 8392 	ble.w	40396e <__svfiscanf_r+0x902>
  40324a:	f8db 3000 	ldr.w	r3, [fp]
  40324e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  403252:	7819      	ldrb	r1, [r3, #0]
  403254:	4291      	cmp	r1, r2
  403256:	f47f af5d 	bne.w	403114 <__svfiscanf_r+0xa8>
  40325a:	f8db 2004 	ldr.w	r2, [fp, #4]
  40325e:	3301      	adds	r3, #1
  403260:	3a01      	subs	r2, #1
  403262:	f8cb 3000 	str.w	r3, [fp]
  403266:	f10a 0a01 	add.w	sl, sl, #1
  40326a:	f8cb 2004 	str.w	r2, [fp, #4]
  40326e:	4634      	mov	r4, r6
  403270:	e74a      	b.n	403108 <__svfiscanf_r+0x9c>
  403272:	9303      	str	r3, [sp, #12]
  403274:	4bb2      	ldr	r3, [pc, #712]	; (403540 <__svfiscanf_r+0x4d4>)
  403276:	9307      	str	r3, [sp, #28]
  403278:	2300      	movs	r3, #0
  40327a:	9304      	str	r3, [sp, #16]
  40327c:	2603      	movs	r6, #3
  40327e:	f8db 3004 	ldr.w	r3, [fp, #4]
  403282:	2b00      	cmp	r3, #0
  403284:	dd75      	ble.n	403372 <__svfiscanf_r+0x306>
  403286:	0669      	lsls	r1, r5, #25
  403288:	d533      	bpl.n	4032f2 <__svfiscanf_r+0x286>
  40328a:	2e02      	cmp	r6, #2
  40328c:	f000 820d 	beq.w	4036aa <__svfiscanf_r+0x63e>
  403290:	2e03      	cmp	r6, #3
  403292:	f000 8159 	beq.w	403548 <__svfiscanf_r+0x4dc>
  403296:	2e01      	cmp	r6, #1
  403298:	f000 8120 	beq.w	4034dc <__svfiscanf_r+0x470>
  40329c:	2c00      	cmp	r4, #0
  40329e:	bf08      	it	eq
  4032a0:	2401      	moveq	r4, #1
  4032a2:	f015 0301 	ands.w	r3, r5, #1
  4032a6:	f040 825d 	bne.w	403764 <__svfiscanf_r+0x6f8>
  4032aa:	06ed      	lsls	r5, r5, #27
  4032ac:	f140 830b 	bpl.w	4038c6 <__svfiscanf_r+0x85a>
  4032b0:	461d      	mov	r5, r3
  4032b2:	e009      	b.n	4032c8 <__svfiscanf_r+0x25c>
  4032b4:	4413      	add	r3, r2
  4032b6:	f8cb 3000 	str.w	r3, [fp]
  4032ba:	4415      	add	r5, r2
  4032bc:	1aa4      	subs	r4, r4, r2
  4032be:	f002 f8c9 	bl	405454 <__srefill_r>
  4032c2:	2800      	cmp	r0, #0
  4032c4:	f040 82fb 	bne.w	4038be <__svfiscanf_r+0x852>
  4032c8:	f8db 2004 	ldr.w	r2, [fp, #4]
  4032cc:	f8db 3000 	ldr.w	r3, [fp]
  4032d0:	42a2      	cmp	r2, r4
  4032d2:	4659      	mov	r1, fp
  4032d4:	4638      	mov	r0, r7
  4032d6:	dbed      	blt.n	4032b4 <__svfiscanf_r+0x248>
  4032d8:	1b12      	subs	r2, r2, r4
  4032da:	4423      	add	r3, r4
  4032dc:	f8cb 2004 	str.w	r2, [fp, #4]
  4032e0:	4425      	add	r5, r4
  4032e2:	f8cb 3000 	str.w	r3, [fp]
  4032e6:	9e03      	ldr	r6, [sp, #12]
  4032e8:	44aa      	add	sl, r5
  4032ea:	4634      	mov	r4, r6
  4032ec:	e70c      	b.n	403108 <__svfiscanf_r+0x9c>
  4032ee:	f8cb 3000 	str.w	r3, [fp]
  4032f2:	f001 fa19 	bl	404728 <__locale_ctype_ptr>
  4032f6:	f8db 3000 	ldr.w	r3, [fp]
  4032fa:	781a      	ldrb	r2, [r3, #0]
  4032fc:	4410      	add	r0, r2
  4032fe:	3301      	adds	r3, #1
  403300:	7842      	ldrb	r2, [r0, #1]
  403302:	0712      	lsls	r2, r2, #28
  403304:	d5c1      	bpl.n	40328a <__svfiscanf_r+0x21e>
  403306:	f8db 2004 	ldr.w	r2, [fp, #4]
  40330a:	3a01      	subs	r2, #1
  40330c:	2a00      	cmp	r2, #0
  40330e:	f10a 0a01 	add.w	sl, sl, #1
  403312:	f8cb 2004 	str.w	r2, [fp, #4]
  403316:	dcea      	bgt.n	4032ee <__svfiscanf_r+0x282>
  403318:	4659      	mov	r1, fp
  40331a:	4638      	mov	r0, r7
  40331c:	f002 f89a 	bl	405454 <__srefill_r>
  403320:	2800      	cmp	r0, #0
  403322:	d0e6      	beq.n	4032f2 <__svfiscanf_r+0x286>
  403324:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403328:	07dc      	lsls	r4, r3, #31
  40332a:	d404      	bmi.n	403336 <__svfiscanf_r+0x2ca>
  40332c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403330:	0598      	lsls	r0, r3, #22
  403332:	f140 82b0 	bpl.w	403896 <__svfiscanf_r+0x82a>
  403336:	9b05      	ldr	r3, [sp, #20]
  403338:	2b00      	cmp	r3, #0
  40333a:	f000 8094 	beq.w	403466 <__svfiscanf_r+0x3fa>
  40333e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403342:	0659      	lsls	r1, r3, #25
  403344:	f100 808f 	bmi.w	403466 <__svfiscanf_r+0x3fa>
  403348:	9805      	ldr	r0, [sp, #20]
  40334a:	b059      	add	sp, #356	; 0x164
  40334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403350:	f896 8001 	ldrb.w	r8, [r6, #1]
  403354:	f045 0504 	orr.w	r5, r5, #4
  403358:	461e      	mov	r6, r3
  40335a:	e6f0      	b.n	40313e <__svfiscanf_r+0xd2>
  40335c:	9303      	str	r3, [sp, #12]
  40335e:	4b78      	ldr	r3, [pc, #480]	; (403540 <__svfiscanf_r+0x4d4>)
  403360:	9307      	str	r3, [sp, #28]
  403362:	230a      	movs	r3, #10
  403364:	9304      	str	r3, [sp, #16]
  403366:	f8db 3004 	ldr.w	r3, [fp, #4]
  40336a:	2b00      	cmp	r3, #0
  40336c:	f04f 0603 	mov.w	r6, #3
  403370:	dc89      	bgt.n	403286 <__svfiscanf_r+0x21a>
  403372:	4659      	mov	r1, fp
  403374:	4638      	mov	r0, r7
  403376:	f002 f86d 	bl	405454 <__srefill_r>
  40337a:	2800      	cmp	r0, #0
  40337c:	d083      	beq.n	403286 <__svfiscanf_r+0x21a>
  40337e:	e7d1      	b.n	403324 <__svfiscanf_r+0x2b8>
  403380:	9303      	str	r3, [sp, #12]
  403382:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  403386:	2600      	movs	r6, #0
  403388:	e779      	b.n	40327e <__svfiscanf_r+0x212>
  40338a:	4619      	mov	r1, r3
  40338c:	a818      	add	r0, sp, #96	; 0x60
  40338e:	f002 f8fd 	bl	40558c <__sccl>
  403392:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  403396:	9003      	str	r0, [sp, #12]
  403398:	2601      	movs	r6, #1
  40339a:	e770      	b.n	40327e <__svfiscanf_r+0x212>
  40339c:	9303      	str	r3, [sp, #12]
  40339e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  4033a2:	4b68      	ldr	r3, [pc, #416]	; (403544 <__svfiscanf_r+0x4d8>)
  4033a4:	9307      	str	r3, [sp, #28]
  4033a6:	2310      	movs	r3, #16
  4033a8:	9304      	str	r3, [sp, #16]
  4033aa:	2603      	movs	r6, #3
  4033ac:	e767      	b.n	40327e <__svfiscanf_r+0x212>
  4033ae:	9303      	str	r3, [sp, #12]
  4033b0:	f045 0501 	orr.w	r5, r5, #1
  4033b4:	4b63      	ldr	r3, [pc, #396]	; (403544 <__svfiscanf_r+0x4d8>)
  4033b6:	9307      	str	r3, [sp, #28]
  4033b8:	2308      	movs	r3, #8
  4033ba:	9304      	str	r3, [sp, #16]
  4033bc:	2603      	movs	r6, #3
  4033be:	e75e      	b.n	40327e <__svfiscanf_r+0x212>
  4033c0:	9303      	str	r3, [sp, #12]
  4033c2:	4b60      	ldr	r3, [pc, #384]	; (403544 <__svfiscanf_r+0x4d8>)
  4033c4:	9307      	str	r3, [sp, #28]
  4033c6:	230a      	movs	r3, #10
  4033c8:	9304      	str	r3, [sp, #16]
  4033ca:	2603      	movs	r6, #3
  4033cc:	e757      	b.n	40327e <__svfiscanf_r+0x212>
  4033ce:	9303      	str	r3, [sp, #12]
  4033d0:	2602      	movs	r6, #2
  4033d2:	e754      	b.n	40327e <__svfiscanf_r+0x212>
  4033d4:	9303      	str	r3, [sp, #12]
  4033d6:	f445 7508 	orr.w	r5, r5, #544	; 0x220
  4033da:	e7e2      	b.n	4033a2 <__svfiscanf_r+0x336>
  4033dc:	9303      	str	r3, [sp, #12]
  4033de:	e7e9      	b.n	4033b4 <__svfiscanf_r+0x348>
  4033e0:	06ea      	lsls	r2, r5, #27
  4033e2:	9303      	str	r3, [sp, #12]
  4033e4:	d477      	bmi.n	4034d6 <__svfiscanf_r+0x46a>
  4033e6:	076b      	lsls	r3, r5, #29
  4033e8:	f100 82ec 	bmi.w	4039c4 <__svfiscanf_r+0x958>
  4033ec:	07ee      	lsls	r6, r5, #31
  4033ee:	f100 82d8 	bmi.w	4039a2 <__svfiscanf_r+0x936>
  4033f2:	07ad      	lsls	r5, r5, #30
  4033f4:	f140 82d5 	bpl.w	4039a2 <__svfiscanf_r+0x936>
  4033f8:	9a06      	ldr	r2, [sp, #24]
  4033fa:	9e03      	ldr	r6, [sp, #12]
  4033fc:	6813      	ldr	r3, [r2, #0]
  4033fe:	4650      	mov	r0, sl
  403400:	17c1      	asrs	r1, r0, #31
  403402:	3204      	adds	r2, #4
  403404:	9206      	str	r2, [sp, #24]
  403406:	e9c3 0100 	strd	r0, r1, [r3]
  40340a:	4634      	mov	r4, r6
  40340c:	e67c      	b.n	403108 <__svfiscanf_r+0x9c>
  40340e:	f896 8001 	ldrb.w	r8, [r6, #1]
  403412:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  403416:	f000 82b2 	beq.w	40397e <__svfiscanf_r+0x912>
  40341a:	f045 0501 	orr.w	r5, r5, #1
  40341e:	461e      	mov	r6, r3
  403420:	e68d      	b.n	40313e <__svfiscanf_r+0xd2>
  403422:	f896 8001 	ldrb.w	r8, [r6, #1]
  403426:	f045 0502 	orr.w	r5, r5, #2
  40342a:	461e      	mov	r6, r3
  40342c:	e687      	b.n	40313e <__svfiscanf_r+0xd2>
  40342e:	9303      	str	r3, [sp, #12]
  403430:	f045 0501 	orr.w	r5, r5, #1
  403434:	e793      	b.n	40335e <__svfiscanf_r+0x2f2>
  403436:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40343a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  40343e:	3c30      	subs	r4, #48	; 0x30
  403440:	f896 8001 	ldrb.w	r8, [r6, #1]
  403444:	461e      	mov	r6, r3
  403446:	e67a      	b.n	40313e <__svfiscanf_r+0xd2>
  403448:	f896 8001 	ldrb.w	r8, [r6, #1]
  40344c:	f045 0510 	orr.w	r5, r5, #16
  403450:	461e      	mov	r6, r3
  403452:	e674      	b.n	40313e <__svfiscanf_r+0xd2>
  403454:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403458:	07dc      	lsls	r4, r3, #31
  40345a:	d404      	bmi.n	403466 <__svfiscanf_r+0x3fa>
  40345c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403460:	0598      	lsls	r0, r3, #22
  403462:	f140 8293 	bpl.w	40398c <__svfiscanf_r+0x920>
  403466:	f04f 33ff 	mov.w	r3, #4294967295
  40346a:	9305      	str	r3, [sp, #20]
  40346c:	9805      	ldr	r0, [sp, #20]
  40346e:	b059      	add	sp, #356	; 0x164
  403470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403474:	9303      	str	r3, [sp, #12]
  403476:	f001 f957 	bl	404728 <__locale_ctype_ptr>
  40347a:	4440      	add	r0, r8
  40347c:	7843      	ldrb	r3, [r0, #1]
  40347e:	f003 0303 	and.w	r3, r3, #3
  403482:	2b01      	cmp	r3, #1
  403484:	f47f af6b 	bne.w	40335e <__svfiscanf_r+0x2f2>
  403488:	f045 0501 	orr.w	r5, r5, #1
  40348c:	e767      	b.n	40335e <__svfiscanf_r+0x2f2>
  40348e:	ab0c      	add	r3, sp, #48	; 0x30
  403490:	4618      	mov	r0, r3
  403492:	2208      	movs	r2, #8
  403494:	2100      	movs	r1, #0
  403496:	9308      	str	r3, [sp, #32]
  403498:	f7fe fe00 	bl	40209c <memset>
  40349c:	f015 0310 	ands.w	r3, r5, #16
  4034a0:	9309      	str	r3, [sp, #36]	; 0x24
  4034a2:	f000 81eb 	beq.w	40387c <__svfiscanf_r+0x810>
  4034a6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  4034aa:	2600      	movs	r6, #0
  4034ac:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  4034b0:	f001 f93a 	bl	404728 <__locale_ctype_ptr>
  4034b4:	f8db 3000 	ldr.w	r3, [fp]
  4034b8:	781b      	ldrb	r3, [r3, #0]
  4034ba:	4403      	add	r3, r0
  4034bc:	785b      	ldrb	r3, [r3, #1]
  4034be:	071a      	lsls	r2, r3, #28
  4034c0:	d402      	bmi.n	4034c8 <__svfiscanf_r+0x45c>
  4034c2:	2c00      	cmp	r4, #0
  4034c4:	f040 8289 	bne.w	4039da <__svfiscanf_r+0x96e>
  4034c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4034ca:	b923      	cbnz	r3, 4034d6 <__svfiscanf_r+0x46a>
  4034cc:	f8c9 3000 	str.w	r3, [r9]
  4034d0:	9b05      	ldr	r3, [sp, #20]
  4034d2:	3301      	adds	r3, #1
  4034d4:	9305      	str	r3, [sp, #20]
  4034d6:	9e03      	ldr	r6, [sp, #12]
  4034d8:	4634      	mov	r4, r6
  4034da:	e615      	b.n	403108 <__svfiscanf_r+0x9c>
  4034dc:	2c00      	cmp	r4, #0
  4034de:	bf08      	it	eq
  4034e0:	f04f 34ff 	moveq.w	r4, #4294967295
  4034e4:	06e8      	lsls	r0, r5, #27
  4034e6:	f140 810b 	bpl.w	403700 <__svfiscanf_r+0x694>
  4034ea:	f8db 2000 	ldr.w	r2, [fp]
  4034ee:	2500      	movs	r5, #0
  4034f0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4034f4:	7813      	ldrb	r3, [r2, #0]
  4034f6:	f818 3003 	ldrb.w	r3, [r8, r3]
  4034fa:	3201      	adds	r2, #1
  4034fc:	b1db      	cbz	r3, 403536 <__svfiscanf_r+0x4ca>
  4034fe:	f8db 3004 	ldr.w	r3, [fp, #4]
  403502:	f8cb 2000 	str.w	r2, [fp]
  403506:	3501      	adds	r5, #1
  403508:	3b01      	subs	r3, #1
  40350a:	42ac      	cmp	r4, r5
  40350c:	f8cb 3004 	str.w	r3, [fp, #4]
  403510:	f43f aee9 	beq.w	4032e6 <__svfiscanf_r+0x27a>
  403514:	2b00      	cmp	r3, #0
  403516:	dced      	bgt.n	4034f4 <__svfiscanf_r+0x488>
  403518:	4659      	mov	r1, fp
  40351a:	4638      	mov	r0, r7
  40351c:	f001 ff9a 	bl	405454 <__srefill_r>
  403520:	2800      	cmp	r0, #0
  403522:	f47f aee0 	bne.w	4032e6 <__svfiscanf_r+0x27a>
  403526:	f8db 2000 	ldr.w	r2, [fp]
  40352a:	7813      	ldrb	r3, [r2, #0]
  40352c:	f818 3003 	ldrb.w	r3, [r8, r3]
  403530:	3201      	adds	r2, #1
  403532:	2b00      	cmp	r3, #0
  403534:	d1e3      	bne.n	4034fe <__svfiscanf_r+0x492>
  403536:	2d00      	cmp	r5, #0
  403538:	f47f aed5 	bne.w	4032e6 <__svfiscanf_r+0x27a>
  40353c:	e5ea      	b.n	403114 <__svfiscanf_r+0xa8>
  40353e:	bf00      	nop
  403540:	004058c5 	.word	0x004058c5
  403544:	00405bf1 	.word	0x00405bf1
  403548:	1e63      	subs	r3, r4, #1
  40354a:	2b26      	cmp	r3, #38	; 0x26
  40354c:	bf8c      	ite	hi
  40354e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
  403552:	2200      	movls	r2, #0
  403554:	f04f 0900 	mov.w	r9, #0
  403558:	4611      	mov	r1, r2
  40355a:	ae0e      	add	r6, sp, #56	; 0x38
  40355c:	464b      	mov	r3, r9
  40355e:	46b9      	mov	r9, r7
  403560:	9f04      	ldr	r7, [sp, #16]
  403562:	4652      	mov	r2, sl
  403564:	bf88      	it	hi
  403566:	2427      	movhi	r4, #39	; 0x27
  403568:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
  40356c:	46b0      	mov	r8, r6
  40356e:	468a      	mov	sl, r1
  403570:	f8db 0000 	ldr.w	r0, [fp]
  403574:	f890 e000 	ldrb.w	lr, [r0]
  403578:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  40357c:	294d      	cmp	r1, #77	; 0x4d
  40357e:	d842      	bhi.n	403606 <__svfiscanf_r+0x59a>
  403580:	e8df f001 	tbb	[pc, r1]
  403584:	418e418e 	.word	0x418e418e
  403588:	63636941 	.word	0x63636941
  40358c:	63636363 	.word	0x63636363
  403590:	415d5d63 	.word	0x415d5d63
  403594:	41414141 	.word	0x41414141
  403598:	58584141 	.word	0x58584141
  40359c:	58585858 	.word	0x58585858
  4035a0:	41414141 	.word	0x41414141
  4035a4:	41414141 	.word	0x41414141
  4035a8:	41414141 	.word	0x41414141
  4035ac:	41414141 	.word	0x41414141
  4035b0:	41412741 	.word	0x41412741
  4035b4:	41414141 	.word	0x41414141
  4035b8:	58584141 	.word	0x58584141
  4035bc:	58585858 	.word	0x58585858
  4035c0:	41414141 	.word	0x41414141
  4035c4:	41414141 	.word	0x41414141
  4035c8:	41414141 	.word	0x41414141
  4035cc:	41414141 	.word	0x41414141
  4035d0:	2741      	.short	0x2741
  4035d2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
  4035d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4035da:	d114      	bne.n	403606 <__svfiscanf_r+0x59a>
  4035dc:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  4035e0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
  4035e4:	2710      	movs	r7, #16
  4035e6:	f8db 1004 	ldr.w	r1, [fp, #4]
  4035ea:	f888 e000 	strb.w	lr, [r8]
  4035ee:	3901      	subs	r1, #1
  4035f0:	2900      	cmp	r1, #0
  4035f2:	f108 0801 	add.w	r8, r8, #1
  4035f6:	f8cb 1004 	str.w	r1, [fp, #4]
  4035fa:	dd46      	ble.n	40368a <__svfiscanf_r+0x61e>
  4035fc:	3001      	adds	r0, #1
  4035fe:	f8cb 0000 	str.w	r0, [fp]
  403602:	3c01      	subs	r4, #1
  403604:	d1b4      	bne.n	403570 <__svfiscanf_r+0x504>
  403606:	05e9      	lsls	r1, r5, #23
  403608:	9704      	str	r7, [sp, #16]
  40360a:	4692      	mov	sl, r2
  40360c:	464f      	mov	r7, r9
  40360e:	4699      	mov	r9, r3
  403610:	d505      	bpl.n	40361e <__svfiscanf_r+0x5b2>
  403612:	45b0      	cmp	r8, r6
  403614:	f200 81a2 	bhi.w	40395c <__svfiscanf_r+0x8f0>
  403618:	45b0      	cmp	r8, r6
  40361a:	f43f ad7b 	beq.w	403114 <__svfiscanf_r+0xa8>
  40361e:	f015 0410 	ands.w	r4, r5, #16
  403622:	f000 80e5 	beq.w	4037f0 <__svfiscanf_r+0x784>
  403626:	eba8 0606 	sub.w	r6, r8, r6
  40362a:	44b1      	add	r9, r6
  40362c:	9e03      	ldr	r6, [sp, #12]
  40362e:	44ca      	add	sl, r9
  403630:	4634      	mov	r4, r6
  403632:	e569      	b.n	403108 <__svfiscanf_r+0x9c>
  403634:	2f0a      	cmp	r7, #10
  403636:	dde6      	ble.n	403606 <__svfiscanf_r+0x59a>
  403638:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  40363c:	e7d3      	b.n	4035e6 <__svfiscanf_r+0x57a>
  40363e:	49ac      	ldr	r1, [pc, #688]	; (4038f0 <__svfiscanf_r+0x884>)
  403640:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  403644:	2f08      	cmp	r7, #8
  403646:	dcf7      	bgt.n	403638 <__svfiscanf_r+0x5cc>
  403648:	e7dd      	b.n	403606 <__svfiscanf_r+0x59a>
  40364a:	49a9      	ldr	r1, [pc, #676]	; (4038f0 <__svfiscanf_r+0x884>)
  40364c:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  403650:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  403654:	e7c7      	b.n	4035e6 <__svfiscanf_r+0x57a>
  403656:	0529      	lsls	r1, r5, #20
  403658:	d5c5      	bpl.n	4035e6 <__svfiscanf_r+0x57a>
  40365a:	b917      	cbnz	r7, 403662 <__svfiscanf_r+0x5f6>
  40365c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  403660:	2708      	movs	r7, #8
  403662:	0569      	lsls	r1, r5, #21
  403664:	f100 80eb 	bmi.w	40383e <__svfiscanf_r+0x7d2>
  403668:	f425 7560 	bic.w	r5, r5, #896	; 0x380
  40366c:	f1ba 0f00 	cmp.w	sl, #0
  403670:	d002      	beq.n	403678 <__svfiscanf_r+0x60c>
  403672:	f10a 3aff 	add.w	sl, sl, #4294967295
  403676:	3401      	adds	r4, #1
  403678:	f8db 1004 	ldr.w	r1, [fp, #4]
  40367c:	3901      	subs	r1, #1
  40367e:	2900      	cmp	r1, #0
  403680:	f103 0301 	add.w	r3, r3, #1
  403684:	f8cb 1004 	str.w	r1, [fp, #4]
  403688:	dcb8      	bgt.n	4035fc <__svfiscanf_r+0x590>
  40368a:	4659      	mov	r1, fp
  40368c:	4648      	mov	r0, r9
  40368e:	9308      	str	r3, [sp, #32]
  403690:	9204      	str	r2, [sp, #16]
  403692:	f001 fedf 	bl	405454 <__srefill_r>
  403696:	9a04      	ldr	r2, [sp, #16]
  403698:	9b08      	ldr	r3, [sp, #32]
  40369a:	2800      	cmp	r0, #0
  40369c:	d0b1      	beq.n	403602 <__svfiscanf_r+0x596>
  40369e:	e7b2      	b.n	403606 <__svfiscanf_r+0x59a>
  4036a0:	0629      	lsls	r1, r5, #24
  4036a2:	d5b0      	bpl.n	403606 <__svfiscanf_r+0x59a>
  4036a4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  4036a8:	e79d      	b.n	4035e6 <__svfiscanf_r+0x57a>
  4036aa:	2c00      	cmp	r4, #0
  4036ac:	bf08      	it	eq
  4036ae:	f04f 34ff 	moveq.w	r4, #4294967295
  4036b2:	f015 0601 	ands.w	r6, r5, #1
  4036b6:	f47f aeea 	bne.w	40348e <__svfiscanf_r+0x422>
  4036ba:	06eb      	lsls	r3, r5, #27
  4036bc:	f140 811c 	bpl.w	4038f8 <__svfiscanf_r+0x88c>
  4036c0:	f001 f832 	bl	404728 <__locale_ctype_ptr>
  4036c4:	f8db 3000 	ldr.w	r3, [fp]
  4036c8:	781a      	ldrb	r2, [r3, #0]
  4036ca:	4410      	add	r0, r2
  4036cc:	3301      	adds	r3, #1
  4036ce:	7842      	ldrb	r2, [r0, #1]
  4036d0:	0715      	lsls	r5, r2, #28
  4036d2:	d411      	bmi.n	4036f8 <__svfiscanf_r+0x68c>
  4036d4:	f8db 2004 	ldr.w	r2, [fp, #4]
  4036d8:	f8cb 3000 	str.w	r3, [fp]
  4036dc:	3601      	adds	r6, #1
  4036de:	3a01      	subs	r2, #1
  4036e0:	42b4      	cmp	r4, r6
  4036e2:	f8cb 2004 	str.w	r2, [fp, #4]
  4036e6:	d007      	beq.n	4036f8 <__svfiscanf_r+0x68c>
  4036e8:	2a00      	cmp	r2, #0
  4036ea:	dce9      	bgt.n	4036c0 <__svfiscanf_r+0x654>
  4036ec:	4659      	mov	r1, fp
  4036ee:	4638      	mov	r0, r7
  4036f0:	f001 feb0 	bl	405454 <__srefill_r>
  4036f4:	2800      	cmp	r0, #0
  4036f6:	d0e3      	beq.n	4036c0 <__svfiscanf_r+0x654>
  4036f8:	44b2      	add	sl, r6
  4036fa:	9e03      	ldr	r6, [sp, #12]
  4036fc:	4634      	mov	r4, r6
  4036fe:	e503      	b.n	403108 <__svfiscanf_r+0x9c>
  403700:	9a06      	ldr	r2, [sp, #24]
  403702:	6815      	ldr	r5, [r2, #0]
  403704:	1d16      	adds	r6, r2, #4
  403706:	46a9      	mov	r9, r5
  403708:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  40370c:	f8db 3000 	ldr.w	r3, [fp]
  403710:	781a      	ldrb	r2, [r3, #0]
  403712:	f818 2002 	ldrb.w	r2, [r8, r2]
  403716:	1c59      	adds	r1, r3, #1
  403718:	b1c2      	cbz	r2, 40374c <__svfiscanf_r+0x6e0>
  40371a:	f8db 2004 	ldr.w	r2, [fp, #4]
  40371e:	f8cb 1000 	str.w	r1, [fp]
  403722:	3a01      	subs	r2, #1
  403724:	f8cb 2004 	str.w	r2, [fp, #4]
  403728:	781b      	ldrb	r3, [r3, #0]
  40372a:	f809 3b01 	strb.w	r3, [r9], #1
  40372e:	3c01      	subs	r4, #1
  403730:	d00c      	beq.n	40374c <__svfiscanf_r+0x6e0>
  403732:	f8db 3004 	ldr.w	r3, [fp, #4]
  403736:	2b00      	cmp	r3, #0
  403738:	dce8      	bgt.n	40370c <__svfiscanf_r+0x6a0>
  40373a:	4659      	mov	r1, fp
  40373c:	4638      	mov	r0, r7
  40373e:	f001 fe89 	bl	405454 <__srefill_r>
  403742:	2800      	cmp	r0, #0
  403744:	d0e2      	beq.n	40370c <__svfiscanf_r+0x6a0>
  403746:	454d      	cmp	r5, r9
  403748:	f43f adec 	beq.w	403324 <__svfiscanf_r+0x2b8>
  40374c:	ebb9 0505 	subs.w	r5, r9, r5
  403750:	f43f ace0 	beq.w	403114 <__svfiscanf_r+0xa8>
  403754:	9a05      	ldr	r2, [sp, #20]
  403756:	9606      	str	r6, [sp, #24]
  403758:	2300      	movs	r3, #0
  40375a:	3201      	adds	r2, #1
  40375c:	9205      	str	r2, [sp, #20]
  40375e:	f889 3000 	strb.w	r3, [r9]
  403762:	e5c0      	b.n	4032e6 <__svfiscanf_r+0x27a>
  403764:	ab0c      	add	r3, sp, #48	; 0x30
  403766:	4618      	mov	r0, r3
  403768:	2208      	movs	r2, #8
  40376a:	2100      	movs	r1, #0
  40376c:	9308      	str	r3, [sp, #32]
  40376e:	f7fe fc95 	bl	40209c <memset>
  403772:	f015 0310 	ands.w	r3, r5, #16
  403776:	9309      	str	r3, [sp, #36]	; 0x24
  403778:	d077      	beq.n	40386a <__svfiscanf_r+0x7fe>
  40377a:	f04f 0900 	mov.w	r9, #0
  40377e:	2c00      	cmp	r4, #0
  403780:	f43f aea9 	beq.w	4034d6 <__svfiscanf_r+0x46a>
  403784:	2500      	movs	r5, #0
  403786:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  40378a:	f000 ffbb 	bl	404704 <__locale_mb_cur_max>
  40378e:	42a8      	cmp	r0, r5
  403790:	f43f adc8 	beq.w	403324 <__svfiscanf_r+0x2b8>
  403794:	e89b 000c 	ldmia.w	fp, {r2, r3}
  403798:	f812 0b01 	ldrb.w	r0, [r2], #1
  40379c:	f8cb 2000 	str.w	r2, [fp]
  4037a0:	3b01      	subs	r3, #1
  4037a2:	9a08      	ldr	r2, [sp, #32]
  4037a4:	9200      	str	r2, [sp, #0]
  4037a6:	1c6e      	adds	r6, r5, #1
  4037a8:	f8cb 3004 	str.w	r3, [fp, #4]
  4037ac:	f808 0005 	strb.w	r0, [r8, r5]
  4037b0:	4633      	mov	r3, r6
  4037b2:	4642      	mov	r2, r8
  4037b4:	4649      	mov	r1, r9
  4037b6:	4638      	mov	r0, r7
  4037b8:	f001 fafc 	bl	404db4 <_mbrtowc_r>
  4037bc:	1c43      	adds	r3, r0, #1
  4037be:	f43f adb1 	beq.w	403324 <__svfiscanf_r+0x2b8>
  4037c2:	2800      	cmp	r0, #0
  4037c4:	d16c      	bne.n	4038a0 <__svfiscanf_r+0x834>
  4037c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037c8:	2b00      	cmp	r3, #0
  4037ca:	d16d      	bne.n	4038a8 <__svfiscanf_r+0x83c>
  4037cc:	f8c9 3000 	str.w	r3, [r9]
  4037d0:	44b2      	add	sl, r6
  4037d2:	3c01      	subs	r4, #1
  4037d4:	f109 0904 	add.w	r9, r9, #4
  4037d8:	2500      	movs	r5, #0
  4037da:	f8db 3004 	ldr.w	r3, [fp, #4]
  4037de:	2b00      	cmp	r3, #0
  4037e0:	dd30      	ble.n	403844 <__svfiscanf_r+0x7d8>
  4037e2:	2c00      	cmp	r4, #0
  4037e4:	d1d1      	bne.n	40378a <__svfiscanf_r+0x71e>
  4037e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	f47f ae74 	bne.w	4034d6 <__svfiscanf_r+0x46a>
  4037ee:	e66f      	b.n	4034d0 <__svfiscanf_r+0x464>
  4037f0:	4622      	mov	r2, r4
  4037f2:	f888 4000 	strb.w	r4, [r8]
  4037f6:	9b04      	ldr	r3, [sp, #16]
  4037f8:	9c07      	ldr	r4, [sp, #28]
  4037fa:	4631      	mov	r1, r6
  4037fc:	4638      	mov	r0, r7
  4037fe:	47a0      	blx	r4
  403800:	06aa      	lsls	r2, r5, #26
  403802:	d442      	bmi.n	40388a <__svfiscanf_r+0x81e>
  403804:	076b      	lsls	r3, r5, #29
  403806:	f100 80d7 	bmi.w	4039b8 <__svfiscanf_r+0x94c>
  40380a:	f015 0201 	ands.w	r2, r5, #1
  40380e:	d13c      	bne.n	40388a <__svfiscanf_r+0x81e>
  403810:	07ad      	lsls	r5, r5, #30
  403812:	d53a      	bpl.n	40388a <__svfiscanf_r+0x81e>
  403814:	9b07      	ldr	r3, [sp, #28]
  403816:	4619      	mov	r1, r3
  403818:	4b36      	ldr	r3, [pc, #216]	; (4038f4 <__svfiscanf_r+0x888>)
  40381a:	4299      	cmp	r1, r3
  40381c:	4638      	mov	r0, r7
  40381e:	9b04      	ldr	r3, [sp, #16]
  403820:	4631      	mov	r1, r6
  403822:	f000 811e 	beq.w	403a62 <__svfiscanf_r+0x9f6>
  403826:	f002 f92d 	bl	405a84 <_strtoll_r>
  40382a:	9a06      	ldr	r2, [sp, #24]
  40382c:	6813      	ldr	r3, [r2, #0]
  40382e:	e9c3 0100 	strd	r0, r1, [r3]
  403832:	3204      	adds	r2, #4
  403834:	9206      	str	r2, [sp, #24]
  403836:	9b05      	ldr	r3, [sp, #20]
  403838:	3301      	adds	r3, #1
  40383a:	9305      	str	r3, [sp, #20]
  40383c:	e6f3      	b.n	403626 <__svfiscanf_r+0x5ba>
  40383e:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
  403842:	e6d0      	b.n	4035e6 <__svfiscanf_r+0x57a>
  403844:	4659      	mov	r1, fp
  403846:	4638      	mov	r0, r7
  403848:	f001 fe04 	bl	405454 <__srefill_r>
  40384c:	2800      	cmp	r0, #0
  40384e:	d0c8      	beq.n	4037e2 <__svfiscanf_r+0x776>
  403850:	2d00      	cmp	r5, #0
  403852:	d0c8      	beq.n	4037e6 <__svfiscanf_r+0x77a>
  403854:	e566      	b.n	403324 <__svfiscanf_r+0x2b8>
  403856:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40385a:	9203      	str	r2, [sp, #12]
  40385c:	f000 ff76 	bl	40474c <__retarget_lock_acquire_recursive>
  403860:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  403864:	9a03      	ldr	r2, [sp, #12]
  403866:	b299      	uxth	r1, r3
  403868:	e410      	b.n	40308c <__svfiscanf_r+0x20>
  40386a:	9a06      	ldr	r2, [sp, #24]
  40386c:	4613      	mov	r3, r2
  40386e:	3304      	adds	r3, #4
  403870:	f8d2 9000 	ldr.w	r9, [r2]
  403874:	9306      	str	r3, [sp, #24]
  403876:	2c00      	cmp	r4, #0
  403878:	d184      	bne.n	403784 <__svfiscanf_r+0x718>
  40387a:	e629      	b.n	4034d0 <__svfiscanf_r+0x464>
  40387c:	9a06      	ldr	r2, [sp, #24]
  40387e:	4613      	mov	r3, r2
  403880:	3304      	adds	r3, #4
  403882:	f8d2 9000 	ldr.w	r9, [r2]
  403886:	9306      	str	r3, [sp, #24]
  403888:	e60f      	b.n	4034aa <__svfiscanf_r+0x43e>
  40388a:	9a06      	ldr	r2, [sp, #24]
  40388c:	6813      	ldr	r3, [r2, #0]
  40388e:	3204      	adds	r2, #4
  403890:	9206      	str	r2, [sp, #24]
  403892:	6018      	str	r0, [r3, #0]
  403894:	e7cf      	b.n	403836 <__svfiscanf_r+0x7ca>
  403896:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40389a:	f000 ff59 	bl	404750 <__retarget_lock_release_recursive>
  40389e:	e54a      	b.n	403336 <__svfiscanf_r+0x2ca>
  4038a0:	3002      	adds	r0, #2
  4038a2:	d105      	bne.n	4038b0 <__svfiscanf_r+0x844>
  4038a4:	4635      	mov	r5, r6
  4038a6:	e798      	b.n	4037da <__svfiscanf_r+0x76e>
  4038a8:	44b2      	add	sl, r6
  4038aa:	3c01      	subs	r4, #1
  4038ac:	4605      	mov	r5, r0
  4038ae:	e794      	b.n	4037da <__svfiscanf_r+0x76e>
  4038b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038b2:	44b2      	add	sl, r6
  4038b4:	3c01      	subs	r4, #1
  4038b6:	2b00      	cmp	r3, #0
  4038b8:	d08c      	beq.n	4037d4 <__svfiscanf_r+0x768>
  4038ba:	2500      	movs	r5, #0
  4038bc:	e78d      	b.n	4037da <__svfiscanf_r+0x76e>
  4038be:	2d00      	cmp	r5, #0
  4038c0:	f47f ad11 	bne.w	4032e6 <__svfiscanf_r+0x27a>
  4038c4:	e52e      	b.n	403324 <__svfiscanf_r+0x2b8>
  4038c6:	9d06      	ldr	r5, [sp, #24]
  4038c8:	4623      	mov	r3, r4
  4038ca:	6829      	ldr	r1, [r5, #0]
  4038cc:	f8cd b000 	str.w	fp, [sp]
  4038d0:	2201      	movs	r2, #1
  4038d2:	4638      	mov	r0, r7
  4038d4:	f000 fb28 	bl	403f28 <_fread_r>
  4038d8:	1d2e      	adds	r6, r5, #4
  4038da:	2800      	cmp	r0, #0
  4038dc:	f43f ad22 	beq.w	403324 <__svfiscanf_r+0x2b8>
  4038e0:	9b05      	ldr	r3, [sp, #20]
  4038e2:	9606      	str	r6, [sp, #24]
  4038e4:	9e03      	ldr	r6, [sp, #12]
  4038e6:	3301      	adds	r3, #1
  4038e8:	4482      	add	sl, r0
  4038ea:	9305      	str	r3, [sp, #20]
  4038ec:	4634      	mov	r4, r6
  4038ee:	e40b      	b.n	403108 <__svfiscanf_r+0x9c>
  4038f0:	00406a54 	.word	0x00406a54
  4038f4:	00405bf1 	.word	0x00405bf1
  4038f8:	9a06      	ldr	r2, [sp, #24]
  4038fa:	6816      	ldr	r6, [r2, #0]
  4038fc:	f102 0804 	add.w	r8, r2, #4
  403900:	4635      	mov	r5, r6
  403902:	f000 ff11 	bl	404728 <__locale_ctype_ptr>
  403906:	f8db 2000 	ldr.w	r2, [fp]
  40390a:	7813      	ldrb	r3, [r2, #0]
  40390c:	4418      	add	r0, r3
  40390e:	1c51      	adds	r1, r2, #1
  403910:	7843      	ldrb	r3, [r0, #1]
  403912:	0718      	lsls	r0, r3, #28
  403914:	d415      	bmi.n	403942 <__svfiscanf_r+0x8d6>
  403916:	f8db 3004 	ldr.w	r3, [fp, #4]
  40391a:	f8cb 1000 	str.w	r1, [fp]
  40391e:	3b01      	subs	r3, #1
  403920:	f8cb 3004 	str.w	r3, [fp, #4]
  403924:	7813      	ldrb	r3, [r2, #0]
  403926:	f805 3b01 	strb.w	r3, [r5], #1
  40392a:	3c01      	subs	r4, #1
  40392c:	d009      	beq.n	403942 <__svfiscanf_r+0x8d6>
  40392e:	f8db 3004 	ldr.w	r3, [fp, #4]
  403932:	2b00      	cmp	r3, #0
  403934:	dce5      	bgt.n	403902 <__svfiscanf_r+0x896>
  403936:	4659      	mov	r1, fp
  403938:	4638      	mov	r0, r7
  40393a:	f001 fd8b 	bl	405454 <__srefill_r>
  40393e:	2800      	cmp	r0, #0
  403940:	d0df      	beq.n	403902 <__svfiscanf_r+0x896>
  403942:	1bae      	subs	r6, r5, r6
  403944:	9a05      	ldr	r2, [sp, #20]
  403946:	f8cd 8018 	str.w	r8, [sp, #24]
  40394a:	44b2      	add	sl, r6
  40394c:	9e03      	ldr	r6, [sp, #12]
  40394e:	2300      	movs	r3, #0
  403950:	3201      	adds	r2, #1
  403952:	9205      	str	r2, [sp, #20]
  403954:	702b      	strb	r3, [r5, #0]
  403956:	4634      	mov	r4, r6
  403958:	f7ff bbd6 	b.w	403108 <__svfiscanf_r+0x9c>
  40395c:	f818 1c01 	ldrb.w	r1, [r8, #-1]
  403960:	465a      	mov	r2, fp
  403962:	4638      	mov	r0, r7
  403964:	f002 fa82 	bl	405e6c <_ungetc_r>
  403968:	f108 38ff 	add.w	r8, r8, #4294967295
  40396c:	e654      	b.n	403618 <__svfiscanf_r+0x5ac>
  40396e:	4659      	mov	r1, fp
  403970:	4638      	mov	r0, r7
  403972:	f001 fd6f 	bl	405454 <__srefill_r>
  403976:	2800      	cmp	r0, #0
  403978:	f43f ac67 	beq.w	40324a <__svfiscanf_r+0x1de>
  40397c:	e4d2      	b.n	403324 <__svfiscanf_r+0x2b8>
  40397e:	f896 8002 	ldrb.w	r8, [r6, #2]
  403982:	f045 0502 	orr.w	r5, r5, #2
  403986:	3602      	adds	r6, #2
  403988:	f7ff bbd9 	b.w	40313e <__svfiscanf_r+0xd2>
  40398c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403990:	f000 fede 	bl	404750 <__retarget_lock_release_recursive>
  403994:	f04f 33ff 	mov.w	r3, #4294967295
  403998:	9305      	str	r3, [sp, #20]
  40399a:	9805      	ldr	r0, [sp, #20]
  40399c:	b059      	add	sp, #356	; 0x164
  40399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039a2:	9a06      	ldr	r2, [sp, #24]
  4039a4:	9e03      	ldr	r6, [sp, #12]
  4039a6:	6813      	ldr	r3, [r2, #0]
  4039a8:	f8c3 a000 	str.w	sl, [r3]
  4039ac:	4613      	mov	r3, r2
  4039ae:	3304      	adds	r3, #4
  4039b0:	9306      	str	r3, [sp, #24]
  4039b2:	4634      	mov	r4, r6
  4039b4:	f7ff bba8 	b.w	403108 <__svfiscanf_r+0x9c>
  4039b8:	9a06      	ldr	r2, [sp, #24]
  4039ba:	6813      	ldr	r3, [r2, #0]
  4039bc:	3204      	adds	r2, #4
  4039be:	9206      	str	r2, [sp, #24]
  4039c0:	8018      	strh	r0, [r3, #0]
  4039c2:	e738      	b.n	403836 <__svfiscanf_r+0x7ca>
  4039c4:	9a06      	ldr	r2, [sp, #24]
  4039c6:	9e03      	ldr	r6, [sp, #12]
  4039c8:	6813      	ldr	r3, [r2, #0]
  4039ca:	f8a3 a000 	strh.w	sl, [r3]
  4039ce:	4613      	mov	r3, r2
  4039d0:	3304      	adds	r3, #4
  4039d2:	9306      	str	r3, [sp, #24]
  4039d4:	4634      	mov	r4, r6
  4039d6:	f7ff bb97 	b.w	403108 <__svfiscanf_r+0x9c>
  4039da:	f000 fe93 	bl	404704 <__locale_mb_cur_max>
  4039de:	4286      	cmp	r6, r0
  4039e0:	f43f aca0 	beq.w	403324 <__svfiscanf_r+0x2b8>
  4039e4:	e89b 000c 	ldmia.w	fp, {r2, r3}
  4039e8:	f812 0b01 	ldrb.w	r0, [r2], #1
  4039ec:	f8cb 2000 	str.w	r2, [fp]
  4039f0:	3b01      	subs	r3, #1
  4039f2:	9a08      	ldr	r2, [sp, #32]
  4039f4:	9200      	str	r2, [sp, #0]
  4039f6:	1c75      	adds	r5, r6, #1
  4039f8:	f8cb 3004 	str.w	r3, [fp, #4]
  4039fc:	4649      	mov	r1, r9
  4039fe:	f808 0006 	strb.w	r0, [r8, r6]
  403a02:	462b      	mov	r3, r5
  403a04:	4642      	mov	r2, r8
  403a06:	4638      	mov	r0, r7
  403a08:	f001 f9d4 	bl	404db4 <_mbrtowc_r>
  403a0c:	1c41      	adds	r1, r0, #1
  403a0e:	f43f ac89 	beq.w	403324 <__svfiscanf_r+0x2b8>
  403a12:	b198      	cbz	r0, 403a3c <__svfiscanf_r+0x9d0>
  403a14:	3002      	adds	r0, #2
  403a16:	bf08      	it	eq
  403a18:	462e      	moveq	r6, r5
  403a1a:	d12e      	bne.n	403a7a <__svfiscanf_r+0xa0e>
  403a1c:	f8db 3004 	ldr.w	r3, [fp, #4]
  403a20:	2b00      	cmp	r3, #0
  403a22:	f73f ad45 	bgt.w	4034b0 <__svfiscanf_r+0x444>
  403a26:	4659      	mov	r1, fp
  403a28:	4638      	mov	r0, r7
  403a2a:	f001 fd13 	bl	405454 <__srefill_r>
  403a2e:	2800      	cmp	r0, #0
  403a30:	f43f ad3e 	beq.w	4034b0 <__svfiscanf_r+0x444>
  403a34:	2e00      	cmp	r6, #0
  403a36:	f47f ac75 	bne.w	403324 <__svfiscanf_r+0x2b8>
  403a3a:	e545      	b.n	4034c8 <__svfiscanf_r+0x45c>
  403a3c:	f8c9 0000 	str.w	r0, [r9]
  403a40:	f000 fe52 	bl	4046e8 <iswspace>
  403a44:	4606      	mov	r6, r0
  403a46:	b178      	cbz	r0, 403a68 <__svfiscanf_r+0x9fc>
  403a48:	2d00      	cmp	r5, #0
  403a4a:	f43f ad3d 	beq.w	4034c8 <__svfiscanf_r+0x45c>
  403a4e:	4445      	add	r5, r8
  403a50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  403a54:	465a      	mov	r2, fp
  403a56:	4638      	mov	r0, r7
  403a58:	f002 fa08 	bl	405e6c <_ungetc_r>
  403a5c:	4545      	cmp	r5, r8
  403a5e:	d1f7      	bne.n	403a50 <__svfiscanf_r+0x9e4>
  403a60:	e532      	b.n	4034c8 <__svfiscanf_r+0x45c>
  403a62:	f002 f9b5 	bl	405dd0 <_strtoull_r>
  403a66:	e6e0      	b.n	40382a <__svfiscanf_r+0x7be>
  403a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a6a:	44aa      	add	sl, r5
  403a6c:	3c01      	subs	r4, #1
  403a6e:	2b00      	cmp	r3, #0
  403a70:	d1d4      	bne.n	403a1c <__svfiscanf_r+0x9b0>
  403a72:	f109 0904 	add.w	r9, r9, #4
  403a76:	461e      	mov	r6, r3
  403a78:	e7d0      	b.n	403a1c <__svfiscanf_r+0x9b0>
  403a7a:	f8d9 0000 	ldr.w	r0, [r9]
  403a7e:	e7df      	b.n	403a40 <__svfiscanf_r+0x9d4>

00403a80 <__swsetup_r>:
  403a80:	b538      	push	{r3, r4, r5, lr}
  403a82:	4b30      	ldr	r3, [pc, #192]	; (403b44 <__swsetup_r+0xc4>)
  403a84:	681b      	ldr	r3, [r3, #0]
  403a86:	4605      	mov	r5, r0
  403a88:	460c      	mov	r4, r1
  403a8a:	b113      	cbz	r3, 403a92 <__swsetup_r+0x12>
  403a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403a8e:	2a00      	cmp	r2, #0
  403a90:	d038      	beq.n	403b04 <__swsetup_r+0x84>
  403a92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a96:	b293      	uxth	r3, r2
  403a98:	0718      	lsls	r0, r3, #28
  403a9a:	d50c      	bpl.n	403ab6 <__swsetup_r+0x36>
  403a9c:	6920      	ldr	r0, [r4, #16]
  403a9e:	b1a8      	cbz	r0, 403acc <__swsetup_r+0x4c>
  403aa0:	f013 0201 	ands.w	r2, r3, #1
  403aa4:	d01e      	beq.n	403ae4 <__swsetup_r+0x64>
  403aa6:	6963      	ldr	r3, [r4, #20]
  403aa8:	2200      	movs	r2, #0
  403aaa:	425b      	negs	r3, r3
  403aac:	61a3      	str	r3, [r4, #24]
  403aae:	60a2      	str	r2, [r4, #8]
  403ab0:	b1f0      	cbz	r0, 403af0 <__swsetup_r+0x70>
  403ab2:	2000      	movs	r0, #0
  403ab4:	bd38      	pop	{r3, r4, r5, pc}
  403ab6:	06d9      	lsls	r1, r3, #27
  403ab8:	d53c      	bpl.n	403b34 <__swsetup_r+0xb4>
  403aba:	0758      	lsls	r0, r3, #29
  403abc:	d426      	bmi.n	403b0c <__swsetup_r+0x8c>
  403abe:	6920      	ldr	r0, [r4, #16]
  403ac0:	f042 0308 	orr.w	r3, r2, #8
  403ac4:	81a3      	strh	r3, [r4, #12]
  403ac6:	b29b      	uxth	r3, r3
  403ac8:	2800      	cmp	r0, #0
  403aca:	d1e9      	bne.n	403aa0 <__swsetup_r+0x20>
  403acc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403ad0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403ad4:	d0e4      	beq.n	403aa0 <__swsetup_r+0x20>
  403ad6:	4628      	mov	r0, r5
  403ad8:	4621      	mov	r1, r4
  403ada:	f000 fe69 	bl	4047b0 <__smakebuf_r>
  403ade:	89a3      	ldrh	r3, [r4, #12]
  403ae0:	6920      	ldr	r0, [r4, #16]
  403ae2:	e7dd      	b.n	403aa0 <__swsetup_r+0x20>
  403ae4:	0799      	lsls	r1, r3, #30
  403ae6:	bf58      	it	pl
  403ae8:	6962      	ldrpl	r2, [r4, #20]
  403aea:	60a2      	str	r2, [r4, #8]
  403aec:	2800      	cmp	r0, #0
  403aee:	d1e0      	bne.n	403ab2 <__swsetup_r+0x32>
  403af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403af4:	061a      	lsls	r2, r3, #24
  403af6:	d5dd      	bpl.n	403ab4 <__swsetup_r+0x34>
  403af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403afc:	81a3      	strh	r3, [r4, #12]
  403afe:	f04f 30ff 	mov.w	r0, #4294967295
  403b02:	bd38      	pop	{r3, r4, r5, pc}
  403b04:	4618      	mov	r0, r3
  403b06:	f000 f939 	bl	403d7c <__sinit>
  403b0a:	e7c2      	b.n	403a92 <__swsetup_r+0x12>
  403b0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403b0e:	b151      	cbz	r1, 403b26 <__swsetup_r+0xa6>
  403b10:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403b14:	4299      	cmp	r1, r3
  403b16:	d004      	beq.n	403b22 <__swsetup_r+0xa2>
  403b18:	4628      	mov	r0, r5
  403b1a:	f000 fb37 	bl	40418c <_free_r>
  403b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b22:	2300      	movs	r3, #0
  403b24:	6323      	str	r3, [r4, #48]	; 0x30
  403b26:	2300      	movs	r3, #0
  403b28:	6920      	ldr	r0, [r4, #16]
  403b2a:	6063      	str	r3, [r4, #4]
  403b2c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403b30:	6020      	str	r0, [r4, #0]
  403b32:	e7c5      	b.n	403ac0 <__swsetup_r+0x40>
  403b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403b38:	2309      	movs	r3, #9
  403b3a:	602b      	str	r3, [r5, #0]
  403b3c:	f04f 30ff 	mov.w	r0, #4294967295
  403b40:	81a2      	strh	r2, [r4, #12]
  403b42:	bd38      	pop	{r3, r4, r5, pc}
  403b44:	20400028 	.word	0x20400028

00403b48 <register_fini>:
  403b48:	4b02      	ldr	r3, [pc, #8]	; (403b54 <register_fini+0xc>)
  403b4a:	b113      	cbz	r3, 403b52 <register_fini+0xa>
  403b4c:	4802      	ldr	r0, [pc, #8]	; (403b58 <register_fini+0x10>)
  403b4e:	f000 b805 	b.w	403b5c <atexit>
  403b52:	4770      	bx	lr
  403b54:	00000000 	.word	0x00000000
  403b58:	00403ded 	.word	0x00403ded

00403b5c <atexit>:
  403b5c:	2300      	movs	r3, #0
  403b5e:	4601      	mov	r1, r0
  403b60:	461a      	mov	r2, r3
  403b62:	4618      	mov	r0, r3
  403b64:	f002 bac4 	b.w	4060f0 <__register_exitproc>

00403b68 <__sflush_r>:
  403b68:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403b6c:	b29a      	uxth	r2, r3
  403b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b72:	460d      	mov	r5, r1
  403b74:	0711      	lsls	r1, r2, #28
  403b76:	4680      	mov	r8, r0
  403b78:	d43a      	bmi.n	403bf0 <__sflush_r+0x88>
  403b7a:	686a      	ldr	r2, [r5, #4]
  403b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b80:	2a00      	cmp	r2, #0
  403b82:	81ab      	strh	r3, [r5, #12]
  403b84:	dd6f      	ble.n	403c66 <__sflush_r+0xfe>
  403b86:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403b88:	2c00      	cmp	r4, #0
  403b8a:	d049      	beq.n	403c20 <__sflush_r+0xb8>
  403b8c:	2200      	movs	r2, #0
  403b8e:	b29b      	uxth	r3, r3
  403b90:	f8d8 6000 	ldr.w	r6, [r8]
  403b94:	f8c8 2000 	str.w	r2, [r8]
  403b98:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403b9c:	d067      	beq.n	403c6e <__sflush_r+0x106>
  403b9e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403ba0:	075f      	lsls	r7, r3, #29
  403ba2:	d505      	bpl.n	403bb0 <__sflush_r+0x48>
  403ba4:	6869      	ldr	r1, [r5, #4]
  403ba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403ba8:	1a52      	subs	r2, r2, r1
  403baa:	b10b      	cbz	r3, 403bb0 <__sflush_r+0x48>
  403bac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403bae:	1ad2      	subs	r2, r2, r3
  403bb0:	2300      	movs	r3, #0
  403bb2:	69e9      	ldr	r1, [r5, #28]
  403bb4:	4640      	mov	r0, r8
  403bb6:	47a0      	blx	r4
  403bb8:	1c44      	adds	r4, r0, #1
  403bba:	d03c      	beq.n	403c36 <__sflush_r+0xce>
  403bbc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403bc0:	692a      	ldr	r2, [r5, #16]
  403bc2:	602a      	str	r2, [r5, #0]
  403bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403bc8:	2200      	movs	r2, #0
  403bca:	81ab      	strh	r3, [r5, #12]
  403bcc:	04db      	lsls	r3, r3, #19
  403bce:	606a      	str	r2, [r5, #4]
  403bd0:	d447      	bmi.n	403c62 <__sflush_r+0xfa>
  403bd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403bd4:	f8c8 6000 	str.w	r6, [r8]
  403bd8:	b311      	cbz	r1, 403c20 <__sflush_r+0xb8>
  403bda:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403bde:	4299      	cmp	r1, r3
  403be0:	d002      	beq.n	403be8 <__sflush_r+0x80>
  403be2:	4640      	mov	r0, r8
  403be4:	f000 fad2 	bl	40418c <_free_r>
  403be8:	2000      	movs	r0, #0
  403bea:	6328      	str	r0, [r5, #48]	; 0x30
  403bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bf0:	692e      	ldr	r6, [r5, #16]
  403bf2:	b1ae      	cbz	r6, 403c20 <__sflush_r+0xb8>
  403bf4:	682c      	ldr	r4, [r5, #0]
  403bf6:	602e      	str	r6, [r5, #0]
  403bf8:	0791      	lsls	r1, r2, #30
  403bfa:	bf0c      	ite	eq
  403bfc:	696b      	ldreq	r3, [r5, #20]
  403bfe:	2300      	movne	r3, #0
  403c00:	1ba4      	subs	r4, r4, r6
  403c02:	60ab      	str	r3, [r5, #8]
  403c04:	e00a      	b.n	403c1c <__sflush_r+0xb4>
  403c06:	4623      	mov	r3, r4
  403c08:	4632      	mov	r2, r6
  403c0a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403c0c:	69e9      	ldr	r1, [r5, #28]
  403c0e:	4640      	mov	r0, r8
  403c10:	47b8      	blx	r7
  403c12:	2800      	cmp	r0, #0
  403c14:	eba4 0400 	sub.w	r4, r4, r0
  403c18:	4406      	add	r6, r0
  403c1a:	dd04      	ble.n	403c26 <__sflush_r+0xbe>
  403c1c:	2c00      	cmp	r4, #0
  403c1e:	dcf2      	bgt.n	403c06 <__sflush_r+0x9e>
  403c20:	2000      	movs	r0, #0
  403c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c26:	89ab      	ldrh	r3, [r5, #12]
  403c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c2c:	81ab      	strh	r3, [r5, #12]
  403c2e:	f04f 30ff 	mov.w	r0, #4294967295
  403c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c36:	f8d8 4000 	ldr.w	r4, [r8]
  403c3a:	2c1d      	cmp	r4, #29
  403c3c:	d8f3      	bhi.n	403c26 <__sflush_r+0xbe>
  403c3e:	4b19      	ldr	r3, [pc, #100]	; (403ca4 <__sflush_r+0x13c>)
  403c40:	40e3      	lsrs	r3, r4
  403c42:	43db      	mvns	r3, r3
  403c44:	f013 0301 	ands.w	r3, r3, #1
  403c48:	d1ed      	bne.n	403c26 <__sflush_r+0xbe>
  403c4a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403c4e:	606b      	str	r3, [r5, #4]
  403c50:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403c54:	6929      	ldr	r1, [r5, #16]
  403c56:	81ab      	strh	r3, [r5, #12]
  403c58:	04da      	lsls	r2, r3, #19
  403c5a:	6029      	str	r1, [r5, #0]
  403c5c:	d5b9      	bpl.n	403bd2 <__sflush_r+0x6a>
  403c5e:	2c00      	cmp	r4, #0
  403c60:	d1b7      	bne.n	403bd2 <__sflush_r+0x6a>
  403c62:	6528      	str	r0, [r5, #80]	; 0x50
  403c64:	e7b5      	b.n	403bd2 <__sflush_r+0x6a>
  403c66:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403c68:	2a00      	cmp	r2, #0
  403c6a:	dc8c      	bgt.n	403b86 <__sflush_r+0x1e>
  403c6c:	e7d8      	b.n	403c20 <__sflush_r+0xb8>
  403c6e:	2301      	movs	r3, #1
  403c70:	69e9      	ldr	r1, [r5, #28]
  403c72:	4640      	mov	r0, r8
  403c74:	47a0      	blx	r4
  403c76:	1c43      	adds	r3, r0, #1
  403c78:	4602      	mov	r2, r0
  403c7a:	d002      	beq.n	403c82 <__sflush_r+0x11a>
  403c7c:	89ab      	ldrh	r3, [r5, #12]
  403c7e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403c80:	e78e      	b.n	403ba0 <__sflush_r+0x38>
  403c82:	f8d8 3000 	ldr.w	r3, [r8]
  403c86:	2b00      	cmp	r3, #0
  403c88:	d0f8      	beq.n	403c7c <__sflush_r+0x114>
  403c8a:	2b1d      	cmp	r3, #29
  403c8c:	d001      	beq.n	403c92 <__sflush_r+0x12a>
  403c8e:	2b16      	cmp	r3, #22
  403c90:	d102      	bne.n	403c98 <__sflush_r+0x130>
  403c92:	f8c8 6000 	str.w	r6, [r8]
  403c96:	e7c3      	b.n	403c20 <__sflush_r+0xb8>
  403c98:	89ab      	ldrh	r3, [r5, #12]
  403c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c9e:	81ab      	strh	r3, [r5, #12]
  403ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ca4:	20400001 	.word	0x20400001

00403ca8 <_fflush_r>:
  403ca8:	b538      	push	{r3, r4, r5, lr}
  403caa:	460d      	mov	r5, r1
  403cac:	4604      	mov	r4, r0
  403cae:	b108      	cbz	r0, 403cb4 <_fflush_r+0xc>
  403cb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403cb2:	b1bb      	cbz	r3, 403ce4 <_fflush_r+0x3c>
  403cb4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403cb8:	b188      	cbz	r0, 403cde <_fflush_r+0x36>
  403cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403cbc:	07db      	lsls	r3, r3, #31
  403cbe:	d401      	bmi.n	403cc4 <_fflush_r+0x1c>
  403cc0:	0581      	lsls	r1, r0, #22
  403cc2:	d517      	bpl.n	403cf4 <_fflush_r+0x4c>
  403cc4:	4620      	mov	r0, r4
  403cc6:	4629      	mov	r1, r5
  403cc8:	f7ff ff4e 	bl	403b68 <__sflush_r>
  403ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403cce:	07da      	lsls	r2, r3, #31
  403cd0:	4604      	mov	r4, r0
  403cd2:	d402      	bmi.n	403cda <_fflush_r+0x32>
  403cd4:	89ab      	ldrh	r3, [r5, #12]
  403cd6:	059b      	lsls	r3, r3, #22
  403cd8:	d507      	bpl.n	403cea <_fflush_r+0x42>
  403cda:	4620      	mov	r0, r4
  403cdc:	bd38      	pop	{r3, r4, r5, pc}
  403cde:	4604      	mov	r4, r0
  403ce0:	4620      	mov	r0, r4
  403ce2:	bd38      	pop	{r3, r4, r5, pc}
  403ce4:	f000 f84a 	bl	403d7c <__sinit>
  403ce8:	e7e4      	b.n	403cb4 <_fflush_r+0xc>
  403cea:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403cec:	f000 fd30 	bl	404750 <__retarget_lock_release_recursive>
  403cf0:	4620      	mov	r0, r4
  403cf2:	bd38      	pop	{r3, r4, r5, pc}
  403cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403cf6:	f000 fd29 	bl	40474c <__retarget_lock_acquire_recursive>
  403cfa:	e7e3      	b.n	403cc4 <_fflush_r+0x1c>

00403cfc <fflush>:
  403cfc:	b120      	cbz	r0, 403d08 <fflush+0xc>
  403cfe:	4b05      	ldr	r3, [pc, #20]	; (403d14 <fflush+0x18>)
  403d00:	4601      	mov	r1, r0
  403d02:	6818      	ldr	r0, [r3, #0]
  403d04:	f7ff bfd0 	b.w	403ca8 <_fflush_r>
  403d08:	4b03      	ldr	r3, [pc, #12]	; (403d18 <fflush+0x1c>)
  403d0a:	4904      	ldr	r1, [pc, #16]	; (403d1c <fflush+0x20>)
  403d0c:	6818      	ldr	r0, [r3, #0]
  403d0e:	f000 bcc1 	b.w	404694 <_fwalk_reent>
  403d12:	bf00      	nop
  403d14:	20400028 	.word	0x20400028
  403d18:	00406a00 	.word	0x00406a00
  403d1c:	00403ca9 	.word	0x00403ca9

00403d20 <_cleanup_r>:
  403d20:	4901      	ldr	r1, [pc, #4]	; (403d28 <_cleanup_r+0x8>)
  403d22:	f000 bcb7 	b.w	404694 <_fwalk_reent>
  403d26:	bf00      	nop
  403d28:	004061d9 	.word	0x004061d9

00403d2c <std.isra.0>:
  403d2c:	b510      	push	{r4, lr}
  403d2e:	2300      	movs	r3, #0
  403d30:	4604      	mov	r4, r0
  403d32:	8181      	strh	r1, [r0, #12]
  403d34:	81c2      	strh	r2, [r0, #14]
  403d36:	6003      	str	r3, [r0, #0]
  403d38:	6043      	str	r3, [r0, #4]
  403d3a:	6083      	str	r3, [r0, #8]
  403d3c:	6643      	str	r3, [r0, #100]	; 0x64
  403d3e:	6103      	str	r3, [r0, #16]
  403d40:	6143      	str	r3, [r0, #20]
  403d42:	6183      	str	r3, [r0, #24]
  403d44:	4619      	mov	r1, r3
  403d46:	2208      	movs	r2, #8
  403d48:	305c      	adds	r0, #92	; 0x5c
  403d4a:	f7fe f9a7 	bl	40209c <memset>
  403d4e:	4807      	ldr	r0, [pc, #28]	; (403d6c <std.isra.0+0x40>)
  403d50:	4907      	ldr	r1, [pc, #28]	; (403d70 <std.isra.0+0x44>)
  403d52:	4a08      	ldr	r2, [pc, #32]	; (403d74 <std.isra.0+0x48>)
  403d54:	4b08      	ldr	r3, [pc, #32]	; (403d78 <std.isra.0+0x4c>)
  403d56:	6220      	str	r0, [r4, #32]
  403d58:	61e4      	str	r4, [r4, #28]
  403d5a:	6261      	str	r1, [r4, #36]	; 0x24
  403d5c:	62a2      	str	r2, [r4, #40]	; 0x28
  403d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  403d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d68:	f000 bcec 	b.w	404744 <__retarget_lock_init_recursive>
  403d6c:	00405601 	.word	0x00405601
  403d70:	00405625 	.word	0x00405625
  403d74:	00405661 	.word	0x00405661
  403d78:	00405681 	.word	0x00405681

00403d7c <__sinit>:
  403d7c:	b510      	push	{r4, lr}
  403d7e:	4604      	mov	r4, r0
  403d80:	4812      	ldr	r0, [pc, #72]	; (403dcc <__sinit+0x50>)
  403d82:	f000 fce3 	bl	40474c <__retarget_lock_acquire_recursive>
  403d86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403d88:	b9d2      	cbnz	r2, 403dc0 <__sinit+0x44>
  403d8a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403d8e:	4810      	ldr	r0, [pc, #64]	; (403dd0 <__sinit+0x54>)
  403d90:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403d94:	2103      	movs	r1, #3
  403d96:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403d9a:	63e0      	str	r0, [r4, #60]	; 0x3c
  403d9c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403da0:	6860      	ldr	r0, [r4, #4]
  403da2:	2104      	movs	r1, #4
  403da4:	f7ff ffc2 	bl	403d2c <std.isra.0>
  403da8:	2201      	movs	r2, #1
  403daa:	2109      	movs	r1, #9
  403dac:	68a0      	ldr	r0, [r4, #8]
  403dae:	f7ff ffbd 	bl	403d2c <std.isra.0>
  403db2:	2202      	movs	r2, #2
  403db4:	2112      	movs	r1, #18
  403db6:	68e0      	ldr	r0, [r4, #12]
  403db8:	f7ff ffb8 	bl	403d2c <std.isra.0>
  403dbc:	2301      	movs	r3, #1
  403dbe:	63a3      	str	r3, [r4, #56]	; 0x38
  403dc0:	4802      	ldr	r0, [pc, #8]	; (403dcc <__sinit+0x50>)
  403dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403dc6:	f000 bcc3 	b.w	404750 <__retarget_lock_release_recursive>
  403dca:	bf00      	nop
  403dcc:	20400da4 	.word	0x20400da4
  403dd0:	00403d21 	.word	0x00403d21

00403dd4 <__sfp_lock_acquire>:
  403dd4:	4801      	ldr	r0, [pc, #4]	; (403ddc <__sfp_lock_acquire+0x8>)
  403dd6:	f000 bcb9 	b.w	40474c <__retarget_lock_acquire_recursive>
  403dda:	bf00      	nop
  403ddc:	20400db8 	.word	0x20400db8

00403de0 <__sfp_lock_release>:
  403de0:	4801      	ldr	r0, [pc, #4]	; (403de8 <__sfp_lock_release+0x8>)
  403de2:	f000 bcb5 	b.w	404750 <__retarget_lock_release_recursive>
  403de6:	bf00      	nop
  403de8:	20400db8 	.word	0x20400db8

00403dec <__libc_fini_array>:
  403dec:	b538      	push	{r3, r4, r5, lr}
  403dee:	4c0a      	ldr	r4, [pc, #40]	; (403e18 <__libc_fini_array+0x2c>)
  403df0:	4d0a      	ldr	r5, [pc, #40]	; (403e1c <__libc_fini_array+0x30>)
  403df2:	1b64      	subs	r4, r4, r5
  403df4:	10a4      	asrs	r4, r4, #2
  403df6:	d00a      	beq.n	403e0e <__libc_fini_array+0x22>
  403df8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403dfc:	3b01      	subs	r3, #1
  403dfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403e02:	3c01      	subs	r4, #1
  403e04:	f855 3904 	ldr.w	r3, [r5], #-4
  403e08:	4798      	blx	r3
  403e0a:	2c00      	cmp	r4, #0
  403e0c:	d1f9      	bne.n	403e02 <__libc_fini_array+0x16>
  403e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403e12:	f002 bec5 	b.w	406ba0 <_fini>
  403e16:	bf00      	nop
  403e18:	00406bb0 	.word	0x00406bb0
  403e1c:	00406bac 	.word	0x00406bac

00403e20 <__fputwc>:
  403e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e24:	b082      	sub	sp, #8
  403e26:	4680      	mov	r8, r0
  403e28:	4689      	mov	r9, r1
  403e2a:	4614      	mov	r4, r2
  403e2c:	f000 fc6a 	bl	404704 <__locale_mb_cur_max>
  403e30:	2801      	cmp	r0, #1
  403e32:	d036      	beq.n	403ea2 <__fputwc+0x82>
  403e34:	464a      	mov	r2, r9
  403e36:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403e3a:	a901      	add	r1, sp, #4
  403e3c:	4640      	mov	r0, r8
  403e3e:	f002 f909 	bl	406054 <_wcrtomb_r>
  403e42:	1c42      	adds	r2, r0, #1
  403e44:	4606      	mov	r6, r0
  403e46:	d025      	beq.n	403e94 <__fputwc+0x74>
  403e48:	b3a8      	cbz	r0, 403eb6 <__fputwc+0x96>
  403e4a:	f89d e004 	ldrb.w	lr, [sp, #4]
  403e4e:	2500      	movs	r5, #0
  403e50:	f10d 0a04 	add.w	sl, sp, #4
  403e54:	e009      	b.n	403e6a <__fputwc+0x4a>
  403e56:	6823      	ldr	r3, [r4, #0]
  403e58:	1c5a      	adds	r2, r3, #1
  403e5a:	6022      	str	r2, [r4, #0]
  403e5c:	f883 e000 	strb.w	lr, [r3]
  403e60:	3501      	adds	r5, #1
  403e62:	42b5      	cmp	r5, r6
  403e64:	d227      	bcs.n	403eb6 <__fputwc+0x96>
  403e66:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403e6a:	68a3      	ldr	r3, [r4, #8]
  403e6c:	3b01      	subs	r3, #1
  403e6e:	2b00      	cmp	r3, #0
  403e70:	60a3      	str	r3, [r4, #8]
  403e72:	daf0      	bge.n	403e56 <__fputwc+0x36>
  403e74:	69a7      	ldr	r7, [r4, #24]
  403e76:	42bb      	cmp	r3, r7
  403e78:	4671      	mov	r1, lr
  403e7a:	4622      	mov	r2, r4
  403e7c:	4640      	mov	r0, r8
  403e7e:	db02      	blt.n	403e86 <__fputwc+0x66>
  403e80:	f1be 0f0a 	cmp.w	lr, #10
  403e84:	d1e7      	bne.n	403e56 <__fputwc+0x36>
  403e86:	f002 f88d 	bl	405fa4 <__swbuf_r>
  403e8a:	1c43      	adds	r3, r0, #1
  403e8c:	d1e8      	bne.n	403e60 <__fputwc+0x40>
  403e8e:	b002      	add	sp, #8
  403e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e94:	89a3      	ldrh	r3, [r4, #12]
  403e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e9a:	81a3      	strh	r3, [r4, #12]
  403e9c:	b002      	add	sp, #8
  403e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ea2:	f109 33ff 	add.w	r3, r9, #4294967295
  403ea6:	2bfe      	cmp	r3, #254	; 0xfe
  403ea8:	d8c4      	bhi.n	403e34 <__fputwc+0x14>
  403eaa:	fa5f fe89 	uxtb.w	lr, r9
  403eae:	4606      	mov	r6, r0
  403eb0:	f88d e004 	strb.w	lr, [sp, #4]
  403eb4:	e7cb      	b.n	403e4e <__fputwc+0x2e>
  403eb6:	4648      	mov	r0, r9
  403eb8:	b002      	add	sp, #8
  403eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ebe:	bf00      	nop

00403ec0 <_fputwc_r>:
  403ec0:	b530      	push	{r4, r5, lr}
  403ec2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403ec4:	f013 0f01 	tst.w	r3, #1
  403ec8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403ecc:	4614      	mov	r4, r2
  403ece:	b083      	sub	sp, #12
  403ed0:	4605      	mov	r5, r0
  403ed2:	b29a      	uxth	r2, r3
  403ed4:	d101      	bne.n	403eda <_fputwc_r+0x1a>
  403ed6:	0590      	lsls	r0, r2, #22
  403ed8:	d51c      	bpl.n	403f14 <_fputwc_r+0x54>
  403eda:	0490      	lsls	r0, r2, #18
  403edc:	d406      	bmi.n	403eec <_fputwc_r+0x2c>
  403ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403ee0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403ee8:	81a3      	strh	r3, [r4, #12]
  403eea:	6662      	str	r2, [r4, #100]	; 0x64
  403eec:	4628      	mov	r0, r5
  403eee:	4622      	mov	r2, r4
  403ef0:	f7ff ff96 	bl	403e20 <__fputwc>
  403ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ef6:	07da      	lsls	r2, r3, #31
  403ef8:	4605      	mov	r5, r0
  403efa:	d402      	bmi.n	403f02 <_fputwc_r+0x42>
  403efc:	89a3      	ldrh	r3, [r4, #12]
  403efe:	059b      	lsls	r3, r3, #22
  403f00:	d502      	bpl.n	403f08 <_fputwc_r+0x48>
  403f02:	4628      	mov	r0, r5
  403f04:	b003      	add	sp, #12
  403f06:	bd30      	pop	{r4, r5, pc}
  403f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f0a:	f000 fc21 	bl	404750 <__retarget_lock_release_recursive>
  403f0e:	4628      	mov	r0, r5
  403f10:	b003      	add	sp, #12
  403f12:	bd30      	pop	{r4, r5, pc}
  403f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403f16:	9101      	str	r1, [sp, #4]
  403f18:	f000 fc18 	bl	40474c <__retarget_lock_acquire_recursive>
  403f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f20:	9901      	ldr	r1, [sp, #4]
  403f22:	b29a      	uxth	r2, r3
  403f24:	e7d9      	b.n	403eda <_fputwc_r+0x1a>
  403f26:	bf00      	nop

00403f28 <_fread_r>:
  403f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f2c:	b085      	sub	sp, #20
  403f2e:	fb02 f703 	mul.w	r7, r2, r3
  403f32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403f34:	2f00      	cmp	r7, #0
  403f36:	d050      	beq.n	403fda <_fread_r+0xb2>
  403f38:	4606      	mov	r6, r0
  403f3a:	460d      	mov	r5, r1
  403f3c:	9301      	str	r3, [sp, #4]
  403f3e:	9202      	str	r2, [sp, #8]
  403f40:	b118      	cbz	r0, 403f4a <_fread_r+0x22>
  403f42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403f44:	2b00      	cmp	r3, #0
  403f46:	f000 80be 	beq.w	4040c6 <_fread_r+0x19e>
  403f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403f4c:	f013 0f01 	tst.w	r3, #1
  403f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f54:	b29a      	uxth	r2, r3
  403f56:	d102      	bne.n	403f5e <_fread_r+0x36>
  403f58:	0590      	lsls	r0, r2, #22
  403f5a:	f140 80b7 	bpl.w	4040cc <_fread_r+0x1a4>
  403f5e:	0491      	lsls	r1, r2, #18
  403f60:	d407      	bmi.n	403f72 <_fread_r+0x4a>
  403f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403f68:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  403f6c:	81a3      	strh	r3, [r4, #12]
  403f6e:	b29a      	uxth	r2, r3
  403f70:	6661      	str	r1, [r4, #100]	; 0x64
  403f72:	f8d4 9004 	ldr.w	r9, [r4, #4]
  403f76:	f1b9 0f00 	cmp.w	r9, #0
  403f7a:	db49      	blt.n	404010 <_fread_r+0xe8>
  403f7c:	0792      	lsls	r2, r2, #30
  403f7e:	464b      	mov	r3, r9
  403f80:	d44c      	bmi.n	40401c <_fread_r+0xf4>
  403f82:	46b0      	mov	r8, r6
  403f84:	46ba      	mov	sl, r7
  403f86:	464e      	mov	r6, r9
  403f88:	e00e      	b.n	403fa8 <_fread_r+0x80>
  403f8a:	6821      	ldr	r1, [r4, #0]
  403f8c:	f000 ffa8 	bl	404ee0 <memcpy>
  403f90:	6823      	ldr	r3, [r4, #0]
  403f92:	4433      	add	r3, r6
  403f94:	6023      	str	r3, [r4, #0]
  403f96:	4621      	mov	r1, r4
  403f98:	4640      	mov	r0, r8
  403f9a:	4435      	add	r5, r6
  403f9c:	ebaa 0a06 	sub.w	sl, sl, r6
  403fa0:	f001 fa58 	bl	405454 <__srefill_r>
  403fa4:	bb10      	cbnz	r0, 403fec <_fread_r+0xc4>
  403fa6:	6866      	ldr	r6, [r4, #4]
  403fa8:	45b2      	cmp	sl, r6
  403faa:	4632      	mov	r2, r6
  403fac:	4628      	mov	r0, r5
  403fae:	d8ec      	bhi.n	403f8a <_fread_r+0x62>
  403fb0:	4652      	mov	r2, sl
  403fb2:	6821      	ldr	r1, [r4, #0]
  403fb4:	f000 ff94 	bl	404ee0 <memcpy>
  403fb8:	6862      	ldr	r2, [r4, #4]
  403fba:	6823      	ldr	r3, [r4, #0]
  403fbc:	eba2 020a 	sub.w	r2, r2, sl
  403fc0:	4453      	add	r3, sl
  403fc2:	6062      	str	r2, [r4, #4]
  403fc4:	6023      	str	r3, [r4, #0]
  403fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fc8:	07da      	lsls	r2, r3, #31
  403fca:	d40a      	bmi.n	403fe2 <_fread_r+0xba>
  403fcc:	89a3      	ldrh	r3, [r4, #12]
  403fce:	059b      	lsls	r3, r3, #22
  403fd0:	d407      	bmi.n	403fe2 <_fread_r+0xba>
  403fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403fd4:	f000 fbbc 	bl	404750 <__retarget_lock_release_recursive>
  403fd8:	9f01      	ldr	r7, [sp, #4]
  403fda:	4638      	mov	r0, r7
  403fdc:	b005      	add	sp, #20
  403fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fe2:	9f01      	ldr	r7, [sp, #4]
  403fe4:	4638      	mov	r0, r7
  403fe6:	b005      	add	sp, #20
  403fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fee:	07d8      	lsls	r0, r3, #31
  403ff0:	d405      	bmi.n	403ffe <_fread_r+0xd6>
  403ff2:	89a3      	ldrh	r3, [r4, #12]
  403ff4:	0599      	lsls	r1, r3, #22
  403ff6:	d402      	bmi.n	403ffe <_fread_r+0xd6>
  403ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ffa:	f000 fba9 	bl	404750 <__retarget_lock_release_recursive>
  403ffe:	9b02      	ldr	r3, [sp, #8]
  404000:	eba7 070a 	sub.w	r7, r7, sl
  404004:	fbb7 f7f3 	udiv	r7, r7, r3
  404008:	4638      	mov	r0, r7
  40400a:	b005      	add	sp, #20
  40400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404010:	2100      	movs	r1, #0
  404012:	0792      	lsls	r2, r2, #30
  404014:	460b      	mov	r3, r1
  404016:	6061      	str	r1, [r4, #4]
  404018:	4689      	mov	r9, r1
  40401a:	d5b2      	bpl.n	403f82 <_fread_r+0x5a>
  40401c:	42bb      	cmp	r3, r7
  40401e:	bf28      	it	cs
  404020:	463b      	movcs	r3, r7
  404022:	461a      	mov	r2, r3
  404024:	6821      	ldr	r1, [r4, #0]
  404026:	9303      	str	r3, [sp, #12]
  404028:	4628      	mov	r0, r5
  40402a:	f000 ff59 	bl	404ee0 <memcpy>
  40402e:	e894 0005 	ldmia.w	r4, {r0, r2}
  404032:	9b03      	ldr	r3, [sp, #12]
  404034:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404036:	eb00 0903 	add.w	r9, r0, r3
  40403a:	1ad2      	subs	r2, r2, r3
  40403c:	f8c4 9000 	str.w	r9, [r4]
  404040:	6062      	str	r2, [r4, #4]
  404042:	eba7 0803 	sub.w	r8, r7, r3
  404046:	2900      	cmp	r1, #0
  404048:	d04b      	beq.n	4040e2 <_fread_r+0x1ba>
  40404a:	f1b8 0f00 	cmp.w	r8, #0
  40404e:	d0ba      	beq.n	403fc6 <_fread_r+0x9e>
  404050:	f104 0040 	add.w	r0, r4, #64	; 0x40
  404054:	4281      	cmp	r1, r0
  404056:	d005      	beq.n	404064 <_fread_r+0x13c>
  404058:	4630      	mov	r0, r6
  40405a:	f000 f897 	bl	40418c <_free_r>
  40405e:	f8d4 9000 	ldr.w	r9, [r4]
  404062:	9b03      	ldr	r3, [sp, #12]
  404064:	2100      	movs	r1, #0
  404066:	6321      	str	r1, [r4, #48]	; 0x30
  404068:	463a      	mov	r2, r7
  40406a:	441d      	add	r5, r3
  40406c:	4633      	mov	r3, r6
  40406e:	464f      	mov	r7, r9
  404070:	4646      	mov	r6, r8
  404072:	f8d4 b010 	ldr.w	fp, [r4, #16]
  404076:	f8d4 a014 	ldr.w	sl, [r4, #20]
  40407a:	4698      	mov	r8, r3
  40407c:	4691      	mov	r9, r2
  40407e:	e001      	b.n	404084 <_fread_r+0x15c>
  404080:	2e00      	cmp	r6, #0
  404082:	d0a0      	beq.n	403fc6 <_fread_r+0x9e>
  404084:	6125      	str	r5, [r4, #16]
  404086:	6166      	str	r6, [r4, #20]
  404088:	6025      	str	r5, [r4, #0]
  40408a:	4621      	mov	r1, r4
  40408c:	4640      	mov	r0, r8
  40408e:	f001 f9e1 	bl	405454 <__srefill_r>
  404092:	6863      	ldr	r3, [r4, #4]
  404094:	f8c4 b010 	str.w	fp, [r4, #16]
  404098:	1af6      	subs	r6, r6, r3
  40409a:	441d      	add	r5, r3
  40409c:	2300      	movs	r3, #0
  40409e:	f8c4 a014 	str.w	sl, [r4, #20]
  4040a2:	6027      	str	r7, [r4, #0]
  4040a4:	6063      	str	r3, [r4, #4]
  4040a6:	2800      	cmp	r0, #0
  4040a8:	d0ea      	beq.n	404080 <_fread_r+0x158>
  4040aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4040ac:	46b0      	mov	r8, r6
  4040ae:	07de      	lsls	r6, r3, #31
  4040b0:	464f      	mov	r7, r9
  4040b2:	d402      	bmi.n	4040ba <_fread_r+0x192>
  4040b4:	89a3      	ldrh	r3, [r4, #12]
  4040b6:	059d      	lsls	r5, r3, #22
  4040b8:	d50f      	bpl.n	4040da <_fread_r+0x1b2>
  4040ba:	eba7 0708 	sub.w	r7, r7, r8
  4040be:	9b02      	ldr	r3, [sp, #8]
  4040c0:	fbb7 f7f3 	udiv	r7, r7, r3
  4040c4:	e789      	b.n	403fda <_fread_r+0xb2>
  4040c6:	f7ff fe59 	bl	403d7c <__sinit>
  4040ca:	e73e      	b.n	403f4a <_fread_r+0x22>
  4040cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040ce:	f000 fb3d 	bl	40474c <__retarget_lock_acquire_recursive>
  4040d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040d6:	b29a      	uxth	r2, r3
  4040d8:	e741      	b.n	403f5e <_fread_r+0x36>
  4040da:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040dc:	f000 fb38 	bl	404750 <__retarget_lock_release_recursive>
  4040e0:	e7eb      	b.n	4040ba <_fread_r+0x192>
  4040e2:	f1b8 0f00 	cmp.w	r8, #0
  4040e6:	d1bf      	bne.n	404068 <_fread_r+0x140>
  4040e8:	e76d      	b.n	403fc6 <_fread_r+0x9e>
  4040ea:	bf00      	nop

004040ec <_malloc_trim_r>:
  4040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040ee:	4f24      	ldr	r7, [pc, #144]	; (404180 <_malloc_trim_r+0x94>)
  4040f0:	460c      	mov	r4, r1
  4040f2:	4606      	mov	r6, r0
  4040f4:	f000 fff2 	bl	4050dc <__malloc_lock>
  4040f8:	68bb      	ldr	r3, [r7, #8]
  4040fa:	685d      	ldr	r5, [r3, #4]
  4040fc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404100:	310f      	adds	r1, #15
  404102:	f025 0503 	bic.w	r5, r5, #3
  404106:	4429      	add	r1, r5
  404108:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40410c:	f021 010f 	bic.w	r1, r1, #15
  404110:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404114:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404118:	db07      	blt.n	40412a <_malloc_trim_r+0x3e>
  40411a:	2100      	movs	r1, #0
  40411c:	4630      	mov	r0, r6
  40411e:	f001 fa23 	bl	405568 <_sbrk_r>
  404122:	68bb      	ldr	r3, [r7, #8]
  404124:	442b      	add	r3, r5
  404126:	4298      	cmp	r0, r3
  404128:	d004      	beq.n	404134 <_malloc_trim_r+0x48>
  40412a:	4630      	mov	r0, r6
  40412c:	f000 ffdc 	bl	4050e8 <__malloc_unlock>
  404130:	2000      	movs	r0, #0
  404132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404134:	4261      	negs	r1, r4
  404136:	4630      	mov	r0, r6
  404138:	f001 fa16 	bl	405568 <_sbrk_r>
  40413c:	3001      	adds	r0, #1
  40413e:	d00d      	beq.n	40415c <_malloc_trim_r+0x70>
  404140:	4b10      	ldr	r3, [pc, #64]	; (404184 <_malloc_trim_r+0x98>)
  404142:	68ba      	ldr	r2, [r7, #8]
  404144:	6819      	ldr	r1, [r3, #0]
  404146:	1b2d      	subs	r5, r5, r4
  404148:	f045 0501 	orr.w	r5, r5, #1
  40414c:	4630      	mov	r0, r6
  40414e:	1b09      	subs	r1, r1, r4
  404150:	6055      	str	r5, [r2, #4]
  404152:	6019      	str	r1, [r3, #0]
  404154:	f000 ffc8 	bl	4050e8 <__malloc_unlock>
  404158:	2001      	movs	r0, #1
  40415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40415c:	2100      	movs	r1, #0
  40415e:	4630      	mov	r0, r6
  404160:	f001 fa02 	bl	405568 <_sbrk_r>
  404164:	68ba      	ldr	r2, [r7, #8]
  404166:	1a83      	subs	r3, r0, r2
  404168:	2b0f      	cmp	r3, #15
  40416a:	ddde      	ble.n	40412a <_malloc_trim_r+0x3e>
  40416c:	4c06      	ldr	r4, [pc, #24]	; (404188 <_malloc_trim_r+0x9c>)
  40416e:	4905      	ldr	r1, [pc, #20]	; (404184 <_malloc_trim_r+0x98>)
  404170:	6824      	ldr	r4, [r4, #0]
  404172:	f043 0301 	orr.w	r3, r3, #1
  404176:	1b00      	subs	r0, r0, r4
  404178:	6053      	str	r3, [r2, #4]
  40417a:	6008      	str	r0, [r1, #0]
  40417c:	e7d5      	b.n	40412a <_malloc_trim_r+0x3e>
  40417e:	bf00      	nop
  404180:	204005c8 	.word	0x204005c8
  404184:	20400d48 	.word	0x20400d48
  404188:	204009d0 	.word	0x204009d0

0040418c <_free_r>:
  40418c:	2900      	cmp	r1, #0
  40418e:	d044      	beq.n	40421a <_free_r+0x8e>
  404190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404194:	460d      	mov	r5, r1
  404196:	4680      	mov	r8, r0
  404198:	f000 ffa0 	bl	4050dc <__malloc_lock>
  40419c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4041a0:	4969      	ldr	r1, [pc, #420]	; (404348 <_free_r+0x1bc>)
  4041a2:	f027 0301 	bic.w	r3, r7, #1
  4041a6:	f1a5 0408 	sub.w	r4, r5, #8
  4041aa:	18e2      	adds	r2, r4, r3
  4041ac:	688e      	ldr	r6, [r1, #8]
  4041ae:	6850      	ldr	r0, [r2, #4]
  4041b0:	42b2      	cmp	r2, r6
  4041b2:	f020 0003 	bic.w	r0, r0, #3
  4041b6:	d05e      	beq.n	404276 <_free_r+0xea>
  4041b8:	07fe      	lsls	r6, r7, #31
  4041ba:	6050      	str	r0, [r2, #4]
  4041bc:	d40b      	bmi.n	4041d6 <_free_r+0x4a>
  4041be:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4041c2:	1be4      	subs	r4, r4, r7
  4041c4:	f101 0e08 	add.w	lr, r1, #8
  4041c8:	68a5      	ldr	r5, [r4, #8]
  4041ca:	4575      	cmp	r5, lr
  4041cc:	443b      	add	r3, r7
  4041ce:	d06d      	beq.n	4042ac <_free_r+0x120>
  4041d0:	68e7      	ldr	r7, [r4, #12]
  4041d2:	60ef      	str	r7, [r5, #12]
  4041d4:	60bd      	str	r5, [r7, #8]
  4041d6:	1815      	adds	r5, r2, r0
  4041d8:	686d      	ldr	r5, [r5, #4]
  4041da:	07ed      	lsls	r5, r5, #31
  4041dc:	d53e      	bpl.n	40425c <_free_r+0xd0>
  4041de:	f043 0201 	orr.w	r2, r3, #1
  4041e2:	6062      	str	r2, [r4, #4]
  4041e4:	50e3      	str	r3, [r4, r3]
  4041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4041ea:	d217      	bcs.n	40421c <_free_r+0x90>
  4041ec:	08db      	lsrs	r3, r3, #3
  4041ee:	1c58      	adds	r0, r3, #1
  4041f0:	109a      	asrs	r2, r3, #2
  4041f2:	684d      	ldr	r5, [r1, #4]
  4041f4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4041f8:	60a7      	str	r7, [r4, #8]
  4041fa:	2301      	movs	r3, #1
  4041fc:	4093      	lsls	r3, r2
  4041fe:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404202:	432b      	orrs	r3, r5
  404204:	3a08      	subs	r2, #8
  404206:	60e2      	str	r2, [r4, #12]
  404208:	604b      	str	r3, [r1, #4]
  40420a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40420e:	60fc      	str	r4, [r7, #12]
  404210:	4640      	mov	r0, r8
  404212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404216:	f000 bf67 	b.w	4050e8 <__malloc_unlock>
  40421a:	4770      	bx	lr
  40421c:	0a5a      	lsrs	r2, r3, #9
  40421e:	2a04      	cmp	r2, #4
  404220:	d852      	bhi.n	4042c8 <_free_r+0x13c>
  404222:	099a      	lsrs	r2, r3, #6
  404224:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404228:	00ff      	lsls	r7, r7, #3
  40422a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40422e:	19c8      	adds	r0, r1, r7
  404230:	59ca      	ldr	r2, [r1, r7]
  404232:	3808      	subs	r0, #8
  404234:	4290      	cmp	r0, r2
  404236:	d04f      	beq.n	4042d8 <_free_r+0x14c>
  404238:	6851      	ldr	r1, [r2, #4]
  40423a:	f021 0103 	bic.w	r1, r1, #3
  40423e:	428b      	cmp	r3, r1
  404240:	d232      	bcs.n	4042a8 <_free_r+0x11c>
  404242:	6892      	ldr	r2, [r2, #8]
  404244:	4290      	cmp	r0, r2
  404246:	d1f7      	bne.n	404238 <_free_r+0xac>
  404248:	68c3      	ldr	r3, [r0, #12]
  40424a:	60a0      	str	r0, [r4, #8]
  40424c:	60e3      	str	r3, [r4, #12]
  40424e:	609c      	str	r4, [r3, #8]
  404250:	60c4      	str	r4, [r0, #12]
  404252:	4640      	mov	r0, r8
  404254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404258:	f000 bf46 	b.w	4050e8 <__malloc_unlock>
  40425c:	6895      	ldr	r5, [r2, #8]
  40425e:	4f3b      	ldr	r7, [pc, #236]	; (40434c <_free_r+0x1c0>)
  404260:	42bd      	cmp	r5, r7
  404262:	4403      	add	r3, r0
  404264:	d040      	beq.n	4042e8 <_free_r+0x15c>
  404266:	68d0      	ldr	r0, [r2, #12]
  404268:	60e8      	str	r0, [r5, #12]
  40426a:	f043 0201 	orr.w	r2, r3, #1
  40426e:	6085      	str	r5, [r0, #8]
  404270:	6062      	str	r2, [r4, #4]
  404272:	50e3      	str	r3, [r4, r3]
  404274:	e7b7      	b.n	4041e6 <_free_r+0x5a>
  404276:	07ff      	lsls	r7, r7, #31
  404278:	4403      	add	r3, r0
  40427a:	d407      	bmi.n	40428c <_free_r+0x100>
  40427c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404280:	1aa4      	subs	r4, r4, r2
  404282:	4413      	add	r3, r2
  404284:	68a0      	ldr	r0, [r4, #8]
  404286:	68e2      	ldr	r2, [r4, #12]
  404288:	60c2      	str	r2, [r0, #12]
  40428a:	6090      	str	r0, [r2, #8]
  40428c:	4a30      	ldr	r2, [pc, #192]	; (404350 <_free_r+0x1c4>)
  40428e:	6812      	ldr	r2, [r2, #0]
  404290:	f043 0001 	orr.w	r0, r3, #1
  404294:	4293      	cmp	r3, r2
  404296:	6060      	str	r0, [r4, #4]
  404298:	608c      	str	r4, [r1, #8]
  40429a:	d3b9      	bcc.n	404210 <_free_r+0x84>
  40429c:	4b2d      	ldr	r3, [pc, #180]	; (404354 <_free_r+0x1c8>)
  40429e:	4640      	mov	r0, r8
  4042a0:	6819      	ldr	r1, [r3, #0]
  4042a2:	f7ff ff23 	bl	4040ec <_malloc_trim_r>
  4042a6:	e7b3      	b.n	404210 <_free_r+0x84>
  4042a8:	4610      	mov	r0, r2
  4042aa:	e7cd      	b.n	404248 <_free_r+0xbc>
  4042ac:	1811      	adds	r1, r2, r0
  4042ae:	6849      	ldr	r1, [r1, #4]
  4042b0:	07c9      	lsls	r1, r1, #31
  4042b2:	d444      	bmi.n	40433e <_free_r+0x1b2>
  4042b4:	6891      	ldr	r1, [r2, #8]
  4042b6:	68d2      	ldr	r2, [r2, #12]
  4042b8:	60ca      	str	r2, [r1, #12]
  4042ba:	4403      	add	r3, r0
  4042bc:	f043 0001 	orr.w	r0, r3, #1
  4042c0:	6091      	str	r1, [r2, #8]
  4042c2:	6060      	str	r0, [r4, #4]
  4042c4:	50e3      	str	r3, [r4, r3]
  4042c6:	e7a3      	b.n	404210 <_free_r+0x84>
  4042c8:	2a14      	cmp	r2, #20
  4042ca:	d816      	bhi.n	4042fa <_free_r+0x16e>
  4042cc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4042d0:	00ff      	lsls	r7, r7, #3
  4042d2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4042d6:	e7aa      	b.n	40422e <_free_r+0xa2>
  4042d8:	10aa      	asrs	r2, r5, #2
  4042da:	2301      	movs	r3, #1
  4042dc:	684d      	ldr	r5, [r1, #4]
  4042de:	4093      	lsls	r3, r2
  4042e0:	432b      	orrs	r3, r5
  4042e2:	604b      	str	r3, [r1, #4]
  4042e4:	4603      	mov	r3, r0
  4042e6:	e7b0      	b.n	40424a <_free_r+0xbe>
  4042e8:	f043 0201 	orr.w	r2, r3, #1
  4042ec:	614c      	str	r4, [r1, #20]
  4042ee:	610c      	str	r4, [r1, #16]
  4042f0:	60e5      	str	r5, [r4, #12]
  4042f2:	60a5      	str	r5, [r4, #8]
  4042f4:	6062      	str	r2, [r4, #4]
  4042f6:	50e3      	str	r3, [r4, r3]
  4042f8:	e78a      	b.n	404210 <_free_r+0x84>
  4042fa:	2a54      	cmp	r2, #84	; 0x54
  4042fc:	d806      	bhi.n	40430c <_free_r+0x180>
  4042fe:	0b1a      	lsrs	r2, r3, #12
  404300:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404304:	00ff      	lsls	r7, r7, #3
  404306:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40430a:	e790      	b.n	40422e <_free_r+0xa2>
  40430c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404310:	d806      	bhi.n	404320 <_free_r+0x194>
  404312:	0bda      	lsrs	r2, r3, #15
  404314:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404318:	00ff      	lsls	r7, r7, #3
  40431a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40431e:	e786      	b.n	40422e <_free_r+0xa2>
  404320:	f240 5054 	movw	r0, #1364	; 0x554
  404324:	4282      	cmp	r2, r0
  404326:	d806      	bhi.n	404336 <_free_r+0x1aa>
  404328:	0c9a      	lsrs	r2, r3, #18
  40432a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40432e:	00ff      	lsls	r7, r7, #3
  404330:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404334:	e77b      	b.n	40422e <_free_r+0xa2>
  404336:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40433a:	257e      	movs	r5, #126	; 0x7e
  40433c:	e777      	b.n	40422e <_free_r+0xa2>
  40433e:	f043 0101 	orr.w	r1, r3, #1
  404342:	6061      	str	r1, [r4, #4]
  404344:	6013      	str	r3, [r2, #0]
  404346:	e763      	b.n	404210 <_free_r+0x84>
  404348:	204005c8 	.word	0x204005c8
  40434c:	204005d0 	.word	0x204005d0
  404350:	204009d4 	.word	0x204009d4
  404354:	20400d78 	.word	0x20400d78

00404358 <__sfvwrite_r>:
  404358:	6893      	ldr	r3, [r2, #8]
  40435a:	2b00      	cmp	r3, #0
  40435c:	d073      	beq.n	404446 <__sfvwrite_r+0xee>
  40435e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404362:	898b      	ldrh	r3, [r1, #12]
  404364:	b083      	sub	sp, #12
  404366:	460c      	mov	r4, r1
  404368:	0719      	lsls	r1, r3, #28
  40436a:	9000      	str	r0, [sp, #0]
  40436c:	4616      	mov	r6, r2
  40436e:	d526      	bpl.n	4043be <__sfvwrite_r+0x66>
  404370:	6922      	ldr	r2, [r4, #16]
  404372:	b322      	cbz	r2, 4043be <__sfvwrite_r+0x66>
  404374:	f013 0002 	ands.w	r0, r3, #2
  404378:	6835      	ldr	r5, [r6, #0]
  40437a:	d02c      	beq.n	4043d6 <__sfvwrite_r+0x7e>
  40437c:	f04f 0900 	mov.w	r9, #0
  404380:	4fb0      	ldr	r7, [pc, #704]	; (404644 <__sfvwrite_r+0x2ec>)
  404382:	46c8      	mov	r8, r9
  404384:	46b2      	mov	sl, r6
  404386:	45b8      	cmp	r8, r7
  404388:	4643      	mov	r3, r8
  40438a:	464a      	mov	r2, r9
  40438c:	bf28      	it	cs
  40438e:	463b      	movcs	r3, r7
  404390:	9800      	ldr	r0, [sp, #0]
  404392:	f1b8 0f00 	cmp.w	r8, #0
  404396:	d050      	beq.n	40443a <__sfvwrite_r+0xe2>
  404398:	69e1      	ldr	r1, [r4, #28]
  40439a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40439c:	47b0      	blx	r6
  40439e:	2800      	cmp	r0, #0
  4043a0:	dd58      	ble.n	404454 <__sfvwrite_r+0xfc>
  4043a2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4043a6:	1a1b      	subs	r3, r3, r0
  4043a8:	4481      	add	r9, r0
  4043aa:	eba8 0800 	sub.w	r8, r8, r0
  4043ae:	f8ca 3008 	str.w	r3, [sl, #8]
  4043b2:	2b00      	cmp	r3, #0
  4043b4:	d1e7      	bne.n	404386 <__sfvwrite_r+0x2e>
  4043b6:	2000      	movs	r0, #0
  4043b8:	b003      	add	sp, #12
  4043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043be:	4621      	mov	r1, r4
  4043c0:	9800      	ldr	r0, [sp, #0]
  4043c2:	f7ff fb5d 	bl	403a80 <__swsetup_r>
  4043c6:	2800      	cmp	r0, #0
  4043c8:	f040 8133 	bne.w	404632 <__sfvwrite_r+0x2da>
  4043cc:	89a3      	ldrh	r3, [r4, #12]
  4043ce:	6835      	ldr	r5, [r6, #0]
  4043d0:	f013 0002 	ands.w	r0, r3, #2
  4043d4:	d1d2      	bne.n	40437c <__sfvwrite_r+0x24>
  4043d6:	f013 0901 	ands.w	r9, r3, #1
  4043da:	d145      	bne.n	404468 <__sfvwrite_r+0x110>
  4043dc:	464f      	mov	r7, r9
  4043de:	9601      	str	r6, [sp, #4]
  4043e0:	b337      	cbz	r7, 404430 <__sfvwrite_r+0xd8>
  4043e2:	059a      	lsls	r2, r3, #22
  4043e4:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4043e8:	f140 8083 	bpl.w	4044f2 <__sfvwrite_r+0x19a>
  4043ec:	4547      	cmp	r7, r8
  4043ee:	46c3      	mov	fp, r8
  4043f0:	f0c0 80ab 	bcc.w	40454a <__sfvwrite_r+0x1f2>
  4043f4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4043f8:	f040 80ac 	bne.w	404554 <__sfvwrite_r+0x1fc>
  4043fc:	6820      	ldr	r0, [r4, #0]
  4043fe:	46ba      	mov	sl, r7
  404400:	465a      	mov	r2, fp
  404402:	4649      	mov	r1, r9
  404404:	f000 fe06 	bl	405014 <memmove>
  404408:	68a2      	ldr	r2, [r4, #8]
  40440a:	6823      	ldr	r3, [r4, #0]
  40440c:	eba2 0208 	sub.w	r2, r2, r8
  404410:	445b      	add	r3, fp
  404412:	60a2      	str	r2, [r4, #8]
  404414:	6023      	str	r3, [r4, #0]
  404416:	9a01      	ldr	r2, [sp, #4]
  404418:	6893      	ldr	r3, [r2, #8]
  40441a:	eba3 030a 	sub.w	r3, r3, sl
  40441e:	44d1      	add	r9, sl
  404420:	eba7 070a 	sub.w	r7, r7, sl
  404424:	6093      	str	r3, [r2, #8]
  404426:	2b00      	cmp	r3, #0
  404428:	d0c5      	beq.n	4043b6 <__sfvwrite_r+0x5e>
  40442a:	89a3      	ldrh	r3, [r4, #12]
  40442c:	2f00      	cmp	r7, #0
  40442e:	d1d8      	bne.n	4043e2 <__sfvwrite_r+0x8a>
  404430:	f8d5 9000 	ldr.w	r9, [r5]
  404434:	686f      	ldr	r7, [r5, #4]
  404436:	3508      	adds	r5, #8
  404438:	e7d2      	b.n	4043e0 <__sfvwrite_r+0x88>
  40443a:	f8d5 9000 	ldr.w	r9, [r5]
  40443e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404442:	3508      	adds	r5, #8
  404444:	e79f      	b.n	404386 <__sfvwrite_r+0x2e>
  404446:	2000      	movs	r0, #0
  404448:	4770      	bx	lr
  40444a:	4621      	mov	r1, r4
  40444c:	9800      	ldr	r0, [sp, #0]
  40444e:	f7ff fc2b 	bl	403ca8 <_fflush_r>
  404452:	b370      	cbz	r0, 4044b2 <__sfvwrite_r+0x15a>
  404454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40445c:	f04f 30ff 	mov.w	r0, #4294967295
  404460:	81a3      	strh	r3, [r4, #12]
  404462:	b003      	add	sp, #12
  404464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404468:	4681      	mov	r9, r0
  40446a:	4633      	mov	r3, r6
  40446c:	464e      	mov	r6, r9
  40446e:	46a8      	mov	r8, r5
  404470:	469a      	mov	sl, r3
  404472:	464d      	mov	r5, r9
  404474:	b34e      	cbz	r6, 4044ca <__sfvwrite_r+0x172>
  404476:	b380      	cbz	r0, 4044da <__sfvwrite_r+0x182>
  404478:	6820      	ldr	r0, [r4, #0]
  40447a:	6923      	ldr	r3, [r4, #16]
  40447c:	6962      	ldr	r2, [r4, #20]
  40447e:	45b1      	cmp	r9, r6
  404480:	46cb      	mov	fp, r9
  404482:	bf28      	it	cs
  404484:	46b3      	movcs	fp, r6
  404486:	4298      	cmp	r0, r3
  404488:	465f      	mov	r7, fp
  40448a:	d904      	bls.n	404496 <__sfvwrite_r+0x13e>
  40448c:	68a3      	ldr	r3, [r4, #8]
  40448e:	4413      	add	r3, r2
  404490:	459b      	cmp	fp, r3
  404492:	f300 80a6 	bgt.w	4045e2 <__sfvwrite_r+0x28a>
  404496:	4593      	cmp	fp, r2
  404498:	db4b      	blt.n	404532 <__sfvwrite_r+0x1da>
  40449a:	4613      	mov	r3, r2
  40449c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40449e:	69e1      	ldr	r1, [r4, #28]
  4044a0:	9800      	ldr	r0, [sp, #0]
  4044a2:	462a      	mov	r2, r5
  4044a4:	47b8      	blx	r7
  4044a6:	1e07      	subs	r7, r0, #0
  4044a8:	ddd4      	ble.n	404454 <__sfvwrite_r+0xfc>
  4044aa:	ebb9 0907 	subs.w	r9, r9, r7
  4044ae:	d0cc      	beq.n	40444a <__sfvwrite_r+0xf2>
  4044b0:	2001      	movs	r0, #1
  4044b2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4044b6:	1bdb      	subs	r3, r3, r7
  4044b8:	443d      	add	r5, r7
  4044ba:	1bf6      	subs	r6, r6, r7
  4044bc:	f8ca 3008 	str.w	r3, [sl, #8]
  4044c0:	2b00      	cmp	r3, #0
  4044c2:	f43f af78 	beq.w	4043b6 <__sfvwrite_r+0x5e>
  4044c6:	2e00      	cmp	r6, #0
  4044c8:	d1d5      	bne.n	404476 <__sfvwrite_r+0x11e>
  4044ca:	f108 0308 	add.w	r3, r8, #8
  4044ce:	e913 0060 	ldmdb	r3, {r5, r6}
  4044d2:	4698      	mov	r8, r3
  4044d4:	3308      	adds	r3, #8
  4044d6:	2e00      	cmp	r6, #0
  4044d8:	d0f9      	beq.n	4044ce <__sfvwrite_r+0x176>
  4044da:	4632      	mov	r2, r6
  4044dc:	210a      	movs	r1, #10
  4044de:	4628      	mov	r0, r5
  4044e0:	f000 fcae 	bl	404e40 <memchr>
  4044e4:	2800      	cmp	r0, #0
  4044e6:	f000 80a1 	beq.w	40462c <__sfvwrite_r+0x2d4>
  4044ea:	3001      	adds	r0, #1
  4044ec:	eba0 0905 	sub.w	r9, r0, r5
  4044f0:	e7c2      	b.n	404478 <__sfvwrite_r+0x120>
  4044f2:	6820      	ldr	r0, [r4, #0]
  4044f4:	6923      	ldr	r3, [r4, #16]
  4044f6:	4298      	cmp	r0, r3
  4044f8:	d802      	bhi.n	404500 <__sfvwrite_r+0x1a8>
  4044fa:	6963      	ldr	r3, [r4, #20]
  4044fc:	429f      	cmp	r7, r3
  4044fe:	d25d      	bcs.n	4045bc <__sfvwrite_r+0x264>
  404500:	45b8      	cmp	r8, r7
  404502:	bf28      	it	cs
  404504:	46b8      	movcs	r8, r7
  404506:	4642      	mov	r2, r8
  404508:	4649      	mov	r1, r9
  40450a:	f000 fd83 	bl	405014 <memmove>
  40450e:	68a3      	ldr	r3, [r4, #8]
  404510:	6822      	ldr	r2, [r4, #0]
  404512:	eba3 0308 	sub.w	r3, r3, r8
  404516:	4442      	add	r2, r8
  404518:	60a3      	str	r3, [r4, #8]
  40451a:	6022      	str	r2, [r4, #0]
  40451c:	b10b      	cbz	r3, 404522 <__sfvwrite_r+0x1ca>
  40451e:	46c2      	mov	sl, r8
  404520:	e779      	b.n	404416 <__sfvwrite_r+0xbe>
  404522:	4621      	mov	r1, r4
  404524:	9800      	ldr	r0, [sp, #0]
  404526:	f7ff fbbf 	bl	403ca8 <_fflush_r>
  40452a:	2800      	cmp	r0, #0
  40452c:	d192      	bne.n	404454 <__sfvwrite_r+0xfc>
  40452e:	46c2      	mov	sl, r8
  404530:	e771      	b.n	404416 <__sfvwrite_r+0xbe>
  404532:	465a      	mov	r2, fp
  404534:	4629      	mov	r1, r5
  404536:	f000 fd6d 	bl	405014 <memmove>
  40453a:	68a2      	ldr	r2, [r4, #8]
  40453c:	6823      	ldr	r3, [r4, #0]
  40453e:	eba2 020b 	sub.w	r2, r2, fp
  404542:	445b      	add	r3, fp
  404544:	60a2      	str	r2, [r4, #8]
  404546:	6023      	str	r3, [r4, #0]
  404548:	e7af      	b.n	4044aa <__sfvwrite_r+0x152>
  40454a:	6820      	ldr	r0, [r4, #0]
  40454c:	46b8      	mov	r8, r7
  40454e:	46ba      	mov	sl, r7
  404550:	46bb      	mov	fp, r7
  404552:	e755      	b.n	404400 <__sfvwrite_r+0xa8>
  404554:	6962      	ldr	r2, [r4, #20]
  404556:	6820      	ldr	r0, [r4, #0]
  404558:	6921      	ldr	r1, [r4, #16]
  40455a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40455e:	eba0 0a01 	sub.w	sl, r0, r1
  404562:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404566:	f10a 0001 	add.w	r0, sl, #1
  40456a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40456e:	4438      	add	r0, r7
  404570:	4540      	cmp	r0, r8
  404572:	4642      	mov	r2, r8
  404574:	bf84      	itt	hi
  404576:	4680      	movhi	r8, r0
  404578:	4642      	movhi	r2, r8
  40457a:	055b      	lsls	r3, r3, #21
  40457c:	d544      	bpl.n	404608 <__sfvwrite_r+0x2b0>
  40457e:	4611      	mov	r1, r2
  404580:	9800      	ldr	r0, [sp, #0]
  404582:	f000 f967 	bl	404854 <_malloc_r>
  404586:	4683      	mov	fp, r0
  404588:	2800      	cmp	r0, #0
  40458a:	d055      	beq.n	404638 <__sfvwrite_r+0x2e0>
  40458c:	4652      	mov	r2, sl
  40458e:	6921      	ldr	r1, [r4, #16]
  404590:	f000 fca6 	bl	404ee0 <memcpy>
  404594:	89a3      	ldrh	r3, [r4, #12]
  404596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40459e:	81a3      	strh	r3, [r4, #12]
  4045a0:	eb0b 000a 	add.w	r0, fp, sl
  4045a4:	eba8 030a 	sub.w	r3, r8, sl
  4045a8:	f8c4 b010 	str.w	fp, [r4, #16]
  4045ac:	f8c4 8014 	str.w	r8, [r4, #20]
  4045b0:	6020      	str	r0, [r4, #0]
  4045b2:	60a3      	str	r3, [r4, #8]
  4045b4:	46b8      	mov	r8, r7
  4045b6:	46ba      	mov	sl, r7
  4045b8:	46bb      	mov	fp, r7
  4045ba:	e721      	b.n	404400 <__sfvwrite_r+0xa8>
  4045bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4045c0:	42b9      	cmp	r1, r7
  4045c2:	bf28      	it	cs
  4045c4:	4639      	movcs	r1, r7
  4045c6:	464a      	mov	r2, r9
  4045c8:	fb91 f1f3 	sdiv	r1, r1, r3
  4045cc:	9800      	ldr	r0, [sp, #0]
  4045ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4045d0:	fb03 f301 	mul.w	r3, r3, r1
  4045d4:	69e1      	ldr	r1, [r4, #28]
  4045d6:	47b0      	blx	r6
  4045d8:	f1b0 0a00 	subs.w	sl, r0, #0
  4045dc:	f73f af1b 	bgt.w	404416 <__sfvwrite_r+0xbe>
  4045e0:	e738      	b.n	404454 <__sfvwrite_r+0xfc>
  4045e2:	461a      	mov	r2, r3
  4045e4:	4629      	mov	r1, r5
  4045e6:	9301      	str	r3, [sp, #4]
  4045e8:	f000 fd14 	bl	405014 <memmove>
  4045ec:	6822      	ldr	r2, [r4, #0]
  4045ee:	9b01      	ldr	r3, [sp, #4]
  4045f0:	9800      	ldr	r0, [sp, #0]
  4045f2:	441a      	add	r2, r3
  4045f4:	6022      	str	r2, [r4, #0]
  4045f6:	4621      	mov	r1, r4
  4045f8:	f7ff fb56 	bl	403ca8 <_fflush_r>
  4045fc:	9b01      	ldr	r3, [sp, #4]
  4045fe:	2800      	cmp	r0, #0
  404600:	f47f af28 	bne.w	404454 <__sfvwrite_r+0xfc>
  404604:	461f      	mov	r7, r3
  404606:	e750      	b.n	4044aa <__sfvwrite_r+0x152>
  404608:	9800      	ldr	r0, [sp, #0]
  40460a:	f000 fd73 	bl	4050f4 <_realloc_r>
  40460e:	4683      	mov	fp, r0
  404610:	2800      	cmp	r0, #0
  404612:	d1c5      	bne.n	4045a0 <__sfvwrite_r+0x248>
  404614:	9d00      	ldr	r5, [sp, #0]
  404616:	6921      	ldr	r1, [r4, #16]
  404618:	4628      	mov	r0, r5
  40461a:	f7ff fdb7 	bl	40418c <_free_r>
  40461e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404622:	220c      	movs	r2, #12
  404624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404628:	602a      	str	r2, [r5, #0]
  40462a:	e715      	b.n	404458 <__sfvwrite_r+0x100>
  40462c:	f106 0901 	add.w	r9, r6, #1
  404630:	e722      	b.n	404478 <__sfvwrite_r+0x120>
  404632:	f04f 30ff 	mov.w	r0, #4294967295
  404636:	e6bf      	b.n	4043b8 <__sfvwrite_r+0x60>
  404638:	9a00      	ldr	r2, [sp, #0]
  40463a:	230c      	movs	r3, #12
  40463c:	6013      	str	r3, [r2, #0]
  40463e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404642:	e709      	b.n	404458 <__sfvwrite_r+0x100>
  404644:	7ffffc00 	.word	0x7ffffc00

00404648 <_fwalk>:
  404648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40464c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404650:	d01b      	beq.n	40468a <_fwalk+0x42>
  404652:	4688      	mov	r8, r1
  404654:	2600      	movs	r6, #0
  404656:	687d      	ldr	r5, [r7, #4]
  404658:	68bc      	ldr	r4, [r7, #8]
  40465a:	3d01      	subs	r5, #1
  40465c:	d40f      	bmi.n	40467e <_fwalk+0x36>
  40465e:	89a3      	ldrh	r3, [r4, #12]
  404660:	2b01      	cmp	r3, #1
  404662:	f105 35ff 	add.w	r5, r5, #4294967295
  404666:	d906      	bls.n	404676 <_fwalk+0x2e>
  404668:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40466c:	3301      	adds	r3, #1
  40466e:	4620      	mov	r0, r4
  404670:	d001      	beq.n	404676 <_fwalk+0x2e>
  404672:	47c0      	blx	r8
  404674:	4306      	orrs	r6, r0
  404676:	1c6b      	adds	r3, r5, #1
  404678:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40467c:	d1ef      	bne.n	40465e <_fwalk+0x16>
  40467e:	683f      	ldr	r7, [r7, #0]
  404680:	2f00      	cmp	r7, #0
  404682:	d1e8      	bne.n	404656 <_fwalk+0xe>
  404684:	4630      	mov	r0, r6
  404686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40468a:	463e      	mov	r6, r7
  40468c:	4630      	mov	r0, r6
  40468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404692:	bf00      	nop

00404694 <_fwalk_reent>:
  404694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404698:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40469c:	d01f      	beq.n	4046de <_fwalk_reent+0x4a>
  40469e:	4688      	mov	r8, r1
  4046a0:	4606      	mov	r6, r0
  4046a2:	f04f 0900 	mov.w	r9, #0
  4046a6:	687d      	ldr	r5, [r7, #4]
  4046a8:	68bc      	ldr	r4, [r7, #8]
  4046aa:	3d01      	subs	r5, #1
  4046ac:	d411      	bmi.n	4046d2 <_fwalk_reent+0x3e>
  4046ae:	89a3      	ldrh	r3, [r4, #12]
  4046b0:	2b01      	cmp	r3, #1
  4046b2:	f105 35ff 	add.w	r5, r5, #4294967295
  4046b6:	d908      	bls.n	4046ca <_fwalk_reent+0x36>
  4046b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4046bc:	3301      	adds	r3, #1
  4046be:	4621      	mov	r1, r4
  4046c0:	4630      	mov	r0, r6
  4046c2:	d002      	beq.n	4046ca <_fwalk_reent+0x36>
  4046c4:	47c0      	blx	r8
  4046c6:	ea49 0900 	orr.w	r9, r9, r0
  4046ca:	1c6b      	adds	r3, r5, #1
  4046cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4046d0:	d1ed      	bne.n	4046ae <_fwalk_reent+0x1a>
  4046d2:	683f      	ldr	r7, [r7, #0]
  4046d4:	2f00      	cmp	r7, #0
  4046d6:	d1e6      	bne.n	4046a6 <_fwalk_reent+0x12>
  4046d8:	4648      	mov	r0, r9
  4046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046de:	46b9      	mov	r9, r7
  4046e0:	4648      	mov	r0, r9
  4046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046e6:	bf00      	nop

004046e8 <iswspace>:
  4046e8:	28ff      	cmp	r0, #255	; 0xff
  4046ea:	d901      	bls.n	4046f0 <iswspace+0x8>
  4046ec:	2000      	movs	r0, #0
  4046ee:	4770      	bx	lr
  4046f0:	b510      	push	{r4, lr}
  4046f2:	4604      	mov	r4, r0
  4046f4:	f000 f818 	bl	404728 <__locale_ctype_ptr>
  4046f8:	4420      	add	r0, r4
  4046fa:	7840      	ldrb	r0, [r0, #1]
  4046fc:	f000 0008 	and.w	r0, r0, #8
  404700:	bd10      	pop	{r4, pc}
  404702:	bf00      	nop

00404704 <__locale_mb_cur_max>:
  404704:	4b04      	ldr	r3, [pc, #16]	; (404718 <__locale_mb_cur_max+0x14>)
  404706:	4a05      	ldr	r2, [pc, #20]	; (40471c <__locale_mb_cur_max+0x18>)
  404708:	681b      	ldr	r3, [r3, #0]
  40470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40470c:	2b00      	cmp	r3, #0
  40470e:	bf08      	it	eq
  404710:	4613      	moveq	r3, r2
  404712:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404716:	4770      	bx	lr
  404718:	20400028 	.word	0x20400028
  40471c:	2040045c 	.word	0x2040045c

00404720 <__locale_ctype_ptr_l>:
  404720:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  404724:	4770      	bx	lr
  404726:	bf00      	nop

00404728 <__locale_ctype_ptr>:
  404728:	4b04      	ldr	r3, [pc, #16]	; (40473c <__locale_ctype_ptr+0x14>)
  40472a:	4a05      	ldr	r2, [pc, #20]	; (404740 <__locale_ctype_ptr+0x18>)
  40472c:	681b      	ldr	r3, [r3, #0]
  40472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404730:	2b00      	cmp	r3, #0
  404732:	bf08      	it	eq
  404734:	4613      	moveq	r3, r2
  404736:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  40473a:	4770      	bx	lr
  40473c:	20400028 	.word	0x20400028
  404740:	2040045c 	.word	0x2040045c

00404744 <__retarget_lock_init_recursive>:
  404744:	4770      	bx	lr
  404746:	bf00      	nop

00404748 <__retarget_lock_close_recursive>:
  404748:	4770      	bx	lr
  40474a:	bf00      	nop

0040474c <__retarget_lock_acquire_recursive>:
  40474c:	4770      	bx	lr
  40474e:	bf00      	nop

00404750 <__retarget_lock_release_recursive>:
  404750:	4770      	bx	lr
  404752:	bf00      	nop

00404754 <__swhatbuf_r>:
  404754:	b570      	push	{r4, r5, r6, lr}
  404756:	460c      	mov	r4, r1
  404758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40475c:	2900      	cmp	r1, #0
  40475e:	b090      	sub	sp, #64	; 0x40
  404760:	4615      	mov	r5, r2
  404762:	461e      	mov	r6, r3
  404764:	db14      	blt.n	404790 <__swhatbuf_r+0x3c>
  404766:	aa01      	add	r2, sp, #4
  404768:	f001 fd98 	bl	40629c <_fstat_r>
  40476c:	2800      	cmp	r0, #0
  40476e:	db0f      	blt.n	404790 <__swhatbuf_r+0x3c>
  404770:	9a02      	ldr	r2, [sp, #8]
  404772:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404776:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40477a:	fab2 f282 	clz	r2, r2
  40477e:	0952      	lsrs	r2, r2, #5
  404780:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404784:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404788:	6032      	str	r2, [r6, #0]
  40478a:	602b      	str	r3, [r5, #0]
  40478c:	b010      	add	sp, #64	; 0x40
  40478e:	bd70      	pop	{r4, r5, r6, pc}
  404790:	89a2      	ldrh	r2, [r4, #12]
  404792:	2300      	movs	r3, #0
  404794:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404798:	6033      	str	r3, [r6, #0]
  40479a:	d004      	beq.n	4047a6 <__swhatbuf_r+0x52>
  40479c:	2240      	movs	r2, #64	; 0x40
  40479e:	4618      	mov	r0, r3
  4047a0:	602a      	str	r2, [r5, #0]
  4047a2:	b010      	add	sp, #64	; 0x40
  4047a4:	bd70      	pop	{r4, r5, r6, pc}
  4047a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4047aa:	602b      	str	r3, [r5, #0]
  4047ac:	b010      	add	sp, #64	; 0x40
  4047ae:	bd70      	pop	{r4, r5, r6, pc}

004047b0 <__smakebuf_r>:
  4047b0:	898a      	ldrh	r2, [r1, #12]
  4047b2:	0792      	lsls	r2, r2, #30
  4047b4:	460b      	mov	r3, r1
  4047b6:	d506      	bpl.n	4047c6 <__smakebuf_r+0x16>
  4047b8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4047bc:	2101      	movs	r1, #1
  4047be:	601a      	str	r2, [r3, #0]
  4047c0:	611a      	str	r2, [r3, #16]
  4047c2:	6159      	str	r1, [r3, #20]
  4047c4:	4770      	bx	lr
  4047c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047c8:	b083      	sub	sp, #12
  4047ca:	ab01      	add	r3, sp, #4
  4047cc:	466a      	mov	r2, sp
  4047ce:	460c      	mov	r4, r1
  4047d0:	4606      	mov	r6, r0
  4047d2:	f7ff ffbf 	bl	404754 <__swhatbuf_r>
  4047d6:	9900      	ldr	r1, [sp, #0]
  4047d8:	4605      	mov	r5, r0
  4047da:	4630      	mov	r0, r6
  4047dc:	f000 f83a 	bl	404854 <_malloc_r>
  4047e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047e4:	b1d8      	cbz	r0, 40481e <__smakebuf_r+0x6e>
  4047e6:	9a01      	ldr	r2, [sp, #4]
  4047e8:	4f15      	ldr	r7, [pc, #84]	; (404840 <__smakebuf_r+0x90>)
  4047ea:	9900      	ldr	r1, [sp, #0]
  4047ec:	63f7      	str	r7, [r6, #60]	; 0x3c
  4047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4047f2:	81a3      	strh	r3, [r4, #12]
  4047f4:	6020      	str	r0, [r4, #0]
  4047f6:	6120      	str	r0, [r4, #16]
  4047f8:	6161      	str	r1, [r4, #20]
  4047fa:	b91a      	cbnz	r2, 404804 <__smakebuf_r+0x54>
  4047fc:	432b      	orrs	r3, r5
  4047fe:	81a3      	strh	r3, [r4, #12]
  404800:	b003      	add	sp, #12
  404802:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404804:	4630      	mov	r0, r6
  404806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40480a:	f001 fd5b 	bl	4062c4 <_isatty_r>
  40480e:	b1a0      	cbz	r0, 40483a <__smakebuf_r+0x8a>
  404810:	89a3      	ldrh	r3, [r4, #12]
  404812:	f023 0303 	bic.w	r3, r3, #3
  404816:	f043 0301 	orr.w	r3, r3, #1
  40481a:	b21b      	sxth	r3, r3
  40481c:	e7ee      	b.n	4047fc <__smakebuf_r+0x4c>
  40481e:	059a      	lsls	r2, r3, #22
  404820:	d4ee      	bmi.n	404800 <__smakebuf_r+0x50>
  404822:	f023 0303 	bic.w	r3, r3, #3
  404826:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40482a:	f043 0302 	orr.w	r3, r3, #2
  40482e:	2101      	movs	r1, #1
  404830:	81a3      	strh	r3, [r4, #12]
  404832:	6022      	str	r2, [r4, #0]
  404834:	6122      	str	r2, [r4, #16]
  404836:	6161      	str	r1, [r4, #20]
  404838:	e7e2      	b.n	404800 <__smakebuf_r+0x50>
  40483a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40483e:	e7dd      	b.n	4047fc <__smakebuf_r+0x4c>
  404840:	00403d21 	.word	0x00403d21

00404844 <malloc>:
  404844:	4b02      	ldr	r3, [pc, #8]	; (404850 <malloc+0xc>)
  404846:	4601      	mov	r1, r0
  404848:	6818      	ldr	r0, [r3, #0]
  40484a:	f000 b803 	b.w	404854 <_malloc_r>
  40484e:	bf00      	nop
  404850:	20400028 	.word	0x20400028

00404854 <_malloc_r>:
  404854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404858:	f101 060b 	add.w	r6, r1, #11
  40485c:	2e16      	cmp	r6, #22
  40485e:	b083      	sub	sp, #12
  404860:	4605      	mov	r5, r0
  404862:	f240 809e 	bls.w	4049a2 <_malloc_r+0x14e>
  404866:	f036 0607 	bics.w	r6, r6, #7
  40486a:	f100 80bd 	bmi.w	4049e8 <_malloc_r+0x194>
  40486e:	42b1      	cmp	r1, r6
  404870:	f200 80ba 	bhi.w	4049e8 <_malloc_r+0x194>
  404874:	f000 fc32 	bl	4050dc <__malloc_lock>
  404878:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40487c:	f0c0 8293 	bcc.w	404da6 <_malloc_r+0x552>
  404880:	0a73      	lsrs	r3, r6, #9
  404882:	f000 80b8 	beq.w	4049f6 <_malloc_r+0x1a2>
  404886:	2b04      	cmp	r3, #4
  404888:	f200 8179 	bhi.w	404b7e <_malloc_r+0x32a>
  40488c:	09b3      	lsrs	r3, r6, #6
  40488e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404892:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404896:	00c3      	lsls	r3, r0, #3
  404898:	4fbf      	ldr	r7, [pc, #764]	; (404b98 <_malloc_r+0x344>)
  40489a:	443b      	add	r3, r7
  40489c:	f1a3 0108 	sub.w	r1, r3, #8
  4048a0:	685c      	ldr	r4, [r3, #4]
  4048a2:	42a1      	cmp	r1, r4
  4048a4:	d106      	bne.n	4048b4 <_malloc_r+0x60>
  4048a6:	e00c      	b.n	4048c2 <_malloc_r+0x6e>
  4048a8:	2a00      	cmp	r2, #0
  4048aa:	f280 80aa 	bge.w	404a02 <_malloc_r+0x1ae>
  4048ae:	68e4      	ldr	r4, [r4, #12]
  4048b0:	42a1      	cmp	r1, r4
  4048b2:	d006      	beq.n	4048c2 <_malloc_r+0x6e>
  4048b4:	6863      	ldr	r3, [r4, #4]
  4048b6:	f023 0303 	bic.w	r3, r3, #3
  4048ba:	1b9a      	subs	r2, r3, r6
  4048bc:	2a0f      	cmp	r2, #15
  4048be:	ddf3      	ble.n	4048a8 <_malloc_r+0x54>
  4048c0:	4670      	mov	r0, lr
  4048c2:	693c      	ldr	r4, [r7, #16]
  4048c4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404bac <_malloc_r+0x358>
  4048c8:	4574      	cmp	r4, lr
  4048ca:	f000 81ab 	beq.w	404c24 <_malloc_r+0x3d0>
  4048ce:	6863      	ldr	r3, [r4, #4]
  4048d0:	f023 0303 	bic.w	r3, r3, #3
  4048d4:	1b9a      	subs	r2, r3, r6
  4048d6:	2a0f      	cmp	r2, #15
  4048d8:	f300 8190 	bgt.w	404bfc <_malloc_r+0x3a8>
  4048dc:	2a00      	cmp	r2, #0
  4048de:	f8c7 e014 	str.w	lr, [r7, #20]
  4048e2:	f8c7 e010 	str.w	lr, [r7, #16]
  4048e6:	f280 809d 	bge.w	404a24 <_malloc_r+0x1d0>
  4048ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4048ee:	f080 8161 	bcs.w	404bb4 <_malloc_r+0x360>
  4048f2:	08db      	lsrs	r3, r3, #3
  4048f4:	f103 0c01 	add.w	ip, r3, #1
  4048f8:	1099      	asrs	r1, r3, #2
  4048fa:	687a      	ldr	r2, [r7, #4]
  4048fc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404900:	f8c4 8008 	str.w	r8, [r4, #8]
  404904:	2301      	movs	r3, #1
  404906:	408b      	lsls	r3, r1
  404908:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40490c:	4313      	orrs	r3, r2
  40490e:	3908      	subs	r1, #8
  404910:	60e1      	str	r1, [r4, #12]
  404912:	607b      	str	r3, [r7, #4]
  404914:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404918:	f8c8 400c 	str.w	r4, [r8, #12]
  40491c:	1082      	asrs	r2, r0, #2
  40491e:	2401      	movs	r4, #1
  404920:	4094      	lsls	r4, r2
  404922:	429c      	cmp	r4, r3
  404924:	f200 808b 	bhi.w	404a3e <_malloc_r+0x1ea>
  404928:	421c      	tst	r4, r3
  40492a:	d106      	bne.n	40493a <_malloc_r+0xe6>
  40492c:	f020 0003 	bic.w	r0, r0, #3
  404930:	0064      	lsls	r4, r4, #1
  404932:	421c      	tst	r4, r3
  404934:	f100 0004 	add.w	r0, r0, #4
  404938:	d0fa      	beq.n	404930 <_malloc_r+0xdc>
  40493a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40493e:	46cc      	mov	ip, r9
  404940:	4680      	mov	r8, r0
  404942:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404946:	459c      	cmp	ip, r3
  404948:	d107      	bne.n	40495a <_malloc_r+0x106>
  40494a:	e16d      	b.n	404c28 <_malloc_r+0x3d4>
  40494c:	2a00      	cmp	r2, #0
  40494e:	f280 817b 	bge.w	404c48 <_malloc_r+0x3f4>
  404952:	68db      	ldr	r3, [r3, #12]
  404954:	459c      	cmp	ip, r3
  404956:	f000 8167 	beq.w	404c28 <_malloc_r+0x3d4>
  40495a:	6859      	ldr	r1, [r3, #4]
  40495c:	f021 0103 	bic.w	r1, r1, #3
  404960:	1b8a      	subs	r2, r1, r6
  404962:	2a0f      	cmp	r2, #15
  404964:	ddf2      	ble.n	40494c <_malloc_r+0xf8>
  404966:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40496a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40496e:	9300      	str	r3, [sp, #0]
  404970:	199c      	adds	r4, r3, r6
  404972:	4628      	mov	r0, r5
  404974:	f046 0601 	orr.w	r6, r6, #1
  404978:	f042 0501 	orr.w	r5, r2, #1
  40497c:	605e      	str	r6, [r3, #4]
  40497e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404982:	f8cc 8008 	str.w	r8, [ip, #8]
  404986:	617c      	str	r4, [r7, #20]
  404988:	613c      	str	r4, [r7, #16]
  40498a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40498e:	f8c4 e008 	str.w	lr, [r4, #8]
  404992:	6065      	str	r5, [r4, #4]
  404994:	505a      	str	r2, [r3, r1]
  404996:	f000 fba7 	bl	4050e8 <__malloc_unlock>
  40499a:	9b00      	ldr	r3, [sp, #0]
  40499c:	f103 0408 	add.w	r4, r3, #8
  4049a0:	e01e      	b.n	4049e0 <_malloc_r+0x18c>
  4049a2:	2910      	cmp	r1, #16
  4049a4:	d820      	bhi.n	4049e8 <_malloc_r+0x194>
  4049a6:	f000 fb99 	bl	4050dc <__malloc_lock>
  4049aa:	2610      	movs	r6, #16
  4049ac:	2318      	movs	r3, #24
  4049ae:	2002      	movs	r0, #2
  4049b0:	4f79      	ldr	r7, [pc, #484]	; (404b98 <_malloc_r+0x344>)
  4049b2:	443b      	add	r3, r7
  4049b4:	f1a3 0208 	sub.w	r2, r3, #8
  4049b8:	685c      	ldr	r4, [r3, #4]
  4049ba:	4294      	cmp	r4, r2
  4049bc:	f000 813d 	beq.w	404c3a <_malloc_r+0x3e6>
  4049c0:	6863      	ldr	r3, [r4, #4]
  4049c2:	68e1      	ldr	r1, [r4, #12]
  4049c4:	68a6      	ldr	r6, [r4, #8]
  4049c6:	f023 0303 	bic.w	r3, r3, #3
  4049ca:	4423      	add	r3, r4
  4049cc:	4628      	mov	r0, r5
  4049ce:	685a      	ldr	r2, [r3, #4]
  4049d0:	60f1      	str	r1, [r6, #12]
  4049d2:	f042 0201 	orr.w	r2, r2, #1
  4049d6:	608e      	str	r6, [r1, #8]
  4049d8:	605a      	str	r2, [r3, #4]
  4049da:	f000 fb85 	bl	4050e8 <__malloc_unlock>
  4049de:	3408      	adds	r4, #8
  4049e0:	4620      	mov	r0, r4
  4049e2:	b003      	add	sp, #12
  4049e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049e8:	2400      	movs	r4, #0
  4049ea:	230c      	movs	r3, #12
  4049ec:	4620      	mov	r0, r4
  4049ee:	602b      	str	r3, [r5, #0]
  4049f0:	b003      	add	sp, #12
  4049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049f6:	2040      	movs	r0, #64	; 0x40
  4049f8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4049fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404a00:	e74a      	b.n	404898 <_malloc_r+0x44>
  404a02:	4423      	add	r3, r4
  404a04:	68e1      	ldr	r1, [r4, #12]
  404a06:	685a      	ldr	r2, [r3, #4]
  404a08:	68a6      	ldr	r6, [r4, #8]
  404a0a:	f042 0201 	orr.w	r2, r2, #1
  404a0e:	60f1      	str	r1, [r6, #12]
  404a10:	4628      	mov	r0, r5
  404a12:	608e      	str	r6, [r1, #8]
  404a14:	605a      	str	r2, [r3, #4]
  404a16:	f000 fb67 	bl	4050e8 <__malloc_unlock>
  404a1a:	3408      	adds	r4, #8
  404a1c:	4620      	mov	r0, r4
  404a1e:	b003      	add	sp, #12
  404a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a24:	4423      	add	r3, r4
  404a26:	4628      	mov	r0, r5
  404a28:	685a      	ldr	r2, [r3, #4]
  404a2a:	f042 0201 	orr.w	r2, r2, #1
  404a2e:	605a      	str	r2, [r3, #4]
  404a30:	f000 fb5a 	bl	4050e8 <__malloc_unlock>
  404a34:	3408      	adds	r4, #8
  404a36:	4620      	mov	r0, r4
  404a38:	b003      	add	sp, #12
  404a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a3e:	68bc      	ldr	r4, [r7, #8]
  404a40:	6863      	ldr	r3, [r4, #4]
  404a42:	f023 0803 	bic.w	r8, r3, #3
  404a46:	45b0      	cmp	r8, r6
  404a48:	d304      	bcc.n	404a54 <_malloc_r+0x200>
  404a4a:	eba8 0306 	sub.w	r3, r8, r6
  404a4e:	2b0f      	cmp	r3, #15
  404a50:	f300 8085 	bgt.w	404b5e <_malloc_r+0x30a>
  404a54:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404bb0 <_malloc_r+0x35c>
  404a58:	4b50      	ldr	r3, [pc, #320]	; (404b9c <_malloc_r+0x348>)
  404a5a:	f8d9 2000 	ldr.w	r2, [r9]
  404a5e:	681b      	ldr	r3, [r3, #0]
  404a60:	3201      	adds	r2, #1
  404a62:	4433      	add	r3, r6
  404a64:	eb04 0a08 	add.w	sl, r4, r8
  404a68:	f000 8155 	beq.w	404d16 <_malloc_r+0x4c2>
  404a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404a70:	330f      	adds	r3, #15
  404a72:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404a76:	f02b 0b0f 	bic.w	fp, fp, #15
  404a7a:	4659      	mov	r1, fp
  404a7c:	4628      	mov	r0, r5
  404a7e:	f000 fd73 	bl	405568 <_sbrk_r>
  404a82:	1c41      	adds	r1, r0, #1
  404a84:	4602      	mov	r2, r0
  404a86:	f000 80fc 	beq.w	404c82 <_malloc_r+0x42e>
  404a8a:	4582      	cmp	sl, r0
  404a8c:	f200 80f7 	bhi.w	404c7e <_malloc_r+0x42a>
  404a90:	4b43      	ldr	r3, [pc, #268]	; (404ba0 <_malloc_r+0x34c>)
  404a92:	6819      	ldr	r1, [r3, #0]
  404a94:	4459      	add	r1, fp
  404a96:	6019      	str	r1, [r3, #0]
  404a98:	f000 814d 	beq.w	404d36 <_malloc_r+0x4e2>
  404a9c:	f8d9 0000 	ldr.w	r0, [r9]
  404aa0:	3001      	adds	r0, #1
  404aa2:	bf1b      	ittet	ne
  404aa4:	eba2 0a0a 	subne.w	sl, r2, sl
  404aa8:	4451      	addne	r1, sl
  404aaa:	f8c9 2000 	streq.w	r2, [r9]
  404aae:	6019      	strne	r1, [r3, #0]
  404ab0:	f012 0107 	ands.w	r1, r2, #7
  404ab4:	f000 8115 	beq.w	404ce2 <_malloc_r+0x48e>
  404ab8:	f1c1 0008 	rsb	r0, r1, #8
  404abc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404ac0:	4402      	add	r2, r0
  404ac2:	3108      	adds	r1, #8
  404ac4:	eb02 090b 	add.w	r9, r2, fp
  404ac8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404acc:	eba1 0909 	sub.w	r9, r1, r9
  404ad0:	4649      	mov	r1, r9
  404ad2:	4628      	mov	r0, r5
  404ad4:	9301      	str	r3, [sp, #4]
  404ad6:	9200      	str	r2, [sp, #0]
  404ad8:	f000 fd46 	bl	405568 <_sbrk_r>
  404adc:	1c43      	adds	r3, r0, #1
  404ade:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404ae2:	f000 8143 	beq.w	404d6c <_malloc_r+0x518>
  404ae6:	1a80      	subs	r0, r0, r2
  404ae8:	4448      	add	r0, r9
  404aea:	f040 0001 	orr.w	r0, r0, #1
  404aee:	6819      	ldr	r1, [r3, #0]
  404af0:	60ba      	str	r2, [r7, #8]
  404af2:	4449      	add	r1, r9
  404af4:	42bc      	cmp	r4, r7
  404af6:	6050      	str	r0, [r2, #4]
  404af8:	6019      	str	r1, [r3, #0]
  404afa:	d017      	beq.n	404b2c <_malloc_r+0x2d8>
  404afc:	f1b8 0f0f 	cmp.w	r8, #15
  404b00:	f240 80fb 	bls.w	404cfa <_malloc_r+0x4a6>
  404b04:	6860      	ldr	r0, [r4, #4]
  404b06:	f1a8 020c 	sub.w	r2, r8, #12
  404b0a:	f022 0207 	bic.w	r2, r2, #7
  404b0e:	eb04 0e02 	add.w	lr, r4, r2
  404b12:	f000 0001 	and.w	r0, r0, #1
  404b16:	f04f 0c05 	mov.w	ip, #5
  404b1a:	4310      	orrs	r0, r2
  404b1c:	2a0f      	cmp	r2, #15
  404b1e:	6060      	str	r0, [r4, #4]
  404b20:	f8ce c004 	str.w	ip, [lr, #4]
  404b24:	f8ce c008 	str.w	ip, [lr, #8]
  404b28:	f200 8117 	bhi.w	404d5a <_malloc_r+0x506>
  404b2c:	4b1d      	ldr	r3, [pc, #116]	; (404ba4 <_malloc_r+0x350>)
  404b2e:	68bc      	ldr	r4, [r7, #8]
  404b30:	681a      	ldr	r2, [r3, #0]
  404b32:	4291      	cmp	r1, r2
  404b34:	bf88      	it	hi
  404b36:	6019      	strhi	r1, [r3, #0]
  404b38:	4b1b      	ldr	r3, [pc, #108]	; (404ba8 <_malloc_r+0x354>)
  404b3a:	681a      	ldr	r2, [r3, #0]
  404b3c:	4291      	cmp	r1, r2
  404b3e:	6862      	ldr	r2, [r4, #4]
  404b40:	bf88      	it	hi
  404b42:	6019      	strhi	r1, [r3, #0]
  404b44:	f022 0203 	bic.w	r2, r2, #3
  404b48:	4296      	cmp	r6, r2
  404b4a:	eba2 0306 	sub.w	r3, r2, r6
  404b4e:	d801      	bhi.n	404b54 <_malloc_r+0x300>
  404b50:	2b0f      	cmp	r3, #15
  404b52:	dc04      	bgt.n	404b5e <_malloc_r+0x30a>
  404b54:	4628      	mov	r0, r5
  404b56:	f000 fac7 	bl	4050e8 <__malloc_unlock>
  404b5a:	2400      	movs	r4, #0
  404b5c:	e740      	b.n	4049e0 <_malloc_r+0x18c>
  404b5e:	19a2      	adds	r2, r4, r6
  404b60:	f043 0301 	orr.w	r3, r3, #1
  404b64:	f046 0601 	orr.w	r6, r6, #1
  404b68:	6066      	str	r6, [r4, #4]
  404b6a:	4628      	mov	r0, r5
  404b6c:	60ba      	str	r2, [r7, #8]
  404b6e:	6053      	str	r3, [r2, #4]
  404b70:	f000 faba 	bl	4050e8 <__malloc_unlock>
  404b74:	3408      	adds	r4, #8
  404b76:	4620      	mov	r0, r4
  404b78:	b003      	add	sp, #12
  404b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b7e:	2b14      	cmp	r3, #20
  404b80:	d971      	bls.n	404c66 <_malloc_r+0x412>
  404b82:	2b54      	cmp	r3, #84	; 0x54
  404b84:	f200 80a3 	bhi.w	404cce <_malloc_r+0x47a>
  404b88:	0b33      	lsrs	r3, r6, #12
  404b8a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404b8e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404b92:	00c3      	lsls	r3, r0, #3
  404b94:	e680      	b.n	404898 <_malloc_r+0x44>
  404b96:	bf00      	nop
  404b98:	204005c8 	.word	0x204005c8
  404b9c:	20400d78 	.word	0x20400d78
  404ba0:	20400d48 	.word	0x20400d48
  404ba4:	20400d70 	.word	0x20400d70
  404ba8:	20400d74 	.word	0x20400d74
  404bac:	204005d0 	.word	0x204005d0
  404bb0:	204009d0 	.word	0x204009d0
  404bb4:	0a5a      	lsrs	r2, r3, #9
  404bb6:	2a04      	cmp	r2, #4
  404bb8:	d95b      	bls.n	404c72 <_malloc_r+0x41e>
  404bba:	2a14      	cmp	r2, #20
  404bbc:	f200 80ae 	bhi.w	404d1c <_malloc_r+0x4c8>
  404bc0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404bc4:	00c9      	lsls	r1, r1, #3
  404bc6:	325b      	adds	r2, #91	; 0x5b
  404bc8:	eb07 0c01 	add.w	ip, r7, r1
  404bcc:	5879      	ldr	r1, [r7, r1]
  404bce:	f1ac 0c08 	sub.w	ip, ip, #8
  404bd2:	458c      	cmp	ip, r1
  404bd4:	f000 8088 	beq.w	404ce8 <_malloc_r+0x494>
  404bd8:	684a      	ldr	r2, [r1, #4]
  404bda:	f022 0203 	bic.w	r2, r2, #3
  404bde:	4293      	cmp	r3, r2
  404be0:	d273      	bcs.n	404cca <_malloc_r+0x476>
  404be2:	6889      	ldr	r1, [r1, #8]
  404be4:	458c      	cmp	ip, r1
  404be6:	d1f7      	bne.n	404bd8 <_malloc_r+0x384>
  404be8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404bec:	687b      	ldr	r3, [r7, #4]
  404bee:	60e2      	str	r2, [r4, #12]
  404bf0:	f8c4 c008 	str.w	ip, [r4, #8]
  404bf4:	6094      	str	r4, [r2, #8]
  404bf6:	f8cc 400c 	str.w	r4, [ip, #12]
  404bfa:	e68f      	b.n	40491c <_malloc_r+0xc8>
  404bfc:	19a1      	adds	r1, r4, r6
  404bfe:	f046 0c01 	orr.w	ip, r6, #1
  404c02:	f042 0601 	orr.w	r6, r2, #1
  404c06:	f8c4 c004 	str.w	ip, [r4, #4]
  404c0a:	4628      	mov	r0, r5
  404c0c:	6179      	str	r1, [r7, #20]
  404c0e:	6139      	str	r1, [r7, #16]
  404c10:	f8c1 e00c 	str.w	lr, [r1, #12]
  404c14:	f8c1 e008 	str.w	lr, [r1, #8]
  404c18:	604e      	str	r6, [r1, #4]
  404c1a:	50e2      	str	r2, [r4, r3]
  404c1c:	f000 fa64 	bl	4050e8 <__malloc_unlock>
  404c20:	3408      	adds	r4, #8
  404c22:	e6dd      	b.n	4049e0 <_malloc_r+0x18c>
  404c24:	687b      	ldr	r3, [r7, #4]
  404c26:	e679      	b.n	40491c <_malloc_r+0xc8>
  404c28:	f108 0801 	add.w	r8, r8, #1
  404c2c:	f018 0f03 	tst.w	r8, #3
  404c30:	f10c 0c08 	add.w	ip, ip, #8
  404c34:	f47f ae85 	bne.w	404942 <_malloc_r+0xee>
  404c38:	e02d      	b.n	404c96 <_malloc_r+0x442>
  404c3a:	68dc      	ldr	r4, [r3, #12]
  404c3c:	42a3      	cmp	r3, r4
  404c3e:	bf08      	it	eq
  404c40:	3002      	addeq	r0, #2
  404c42:	f43f ae3e 	beq.w	4048c2 <_malloc_r+0x6e>
  404c46:	e6bb      	b.n	4049c0 <_malloc_r+0x16c>
  404c48:	4419      	add	r1, r3
  404c4a:	461c      	mov	r4, r3
  404c4c:	684a      	ldr	r2, [r1, #4]
  404c4e:	68db      	ldr	r3, [r3, #12]
  404c50:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404c54:	f042 0201 	orr.w	r2, r2, #1
  404c58:	604a      	str	r2, [r1, #4]
  404c5a:	4628      	mov	r0, r5
  404c5c:	60f3      	str	r3, [r6, #12]
  404c5e:	609e      	str	r6, [r3, #8]
  404c60:	f000 fa42 	bl	4050e8 <__malloc_unlock>
  404c64:	e6bc      	b.n	4049e0 <_malloc_r+0x18c>
  404c66:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404c6a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404c6e:	00c3      	lsls	r3, r0, #3
  404c70:	e612      	b.n	404898 <_malloc_r+0x44>
  404c72:	099a      	lsrs	r2, r3, #6
  404c74:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404c78:	00c9      	lsls	r1, r1, #3
  404c7a:	3238      	adds	r2, #56	; 0x38
  404c7c:	e7a4      	b.n	404bc8 <_malloc_r+0x374>
  404c7e:	42bc      	cmp	r4, r7
  404c80:	d054      	beq.n	404d2c <_malloc_r+0x4d8>
  404c82:	68bc      	ldr	r4, [r7, #8]
  404c84:	6862      	ldr	r2, [r4, #4]
  404c86:	f022 0203 	bic.w	r2, r2, #3
  404c8a:	e75d      	b.n	404b48 <_malloc_r+0x2f4>
  404c8c:	f859 3908 	ldr.w	r3, [r9], #-8
  404c90:	4599      	cmp	r9, r3
  404c92:	f040 8086 	bne.w	404da2 <_malloc_r+0x54e>
  404c96:	f010 0f03 	tst.w	r0, #3
  404c9a:	f100 30ff 	add.w	r0, r0, #4294967295
  404c9e:	d1f5      	bne.n	404c8c <_malloc_r+0x438>
  404ca0:	687b      	ldr	r3, [r7, #4]
  404ca2:	ea23 0304 	bic.w	r3, r3, r4
  404ca6:	607b      	str	r3, [r7, #4]
  404ca8:	0064      	lsls	r4, r4, #1
  404caa:	429c      	cmp	r4, r3
  404cac:	f63f aec7 	bhi.w	404a3e <_malloc_r+0x1ea>
  404cb0:	2c00      	cmp	r4, #0
  404cb2:	f43f aec4 	beq.w	404a3e <_malloc_r+0x1ea>
  404cb6:	421c      	tst	r4, r3
  404cb8:	4640      	mov	r0, r8
  404cba:	f47f ae3e 	bne.w	40493a <_malloc_r+0xe6>
  404cbe:	0064      	lsls	r4, r4, #1
  404cc0:	421c      	tst	r4, r3
  404cc2:	f100 0004 	add.w	r0, r0, #4
  404cc6:	d0fa      	beq.n	404cbe <_malloc_r+0x46a>
  404cc8:	e637      	b.n	40493a <_malloc_r+0xe6>
  404cca:	468c      	mov	ip, r1
  404ccc:	e78c      	b.n	404be8 <_malloc_r+0x394>
  404cce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404cd2:	d815      	bhi.n	404d00 <_malloc_r+0x4ac>
  404cd4:	0bf3      	lsrs	r3, r6, #15
  404cd6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404cda:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404cde:	00c3      	lsls	r3, r0, #3
  404ce0:	e5da      	b.n	404898 <_malloc_r+0x44>
  404ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404ce6:	e6ed      	b.n	404ac4 <_malloc_r+0x270>
  404ce8:	687b      	ldr	r3, [r7, #4]
  404cea:	1092      	asrs	r2, r2, #2
  404cec:	2101      	movs	r1, #1
  404cee:	fa01 f202 	lsl.w	r2, r1, r2
  404cf2:	4313      	orrs	r3, r2
  404cf4:	607b      	str	r3, [r7, #4]
  404cf6:	4662      	mov	r2, ip
  404cf8:	e779      	b.n	404bee <_malloc_r+0x39a>
  404cfa:	2301      	movs	r3, #1
  404cfc:	6053      	str	r3, [r2, #4]
  404cfe:	e729      	b.n	404b54 <_malloc_r+0x300>
  404d00:	f240 5254 	movw	r2, #1364	; 0x554
  404d04:	4293      	cmp	r3, r2
  404d06:	d822      	bhi.n	404d4e <_malloc_r+0x4fa>
  404d08:	0cb3      	lsrs	r3, r6, #18
  404d0a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404d0e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404d12:	00c3      	lsls	r3, r0, #3
  404d14:	e5c0      	b.n	404898 <_malloc_r+0x44>
  404d16:	f103 0b10 	add.w	fp, r3, #16
  404d1a:	e6ae      	b.n	404a7a <_malloc_r+0x226>
  404d1c:	2a54      	cmp	r2, #84	; 0x54
  404d1e:	d829      	bhi.n	404d74 <_malloc_r+0x520>
  404d20:	0b1a      	lsrs	r2, r3, #12
  404d22:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404d26:	00c9      	lsls	r1, r1, #3
  404d28:	326e      	adds	r2, #110	; 0x6e
  404d2a:	e74d      	b.n	404bc8 <_malloc_r+0x374>
  404d2c:	4b20      	ldr	r3, [pc, #128]	; (404db0 <_malloc_r+0x55c>)
  404d2e:	6819      	ldr	r1, [r3, #0]
  404d30:	4459      	add	r1, fp
  404d32:	6019      	str	r1, [r3, #0]
  404d34:	e6b2      	b.n	404a9c <_malloc_r+0x248>
  404d36:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404d3a:	2800      	cmp	r0, #0
  404d3c:	f47f aeae 	bne.w	404a9c <_malloc_r+0x248>
  404d40:	eb08 030b 	add.w	r3, r8, fp
  404d44:	68ba      	ldr	r2, [r7, #8]
  404d46:	f043 0301 	orr.w	r3, r3, #1
  404d4a:	6053      	str	r3, [r2, #4]
  404d4c:	e6ee      	b.n	404b2c <_malloc_r+0x2d8>
  404d4e:	207f      	movs	r0, #127	; 0x7f
  404d50:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404d54:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404d58:	e59e      	b.n	404898 <_malloc_r+0x44>
  404d5a:	f104 0108 	add.w	r1, r4, #8
  404d5e:	4628      	mov	r0, r5
  404d60:	9300      	str	r3, [sp, #0]
  404d62:	f7ff fa13 	bl	40418c <_free_r>
  404d66:	9b00      	ldr	r3, [sp, #0]
  404d68:	6819      	ldr	r1, [r3, #0]
  404d6a:	e6df      	b.n	404b2c <_malloc_r+0x2d8>
  404d6c:	2001      	movs	r0, #1
  404d6e:	f04f 0900 	mov.w	r9, #0
  404d72:	e6bc      	b.n	404aee <_malloc_r+0x29a>
  404d74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404d78:	d805      	bhi.n	404d86 <_malloc_r+0x532>
  404d7a:	0bda      	lsrs	r2, r3, #15
  404d7c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404d80:	00c9      	lsls	r1, r1, #3
  404d82:	3277      	adds	r2, #119	; 0x77
  404d84:	e720      	b.n	404bc8 <_malloc_r+0x374>
  404d86:	f240 5154 	movw	r1, #1364	; 0x554
  404d8a:	428a      	cmp	r2, r1
  404d8c:	d805      	bhi.n	404d9a <_malloc_r+0x546>
  404d8e:	0c9a      	lsrs	r2, r3, #18
  404d90:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404d94:	00c9      	lsls	r1, r1, #3
  404d96:	327c      	adds	r2, #124	; 0x7c
  404d98:	e716      	b.n	404bc8 <_malloc_r+0x374>
  404d9a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404d9e:	227e      	movs	r2, #126	; 0x7e
  404da0:	e712      	b.n	404bc8 <_malloc_r+0x374>
  404da2:	687b      	ldr	r3, [r7, #4]
  404da4:	e780      	b.n	404ca8 <_malloc_r+0x454>
  404da6:	08f0      	lsrs	r0, r6, #3
  404da8:	f106 0308 	add.w	r3, r6, #8
  404dac:	e600      	b.n	4049b0 <_malloc_r+0x15c>
  404dae:	bf00      	nop
  404db0:	20400d48 	.word	0x20400d48

00404db4 <_mbrtowc_r>:
  404db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  404db6:	b083      	sub	sp, #12
  404db8:	4607      	mov	r7, r0
  404dba:	9d08      	ldr	r5, [sp, #32]
  404dbc:	b192      	cbz	r2, 404de4 <_mbrtowc_r+0x30>
  404dbe:	4c11      	ldr	r4, [pc, #68]	; (404e04 <_mbrtowc_r+0x50>)
  404dc0:	4e11      	ldr	r6, [pc, #68]	; (404e08 <_mbrtowc_r+0x54>)
  404dc2:	6824      	ldr	r4, [r4, #0]
  404dc4:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404dc6:	9500      	str	r5, [sp, #0]
  404dc8:	2c00      	cmp	r4, #0
  404dca:	bf08      	it	eq
  404dcc:	4634      	moveq	r4, r6
  404dce:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
  404dd2:	47a0      	blx	r4
  404dd4:	1c43      	adds	r3, r0, #1
  404dd6:	d103      	bne.n	404de0 <_mbrtowc_r+0x2c>
  404dd8:	2200      	movs	r2, #0
  404dda:	238a      	movs	r3, #138	; 0x8a
  404ddc:	602a      	str	r2, [r5, #0]
  404dde:	603b      	str	r3, [r7, #0]
  404de0:	b003      	add	sp, #12
  404de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404de4:	4b07      	ldr	r3, [pc, #28]	; (404e04 <_mbrtowc_r+0x50>)
  404de6:	4908      	ldr	r1, [pc, #32]	; (404e08 <_mbrtowc_r+0x54>)
  404de8:	681b      	ldr	r3, [r3, #0]
  404dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404dec:	9500      	str	r5, [sp, #0]
  404dee:	2b00      	cmp	r3, #0
  404df0:	bf08      	it	eq
  404df2:	460b      	moveq	r3, r1
  404df4:	4614      	mov	r4, r2
  404df6:	4621      	mov	r1, r4
  404df8:	4a04      	ldr	r2, [pc, #16]	; (404e0c <_mbrtowc_r+0x58>)
  404dfa:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
  404dfe:	2301      	movs	r3, #1
  404e00:	47a0      	blx	r4
  404e02:	e7e7      	b.n	404dd4 <_mbrtowc_r+0x20>
  404e04:	20400028 	.word	0x20400028
  404e08:	2040045c 	.word	0x2040045c
  404e0c:	0040681c 	.word	0x0040681c

00404e10 <__ascii_mbtowc>:
  404e10:	b082      	sub	sp, #8
  404e12:	b149      	cbz	r1, 404e28 <__ascii_mbtowc+0x18>
  404e14:	b15a      	cbz	r2, 404e2e <__ascii_mbtowc+0x1e>
  404e16:	b16b      	cbz	r3, 404e34 <__ascii_mbtowc+0x24>
  404e18:	7813      	ldrb	r3, [r2, #0]
  404e1a:	600b      	str	r3, [r1, #0]
  404e1c:	7812      	ldrb	r2, [r2, #0]
  404e1e:	1c10      	adds	r0, r2, #0
  404e20:	bf18      	it	ne
  404e22:	2001      	movne	r0, #1
  404e24:	b002      	add	sp, #8
  404e26:	4770      	bx	lr
  404e28:	a901      	add	r1, sp, #4
  404e2a:	2a00      	cmp	r2, #0
  404e2c:	d1f3      	bne.n	404e16 <__ascii_mbtowc+0x6>
  404e2e:	4610      	mov	r0, r2
  404e30:	b002      	add	sp, #8
  404e32:	4770      	bx	lr
  404e34:	f06f 0001 	mvn.w	r0, #1
  404e38:	e7f4      	b.n	404e24 <__ascii_mbtowc+0x14>
  404e3a:	bf00      	nop
  404e3c:	0000      	movs	r0, r0
	...

00404e40 <memchr>:
  404e40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e44:	2a10      	cmp	r2, #16
  404e46:	db2b      	blt.n	404ea0 <memchr+0x60>
  404e48:	f010 0f07 	tst.w	r0, #7
  404e4c:	d008      	beq.n	404e60 <memchr+0x20>
  404e4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e52:	3a01      	subs	r2, #1
  404e54:	428b      	cmp	r3, r1
  404e56:	d02d      	beq.n	404eb4 <memchr+0x74>
  404e58:	f010 0f07 	tst.w	r0, #7
  404e5c:	b342      	cbz	r2, 404eb0 <memchr+0x70>
  404e5e:	d1f6      	bne.n	404e4e <memchr+0xe>
  404e60:	b4f0      	push	{r4, r5, r6, r7}
  404e62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404e66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404e6a:	f022 0407 	bic.w	r4, r2, #7
  404e6e:	f07f 0700 	mvns.w	r7, #0
  404e72:	2300      	movs	r3, #0
  404e74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404e78:	3c08      	subs	r4, #8
  404e7a:	ea85 0501 	eor.w	r5, r5, r1
  404e7e:	ea86 0601 	eor.w	r6, r6, r1
  404e82:	fa85 f547 	uadd8	r5, r5, r7
  404e86:	faa3 f587 	sel	r5, r3, r7
  404e8a:	fa86 f647 	uadd8	r6, r6, r7
  404e8e:	faa5 f687 	sel	r6, r5, r7
  404e92:	b98e      	cbnz	r6, 404eb8 <memchr+0x78>
  404e94:	d1ee      	bne.n	404e74 <memchr+0x34>
  404e96:	bcf0      	pop	{r4, r5, r6, r7}
  404e98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e9c:	f002 0207 	and.w	r2, r2, #7
  404ea0:	b132      	cbz	r2, 404eb0 <memchr+0x70>
  404ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ea6:	3a01      	subs	r2, #1
  404ea8:	ea83 0301 	eor.w	r3, r3, r1
  404eac:	b113      	cbz	r3, 404eb4 <memchr+0x74>
  404eae:	d1f8      	bne.n	404ea2 <memchr+0x62>
  404eb0:	2000      	movs	r0, #0
  404eb2:	4770      	bx	lr
  404eb4:	3801      	subs	r0, #1
  404eb6:	4770      	bx	lr
  404eb8:	2d00      	cmp	r5, #0
  404eba:	bf06      	itte	eq
  404ebc:	4635      	moveq	r5, r6
  404ebe:	3803      	subeq	r0, #3
  404ec0:	3807      	subne	r0, #7
  404ec2:	f015 0f01 	tst.w	r5, #1
  404ec6:	d107      	bne.n	404ed8 <memchr+0x98>
  404ec8:	3001      	adds	r0, #1
  404eca:	f415 7f80 	tst.w	r5, #256	; 0x100
  404ece:	bf02      	ittt	eq
  404ed0:	3001      	addeq	r0, #1
  404ed2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ed6:	3001      	addeq	r0, #1
  404ed8:	bcf0      	pop	{r4, r5, r6, r7}
  404eda:	3801      	subs	r0, #1
  404edc:	4770      	bx	lr
  404ede:	bf00      	nop

00404ee0 <memcpy>:
  404ee0:	4684      	mov	ip, r0
  404ee2:	ea41 0300 	orr.w	r3, r1, r0
  404ee6:	f013 0303 	ands.w	r3, r3, #3
  404eea:	d16d      	bne.n	404fc8 <memcpy+0xe8>
  404eec:	3a40      	subs	r2, #64	; 0x40
  404eee:	d341      	bcc.n	404f74 <memcpy+0x94>
  404ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ef4:	f840 3b04 	str.w	r3, [r0], #4
  404ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  404efc:	f840 3b04 	str.w	r3, [r0], #4
  404f00:	f851 3b04 	ldr.w	r3, [r1], #4
  404f04:	f840 3b04 	str.w	r3, [r0], #4
  404f08:	f851 3b04 	ldr.w	r3, [r1], #4
  404f0c:	f840 3b04 	str.w	r3, [r0], #4
  404f10:	f851 3b04 	ldr.w	r3, [r1], #4
  404f14:	f840 3b04 	str.w	r3, [r0], #4
  404f18:	f851 3b04 	ldr.w	r3, [r1], #4
  404f1c:	f840 3b04 	str.w	r3, [r0], #4
  404f20:	f851 3b04 	ldr.w	r3, [r1], #4
  404f24:	f840 3b04 	str.w	r3, [r0], #4
  404f28:	f851 3b04 	ldr.w	r3, [r1], #4
  404f2c:	f840 3b04 	str.w	r3, [r0], #4
  404f30:	f851 3b04 	ldr.w	r3, [r1], #4
  404f34:	f840 3b04 	str.w	r3, [r0], #4
  404f38:	f851 3b04 	ldr.w	r3, [r1], #4
  404f3c:	f840 3b04 	str.w	r3, [r0], #4
  404f40:	f851 3b04 	ldr.w	r3, [r1], #4
  404f44:	f840 3b04 	str.w	r3, [r0], #4
  404f48:	f851 3b04 	ldr.w	r3, [r1], #4
  404f4c:	f840 3b04 	str.w	r3, [r0], #4
  404f50:	f851 3b04 	ldr.w	r3, [r1], #4
  404f54:	f840 3b04 	str.w	r3, [r0], #4
  404f58:	f851 3b04 	ldr.w	r3, [r1], #4
  404f5c:	f840 3b04 	str.w	r3, [r0], #4
  404f60:	f851 3b04 	ldr.w	r3, [r1], #4
  404f64:	f840 3b04 	str.w	r3, [r0], #4
  404f68:	f851 3b04 	ldr.w	r3, [r1], #4
  404f6c:	f840 3b04 	str.w	r3, [r0], #4
  404f70:	3a40      	subs	r2, #64	; 0x40
  404f72:	d2bd      	bcs.n	404ef0 <memcpy+0x10>
  404f74:	3230      	adds	r2, #48	; 0x30
  404f76:	d311      	bcc.n	404f9c <memcpy+0xbc>
  404f78:	f851 3b04 	ldr.w	r3, [r1], #4
  404f7c:	f840 3b04 	str.w	r3, [r0], #4
  404f80:	f851 3b04 	ldr.w	r3, [r1], #4
  404f84:	f840 3b04 	str.w	r3, [r0], #4
  404f88:	f851 3b04 	ldr.w	r3, [r1], #4
  404f8c:	f840 3b04 	str.w	r3, [r0], #4
  404f90:	f851 3b04 	ldr.w	r3, [r1], #4
  404f94:	f840 3b04 	str.w	r3, [r0], #4
  404f98:	3a10      	subs	r2, #16
  404f9a:	d2ed      	bcs.n	404f78 <memcpy+0x98>
  404f9c:	320c      	adds	r2, #12
  404f9e:	d305      	bcc.n	404fac <memcpy+0xcc>
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	3a04      	subs	r2, #4
  404faa:	d2f9      	bcs.n	404fa0 <memcpy+0xc0>
  404fac:	3204      	adds	r2, #4
  404fae:	d008      	beq.n	404fc2 <memcpy+0xe2>
  404fb0:	07d2      	lsls	r2, r2, #31
  404fb2:	bf1c      	itt	ne
  404fb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404fb8:	f800 3b01 	strbne.w	r3, [r0], #1
  404fbc:	d301      	bcc.n	404fc2 <memcpy+0xe2>
  404fbe:	880b      	ldrh	r3, [r1, #0]
  404fc0:	8003      	strh	r3, [r0, #0]
  404fc2:	4660      	mov	r0, ip
  404fc4:	4770      	bx	lr
  404fc6:	bf00      	nop
  404fc8:	2a08      	cmp	r2, #8
  404fca:	d313      	bcc.n	404ff4 <memcpy+0x114>
  404fcc:	078b      	lsls	r3, r1, #30
  404fce:	d08d      	beq.n	404eec <memcpy+0xc>
  404fd0:	f010 0303 	ands.w	r3, r0, #3
  404fd4:	d08a      	beq.n	404eec <memcpy+0xc>
  404fd6:	f1c3 0304 	rsb	r3, r3, #4
  404fda:	1ad2      	subs	r2, r2, r3
  404fdc:	07db      	lsls	r3, r3, #31
  404fde:	bf1c      	itt	ne
  404fe0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404fe4:	f800 3b01 	strbne.w	r3, [r0], #1
  404fe8:	d380      	bcc.n	404eec <memcpy+0xc>
  404fea:	f831 3b02 	ldrh.w	r3, [r1], #2
  404fee:	f820 3b02 	strh.w	r3, [r0], #2
  404ff2:	e77b      	b.n	404eec <memcpy+0xc>
  404ff4:	3a04      	subs	r2, #4
  404ff6:	d3d9      	bcc.n	404fac <memcpy+0xcc>
  404ff8:	3a01      	subs	r2, #1
  404ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
  404ffe:	f800 3b01 	strb.w	r3, [r0], #1
  405002:	d2f9      	bcs.n	404ff8 <memcpy+0x118>
  405004:	780b      	ldrb	r3, [r1, #0]
  405006:	7003      	strb	r3, [r0, #0]
  405008:	784b      	ldrb	r3, [r1, #1]
  40500a:	7043      	strb	r3, [r0, #1]
  40500c:	788b      	ldrb	r3, [r1, #2]
  40500e:	7083      	strb	r3, [r0, #2]
  405010:	4660      	mov	r0, ip
  405012:	4770      	bx	lr

00405014 <memmove>:
  405014:	4288      	cmp	r0, r1
  405016:	b5f0      	push	{r4, r5, r6, r7, lr}
  405018:	d90d      	bls.n	405036 <memmove+0x22>
  40501a:	188b      	adds	r3, r1, r2
  40501c:	4298      	cmp	r0, r3
  40501e:	d20a      	bcs.n	405036 <memmove+0x22>
  405020:	1884      	adds	r4, r0, r2
  405022:	2a00      	cmp	r2, #0
  405024:	d051      	beq.n	4050ca <memmove+0xb6>
  405026:	4622      	mov	r2, r4
  405028:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40502c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405030:	4299      	cmp	r1, r3
  405032:	d1f9      	bne.n	405028 <memmove+0x14>
  405034:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405036:	2a0f      	cmp	r2, #15
  405038:	d948      	bls.n	4050cc <memmove+0xb8>
  40503a:	ea41 0300 	orr.w	r3, r1, r0
  40503e:	079b      	lsls	r3, r3, #30
  405040:	d146      	bne.n	4050d0 <memmove+0xbc>
  405042:	f100 0410 	add.w	r4, r0, #16
  405046:	f101 0310 	add.w	r3, r1, #16
  40504a:	4615      	mov	r5, r2
  40504c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405050:	f844 6c10 	str.w	r6, [r4, #-16]
  405054:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405058:	f844 6c0c 	str.w	r6, [r4, #-12]
  40505c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405060:	f844 6c08 	str.w	r6, [r4, #-8]
  405064:	3d10      	subs	r5, #16
  405066:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40506a:	f844 6c04 	str.w	r6, [r4, #-4]
  40506e:	2d0f      	cmp	r5, #15
  405070:	f103 0310 	add.w	r3, r3, #16
  405074:	f104 0410 	add.w	r4, r4, #16
  405078:	d8e8      	bhi.n	40504c <memmove+0x38>
  40507a:	f1a2 0310 	sub.w	r3, r2, #16
  40507e:	f023 030f 	bic.w	r3, r3, #15
  405082:	f002 0e0f 	and.w	lr, r2, #15
  405086:	3310      	adds	r3, #16
  405088:	f1be 0f03 	cmp.w	lr, #3
  40508c:	4419      	add	r1, r3
  40508e:	4403      	add	r3, r0
  405090:	d921      	bls.n	4050d6 <memmove+0xc2>
  405092:	1f1e      	subs	r6, r3, #4
  405094:	460d      	mov	r5, r1
  405096:	4674      	mov	r4, lr
  405098:	3c04      	subs	r4, #4
  40509a:	f855 7b04 	ldr.w	r7, [r5], #4
  40509e:	f846 7f04 	str.w	r7, [r6, #4]!
  4050a2:	2c03      	cmp	r4, #3
  4050a4:	d8f8      	bhi.n	405098 <memmove+0x84>
  4050a6:	f1ae 0404 	sub.w	r4, lr, #4
  4050aa:	f024 0403 	bic.w	r4, r4, #3
  4050ae:	3404      	adds	r4, #4
  4050b0:	4421      	add	r1, r4
  4050b2:	4423      	add	r3, r4
  4050b4:	f002 0203 	and.w	r2, r2, #3
  4050b8:	b162      	cbz	r2, 4050d4 <memmove+0xc0>
  4050ba:	3b01      	subs	r3, #1
  4050bc:	440a      	add	r2, r1
  4050be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4050c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4050c6:	428a      	cmp	r2, r1
  4050c8:	d1f9      	bne.n	4050be <memmove+0xaa>
  4050ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050cc:	4603      	mov	r3, r0
  4050ce:	e7f3      	b.n	4050b8 <memmove+0xa4>
  4050d0:	4603      	mov	r3, r0
  4050d2:	e7f2      	b.n	4050ba <memmove+0xa6>
  4050d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050d6:	4672      	mov	r2, lr
  4050d8:	e7ee      	b.n	4050b8 <memmove+0xa4>
  4050da:	bf00      	nop

004050dc <__malloc_lock>:
  4050dc:	4801      	ldr	r0, [pc, #4]	; (4050e4 <__malloc_lock+0x8>)
  4050de:	f7ff bb35 	b.w	40474c <__retarget_lock_acquire_recursive>
  4050e2:	bf00      	nop
  4050e4:	20400da8 	.word	0x20400da8

004050e8 <__malloc_unlock>:
  4050e8:	4801      	ldr	r0, [pc, #4]	; (4050f0 <__malloc_unlock+0x8>)
  4050ea:	f7ff bb31 	b.w	404750 <__retarget_lock_release_recursive>
  4050ee:	bf00      	nop
  4050f0:	20400da8 	.word	0x20400da8

004050f4 <_realloc_r>:
  4050f4:	2900      	cmp	r1, #0
  4050f6:	f000 8095 	beq.w	405224 <_realloc_r+0x130>
  4050fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050fe:	460d      	mov	r5, r1
  405100:	4616      	mov	r6, r2
  405102:	b083      	sub	sp, #12
  405104:	4680      	mov	r8, r0
  405106:	f106 070b 	add.w	r7, r6, #11
  40510a:	f7ff ffe7 	bl	4050dc <__malloc_lock>
  40510e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405112:	2f16      	cmp	r7, #22
  405114:	f02e 0403 	bic.w	r4, lr, #3
  405118:	f1a5 0908 	sub.w	r9, r5, #8
  40511c:	d83c      	bhi.n	405198 <_realloc_r+0xa4>
  40511e:	2210      	movs	r2, #16
  405120:	4617      	mov	r7, r2
  405122:	42be      	cmp	r6, r7
  405124:	d83d      	bhi.n	4051a2 <_realloc_r+0xae>
  405126:	4294      	cmp	r4, r2
  405128:	da43      	bge.n	4051b2 <_realloc_r+0xbe>
  40512a:	4bc4      	ldr	r3, [pc, #784]	; (40543c <_realloc_r+0x348>)
  40512c:	6899      	ldr	r1, [r3, #8]
  40512e:	eb09 0004 	add.w	r0, r9, r4
  405132:	4288      	cmp	r0, r1
  405134:	f000 80b4 	beq.w	4052a0 <_realloc_r+0x1ac>
  405138:	6843      	ldr	r3, [r0, #4]
  40513a:	f023 0101 	bic.w	r1, r3, #1
  40513e:	4401      	add	r1, r0
  405140:	6849      	ldr	r1, [r1, #4]
  405142:	07c9      	lsls	r1, r1, #31
  405144:	d54c      	bpl.n	4051e0 <_realloc_r+0xec>
  405146:	f01e 0f01 	tst.w	lr, #1
  40514a:	f000 809b 	beq.w	405284 <_realloc_r+0x190>
  40514e:	4631      	mov	r1, r6
  405150:	4640      	mov	r0, r8
  405152:	f7ff fb7f 	bl	404854 <_malloc_r>
  405156:	4606      	mov	r6, r0
  405158:	2800      	cmp	r0, #0
  40515a:	d03a      	beq.n	4051d2 <_realloc_r+0xde>
  40515c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405160:	f023 0301 	bic.w	r3, r3, #1
  405164:	444b      	add	r3, r9
  405166:	f1a0 0208 	sub.w	r2, r0, #8
  40516a:	429a      	cmp	r2, r3
  40516c:	f000 8121 	beq.w	4053b2 <_realloc_r+0x2be>
  405170:	1f22      	subs	r2, r4, #4
  405172:	2a24      	cmp	r2, #36	; 0x24
  405174:	f200 8107 	bhi.w	405386 <_realloc_r+0x292>
  405178:	2a13      	cmp	r2, #19
  40517a:	f200 80db 	bhi.w	405334 <_realloc_r+0x240>
  40517e:	4603      	mov	r3, r0
  405180:	462a      	mov	r2, r5
  405182:	6811      	ldr	r1, [r2, #0]
  405184:	6019      	str	r1, [r3, #0]
  405186:	6851      	ldr	r1, [r2, #4]
  405188:	6059      	str	r1, [r3, #4]
  40518a:	6892      	ldr	r2, [r2, #8]
  40518c:	609a      	str	r2, [r3, #8]
  40518e:	4629      	mov	r1, r5
  405190:	4640      	mov	r0, r8
  405192:	f7fe fffb 	bl	40418c <_free_r>
  405196:	e01c      	b.n	4051d2 <_realloc_r+0xde>
  405198:	f027 0707 	bic.w	r7, r7, #7
  40519c:	2f00      	cmp	r7, #0
  40519e:	463a      	mov	r2, r7
  4051a0:	dabf      	bge.n	405122 <_realloc_r+0x2e>
  4051a2:	2600      	movs	r6, #0
  4051a4:	230c      	movs	r3, #12
  4051a6:	4630      	mov	r0, r6
  4051a8:	f8c8 3000 	str.w	r3, [r8]
  4051ac:	b003      	add	sp, #12
  4051ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051b2:	462e      	mov	r6, r5
  4051b4:	1be3      	subs	r3, r4, r7
  4051b6:	2b0f      	cmp	r3, #15
  4051b8:	d81e      	bhi.n	4051f8 <_realloc_r+0x104>
  4051ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4051be:	f003 0301 	and.w	r3, r3, #1
  4051c2:	4323      	orrs	r3, r4
  4051c4:	444c      	add	r4, r9
  4051c6:	f8c9 3004 	str.w	r3, [r9, #4]
  4051ca:	6863      	ldr	r3, [r4, #4]
  4051cc:	f043 0301 	orr.w	r3, r3, #1
  4051d0:	6063      	str	r3, [r4, #4]
  4051d2:	4640      	mov	r0, r8
  4051d4:	f7ff ff88 	bl	4050e8 <__malloc_unlock>
  4051d8:	4630      	mov	r0, r6
  4051da:	b003      	add	sp, #12
  4051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051e0:	f023 0303 	bic.w	r3, r3, #3
  4051e4:	18e1      	adds	r1, r4, r3
  4051e6:	4291      	cmp	r1, r2
  4051e8:	db1f      	blt.n	40522a <_realloc_r+0x136>
  4051ea:	68c3      	ldr	r3, [r0, #12]
  4051ec:	6882      	ldr	r2, [r0, #8]
  4051ee:	462e      	mov	r6, r5
  4051f0:	60d3      	str	r3, [r2, #12]
  4051f2:	460c      	mov	r4, r1
  4051f4:	609a      	str	r2, [r3, #8]
  4051f6:	e7dd      	b.n	4051b4 <_realloc_r+0xc0>
  4051f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4051fc:	eb09 0107 	add.w	r1, r9, r7
  405200:	f002 0201 	and.w	r2, r2, #1
  405204:	444c      	add	r4, r9
  405206:	f043 0301 	orr.w	r3, r3, #1
  40520a:	4317      	orrs	r7, r2
  40520c:	f8c9 7004 	str.w	r7, [r9, #4]
  405210:	604b      	str	r3, [r1, #4]
  405212:	6863      	ldr	r3, [r4, #4]
  405214:	f043 0301 	orr.w	r3, r3, #1
  405218:	3108      	adds	r1, #8
  40521a:	6063      	str	r3, [r4, #4]
  40521c:	4640      	mov	r0, r8
  40521e:	f7fe ffb5 	bl	40418c <_free_r>
  405222:	e7d6      	b.n	4051d2 <_realloc_r+0xde>
  405224:	4611      	mov	r1, r2
  405226:	f7ff bb15 	b.w	404854 <_malloc_r>
  40522a:	f01e 0f01 	tst.w	lr, #1
  40522e:	d18e      	bne.n	40514e <_realloc_r+0x5a>
  405230:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405234:	eba9 0a01 	sub.w	sl, r9, r1
  405238:	f8da 1004 	ldr.w	r1, [sl, #4]
  40523c:	f021 0103 	bic.w	r1, r1, #3
  405240:	440b      	add	r3, r1
  405242:	4423      	add	r3, r4
  405244:	4293      	cmp	r3, r2
  405246:	db25      	blt.n	405294 <_realloc_r+0x1a0>
  405248:	68c2      	ldr	r2, [r0, #12]
  40524a:	6881      	ldr	r1, [r0, #8]
  40524c:	4656      	mov	r6, sl
  40524e:	60ca      	str	r2, [r1, #12]
  405250:	6091      	str	r1, [r2, #8]
  405252:	f8da 100c 	ldr.w	r1, [sl, #12]
  405256:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40525a:	1f22      	subs	r2, r4, #4
  40525c:	2a24      	cmp	r2, #36	; 0x24
  40525e:	60c1      	str	r1, [r0, #12]
  405260:	6088      	str	r0, [r1, #8]
  405262:	f200 8094 	bhi.w	40538e <_realloc_r+0x29a>
  405266:	2a13      	cmp	r2, #19
  405268:	d96f      	bls.n	40534a <_realloc_r+0x256>
  40526a:	6829      	ldr	r1, [r5, #0]
  40526c:	f8ca 1008 	str.w	r1, [sl, #8]
  405270:	6869      	ldr	r1, [r5, #4]
  405272:	f8ca 100c 	str.w	r1, [sl, #12]
  405276:	2a1b      	cmp	r2, #27
  405278:	f200 80a2 	bhi.w	4053c0 <_realloc_r+0x2cc>
  40527c:	3508      	adds	r5, #8
  40527e:	f10a 0210 	add.w	r2, sl, #16
  405282:	e063      	b.n	40534c <_realloc_r+0x258>
  405284:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405288:	eba9 0a03 	sub.w	sl, r9, r3
  40528c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405290:	f021 0103 	bic.w	r1, r1, #3
  405294:	1863      	adds	r3, r4, r1
  405296:	4293      	cmp	r3, r2
  405298:	f6ff af59 	blt.w	40514e <_realloc_r+0x5a>
  40529c:	4656      	mov	r6, sl
  40529e:	e7d8      	b.n	405252 <_realloc_r+0x15e>
  4052a0:	6841      	ldr	r1, [r0, #4]
  4052a2:	f021 0b03 	bic.w	fp, r1, #3
  4052a6:	44a3      	add	fp, r4
  4052a8:	f107 0010 	add.w	r0, r7, #16
  4052ac:	4583      	cmp	fp, r0
  4052ae:	da56      	bge.n	40535e <_realloc_r+0x26a>
  4052b0:	f01e 0f01 	tst.w	lr, #1
  4052b4:	f47f af4b 	bne.w	40514e <_realloc_r+0x5a>
  4052b8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4052bc:	eba9 0a01 	sub.w	sl, r9, r1
  4052c0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4052c4:	f021 0103 	bic.w	r1, r1, #3
  4052c8:	448b      	add	fp, r1
  4052ca:	4558      	cmp	r0, fp
  4052cc:	dce2      	bgt.n	405294 <_realloc_r+0x1a0>
  4052ce:	4656      	mov	r6, sl
  4052d0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4052d4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4052d8:	1f22      	subs	r2, r4, #4
  4052da:	2a24      	cmp	r2, #36	; 0x24
  4052dc:	60c1      	str	r1, [r0, #12]
  4052de:	6088      	str	r0, [r1, #8]
  4052e0:	f200 808f 	bhi.w	405402 <_realloc_r+0x30e>
  4052e4:	2a13      	cmp	r2, #19
  4052e6:	f240 808a 	bls.w	4053fe <_realloc_r+0x30a>
  4052ea:	6829      	ldr	r1, [r5, #0]
  4052ec:	f8ca 1008 	str.w	r1, [sl, #8]
  4052f0:	6869      	ldr	r1, [r5, #4]
  4052f2:	f8ca 100c 	str.w	r1, [sl, #12]
  4052f6:	2a1b      	cmp	r2, #27
  4052f8:	f200 808a 	bhi.w	405410 <_realloc_r+0x31c>
  4052fc:	3508      	adds	r5, #8
  4052fe:	f10a 0210 	add.w	r2, sl, #16
  405302:	6829      	ldr	r1, [r5, #0]
  405304:	6011      	str	r1, [r2, #0]
  405306:	6869      	ldr	r1, [r5, #4]
  405308:	6051      	str	r1, [r2, #4]
  40530a:	68a9      	ldr	r1, [r5, #8]
  40530c:	6091      	str	r1, [r2, #8]
  40530e:	eb0a 0107 	add.w	r1, sl, r7
  405312:	ebab 0207 	sub.w	r2, fp, r7
  405316:	f042 0201 	orr.w	r2, r2, #1
  40531a:	6099      	str	r1, [r3, #8]
  40531c:	604a      	str	r2, [r1, #4]
  40531e:	f8da 3004 	ldr.w	r3, [sl, #4]
  405322:	f003 0301 	and.w	r3, r3, #1
  405326:	431f      	orrs	r7, r3
  405328:	4640      	mov	r0, r8
  40532a:	f8ca 7004 	str.w	r7, [sl, #4]
  40532e:	f7ff fedb 	bl	4050e8 <__malloc_unlock>
  405332:	e751      	b.n	4051d8 <_realloc_r+0xe4>
  405334:	682b      	ldr	r3, [r5, #0]
  405336:	6003      	str	r3, [r0, #0]
  405338:	686b      	ldr	r3, [r5, #4]
  40533a:	6043      	str	r3, [r0, #4]
  40533c:	2a1b      	cmp	r2, #27
  40533e:	d82d      	bhi.n	40539c <_realloc_r+0x2a8>
  405340:	f100 0308 	add.w	r3, r0, #8
  405344:	f105 0208 	add.w	r2, r5, #8
  405348:	e71b      	b.n	405182 <_realloc_r+0x8e>
  40534a:	4632      	mov	r2, r6
  40534c:	6829      	ldr	r1, [r5, #0]
  40534e:	6011      	str	r1, [r2, #0]
  405350:	6869      	ldr	r1, [r5, #4]
  405352:	6051      	str	r1, [r2, #4]
  405354:	68a9      	ldr	r1, [r5, #8]
  405356:	6091      	str	r1, [r2, #8]
  405358:	461c      	mov	r4, r3
  40535a:	46d1      	mov	r9, sl
  40535c:	e72a      	b.n	4051b4 <_realloc_r+0xc0>
  40535e:	eb09 0107 	add.w	r1, r9, r7
  405362:	ebab 0b07 	sub.w	fp, fp, r7
  405366:	f04b 0201 	orr.w	r2, fp, #1
  40536a:	6099      	str	r1, [r3, #8]
  40536c:	604a      	str	r2, [r1, #4]
  40536e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405372:	f003 0301 	and.w	r3, r3, #1
  405376:	431f      	orrs	r7, r3
  405378:	4640      	mov	r0, r8
  40537a:	f845 7c04 	str.w	r7, [r5, #-4]
  40537e:	f7ff feb3 	bl	4050e8 <__malloc_unlock>
  405382:	462e      	mov	r6, r5
  405384:	e728      	b.n	4051d8 <_realloc_r+0xe4>
  405386:	4629      	mov	r1, r5
  405388:	f7ff fe44 	bl	405014 <memmove>
  40538c:	e6ff      	b.n	40518e <_realloc_r+0x9a>
  40538e:	4629      	mov	r1, r5
  405390:	4630      	mov	r0, r6
  405392:	461c      	mov	r4, r3
  405394:	46d1      	mov	r9, sl
  405396:	f7ff fe3d 	bl	405014 <memmove>
  40539a:	e70b      	b.n	4051b4 <_realloc_r+0xc0>
  40539c:	68ab      	ldr	r3, [r5, #8]
  40539e:	6083      	str	r3, [r0, #8]
  4053a0:	68eb      	ldr	r3, [r5, #12]
  4053a2:	60c3      	str	r3, [r0, #12]
  4053a4:	2a24      	cmp	r2, #36	; 0x24
  4053a6:	d017      	beq.n	4053d8 <_realloc_r+0x2e4>
  4053a8:	f100 0310 	add.w	r3, r0, #16
  4053ac:	f105 0210 	add.w	r2, r5, #16
  4053b0:	e6e7      	b.n	405182 <_realloc_r+0x8e>
  4053b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4053b6:	f023 0303 	bic.w	r3, r3, #3
  4053ba:	441c      	add	r4, r3
  4053bc:	462e      	mov	r6, r5
  4053be:	e6f9      	b.n	4051b4 <_realloc_r+0xc0>
  4053c0:	68a9      	ldr	r1, [r5, #8]
  4053c2:	f8ca 1010 	str.w	r1, [sl, #16]
  4053c6:	68e9      	ldr	r1, [r5, #12]
  4053c8:	f8ca 1014 	str.w	r1, [sl, #20]
  4053cc:	2a24      	cmp	r2, #36	; 0x24
  4053ce:	d00c      	beq.n	4053ea <_realloc_r+0x2f6>
  4053d0:	3510      	adds	r5, #16
  4053d2:	f10a 0218 	add.w	r2, sl, #24
  4053d6:	e7b9      	b.n	40534c <_realloc_r+0x258>
  4053d8:	692b      	ldr	r3, [r5, #16]
  4053da:	6103      	str	r3, [r0, #16]
  4053dc:	696b      	ldr	r3, [r5, #20]
  4053de:	6143      	str	r3, [r0, #20]
  4053e0:	f105 0218 	add.w	r2, r5, #24
  4053e4:	f100 0318 	add.w	r3, r0, #24
  4053e8:	e6cb      	b.n	405182 <_realloc_r+0x8e>
  4053ea:	692a      	ldr	r2, [r5, #16]
  4053ec:	f8ca 2018 	str.w	r2, [sl, #24]
  4053f0:	696a      	ldr	r2, [r5, #20]
  4053f2:	f8ca 201c 	str.w	r2, [sl, #28]
  4053f6:	3518      	adds	r5, #24
  4053f8:	f10a 0220 	add.w	r2, sl, #32
  4053fc:	e7a6      	b.n	40534c <_realloc_r+0x258>
  4053fe:	4632      	mov	r2, r6
  405400:	e77f      	b.n	405302 <_realloc_r+0x20e>
  405402:	4629      	mov	r1, r5
  405404:	4630      	mov	r0, r6
  405406:	9301      	str	r3, [sp, #4]
  405408:	f7ff fe04 	bl	405014 <memmove>
  40540c:	9b01      	ldr	r3, [sp, #4]
  40540e:	e77e      	b.n	40530e <_realloc_r+0x21a>
  405410:	68a9      	ldr	r1, [r5, #8]
  405412:	f8ca 1010 	str.w	r1, [sl, #16]
  405416:	68e9      	ldr	r1, [r5, #12]
  405418:	f8ca 1014 	str.w	r1, [sl, #20]
  40541c:	2a24      	cmp	r2, #36	; 0x24
  40541e:	d003      	beq.n	405428 <_realloc_r+0x334>
  405420:	3510      	adds	r5, #16
  405422:	f10a 0218 	add.w	r2, sl, #24
  405426:	e76c      	b.n	405302 <_realloc_r+0x20e>
  405428:	692a      	ldr	r2, [r5, #16]
  40542a:	f8ca 2018 	str.w	r2, [sl, #24]
  40542e:	696a      	ldr	r2, [r5, #20]
  405430:	f8ca 201c 	str.w	r2, [sl, #28]
  405434:	3518      	adds	r5, #24
  405436:	f10a 0220 	add.w	r2, sl, #32
  40543a:	e762      	b.n	405302 <_realloc_r+0x20e>
  40543c:	204005c8 	.word	0x204005c8

00405440 <lflush>:
  405440:	8983      	ldrh	r3, [r0, #12]
  405442:	f003 0309 	and.w	r3, r3, #9
  405446:	2b09      	cmp	r3, #9
  405448:	d001      	beq.n	40544e <lflush+0xe>
  40544a:	2000      	movs	r0, #0
  40544c:	4770      	bx	lr
  40544e:	f7fe bc55 	b.w	403cfc <fflush>
  405452:	bf00      	nop

00405454 <__srefill_r>:
  405454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405456:	460c      	mov	r4, r1
  405458:	4605      	mov	r5, r0
  40545a:	b110      	cbz	r0, 405462 <__srefill_r+0xe>
  40545c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40545e:	2b00      	cmp	r3, #0
  405460:	d045      	beq.n	4054ee <__srefill_r+0x9a>
  405462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405466:	b29a      	uxth	r2, r3
  405468:	0497      	lsls	r7, r2, #18
  40546a:	d407      	bmi.n	40547c <__srefill_r+0x28>
  40546c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40546e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405476:	6662      	str	r2, [r4, #100]	; 0x64
  405478:	81a3      	strh	r3, [r4, #12]
  40547a:	b29a      	uxth	r2, r3
  40547c:	2100      	movs	r1, #0
  40547e:	0696      	lsls	r6, r2, #26
  405480:	6061      	str	r1, [r4, #4]
  405482:	d431      	bmi.n	4054e8 <__srefill_r+0x94>
  405484:	0750      	lsls	r0, r2, #29
  405486:	d522      	bpl.n	4054ce <__srefill_r+0x7a>
  405488:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40548a:	b161      	cbz	r1, 4054a6 <__srefill_r+0x52>
  40548c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405490:	4299      	cmp	r1, r3
  405492:	d002      	beq.n	40549a <__srefill_r+0x46>
  405494:	4628      	mov	r0, r5
  405496:	f7fe fe79 	bl	40418c <_free_r>
  40549a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40549c:	6063      	str	r3, [r4, #4]
  40549e:	2000      	movs	r0, #0
  4054a0:	6320      	str	r0, [r4, #48]	; 0x30
  4054a2:	2b00      	cmp	r3, #0
  4054a4:	d13f      	bne.n	405526 <__srefill_r+0xd2>
  4054a6:	6923      	ldr	r3, [r4, #16]
  4054a8:	2b00      	cmp	r3, #0
  4054aa:	d04c      	beq.n	405546 <__srefill_r+0xf2>
  4054ac:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  4054b0:	b2be      	uxth	r6, r7
  4054b2:	07b3      	lsls	r3, r6, #30
  4054b4:	d11e      	bne.n	4054f4 <__srefill_r+0xa0>
  4054b6:	6922      	ldr	r2, [r4, #16]
  4054b8:	6022      	str	r2, [r4, #0]
  4054ba:	4628      	mov	r0, r5
  4054bc:	6963      	ldr	r3, [r4, #20]
  4054be:	6a25      	ldr	r5, [r4, #32]
  4054c0:	69e1      	ldr	r1, [r4, #28]
  4054c2:	47a8      	blx	r5
  4054c4:	2800      	cmp	r0, #0
  4054c6:	6060      	str	r0, [r4, #4]
  4054c8:	dd09      	ble.n	4054de <__srefill_r+0x8a>
  4054ca:	2000      	movs	r0, #0
  4054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054ce:	06d1      	lsls	r1, r2, #27
  4054d0:	d53e      	bpl.n	405550 <__srefill_r+0xfc>
  4054d2:	0712      	lsls	r2, r2, #28
  4054d4:	d42a      	bmi.n	40552c <__srefill_r+0xd8>
  4054d6:	f043 0304 	orr.w	r3, r3, #4
  4054da:	81a3      	strh	r3, [r4, #12]
  4054dc:	e7e3      	b.n	4054a6 <__srefill_r+0x52>
  4054de:	89a3      	ldrh	r3, [r4, #12]
  4054e0:	d119      	bne.n	405516 <__srefill_r+0xc2>
  4054e2:	f043 0320 	orr.w	r3, r3, #32
  4054e6:	81a3      	strh	r3, [r4, #12]
  4054e8:	f04f 30ff 	mov.w	r0, #4294967295
  4054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054ee:	f7fe fc45 	bl	403d7c <__sinit>
  4054f2:	e7b6      	b.n	405462 <__srefill_r+0xe>
  4054f4:	4b1a      	ldr	r3, [pc, #104]	; (405560 <__srefill_r+0x10c>)
  4054f6:	491b      	ldr	r1, [pc, #108]	; (405564 <__srefill_r+0x110>)
  4054f8:	6818      	ldr	r0, [r3, #0]
  4054fa:	2301      	movs	r3, #1
  4054fc:	81a3      	strh	r3, [r4, #12]
  4054fe:	f006 0609 	and.w	r6, r6, #9
  405502:	f7ff f8a1 	bl	404648 <_fwalk>
  405506:	2e09      	cmp	r6, #9
  405508:	81a7      	strh	r7, [r4, #12]
  40550a:	d1d4      	bne.n	4054b6 <__srefill_r+0x62>
  40550c:	4621      	mov	r1, r4
  40550e:	4628      	mov	r0, r5
  405510:	f7fe fb2a 	bl	403b68 <__sflush_r>
  405514:	e7cf      	b.n	4054b6 <__srefill_r+0x62>
  405516:	2200      	movs	r2, #0
  405518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40551c:	81a3      	strh	r3, [r4, #12]
  40551e:	6062      	str	r2, [r4, #4]
  405520:	f04f 30ff 	mov.w	r0, #4294967295
  405524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405528:	6023      	str	r3, [r4, #0]
  40552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40552c:	4621      	mov	r1, r4
  40552e:	4628      	mov	r0, r5
  405530:	f7fe fbba 	bl	403ca8 <_fflush_r>
  405534:	2800      	cmp	r0, #0
  405536:	d1d7      	bne.n	4054e8 <__srefill_r+0x94>
  405538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40553c:	60a0      	str	r0, [r4, #8]
  40553e:	61a0      	str	r0, [r4, #24]
  405540:	f023 0308 	bic.w	r3, r3, #8
  405544:	e7c7      	b.n	4054d6 <__srefill_r+0x82>
  405546:	4621      	mov	r1, r4
  405548:	4628      	mov	r0, r5
  40554a:	f7ff f931 	bl	4047b0 <__smakebuf_r>
  40554e:	e7ad      	b.n	4054ac <__srefill_r+0x58>
  405550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405554:	2209      	movs	r2, #9
  405556:	602a      	str	r2, [r5, #0]
  405558:	f04f 30ff 	mov.w	r0, #4294967295
  40555c:	81a3      	strh	r3, [r4, #12]
  40555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405560:	00406a00 	.word	0x00406a00
  405564:	00405441 	.word	0x00405441

00405568 <_sbrk_r>:
  405568:	b538      	push	{r3, r4, r5, lr}
  40556a:	4c07      	ldr	r4, [pc, #28]	; (405588 <_sbrk_r+0x20>)
  40556c:	2300      	movs	r3, #0
  40556e:	4605      	mov	r5, r0
  405570:	4608      	mov	r0, r1
  405572:	6023      	str	r3, [r4, #0]
  405574:	f7fc f950 	bl	401818 <_sbrk>
  405578:	1c43      	adds	r3, r0, #1
  40557a:	d000      	beq.n	40557e <_sbrk_r+0x16>
  40557c:	bd38      	pop	{r3, r4, r5, pc}
  40557e:	6823      	ldr	r3, [r4, #0]
  405580:	2b00      	cmp	r3, #0
  405582:	d0fb      	beq.n	40557c <_sbrk_r+0x14>
  405584:	602b      	str	r3, [r5, #0]
  405586:	bd38      	pop	{r3, r4, r5, pc}
  405588:	20400dbc 	.word	0x20400dbc

0040558c <__sccl>:
  40558c:	b470      	push	{r4, r5, r6}
  40558e:	780c      	ldrb	r4, [r1, #0]
  405590:	2c5e      	cmp	r4, #94	; 0x5e
  405592:	d02f      	beq.n	4055f4 <__sccl+0x68>
  405594:	2200      	movs	r2, #0
  405596:	1c4d      	adds	r5, r1, #1
  405598:	4616      	mov	r6, r2
  40559a:	1e43      	subs	r3, r0, #1
  40559c:	f100 01ff 	add.w	r1, r0, #255	; 0xff
  4055a0:	f803 2f01 	strb.w	r2, [r3, #1]!
  4055a4:	428b      	cmp	r3, r1
  4055a6:	d1fb      	bne.n	4055a0 <__sccl+0x14>
  4055a8:	b174      	cbz	r4, 4055c8 <__sccl+0x3c>
  4055aa:	f086 0201 	eor.w	r2, r6, #1
  4055ae:	5502      	strb	r2, [r0, r4]
  4055b0:	1c6e      	adds	r6, r5, #1
  4055b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4055b6:	2b2d      	cmp	r3, #45	; 0x2d
  4055b8:	4631      	mov	r1, r6
  4055ba:	d00d      	beq.n	4055d8 <__sccl+0x4c>
  4055bc:	2b5d      	cmp	r3, #93	; 0x5d
  4055be:	d004      	beq.n	4055ca <__sccl+0x3e>
  4055c0:	b133      	cbz	r3, 4055d0 <__sccl+0x44>
  4055c2:	461c      	mov	r4, r3
  4055c4:	4635      	mov	r5, r6
  4055c6:	e7f2      	b.n	4055ae <__sccl+0x22>
  4055c8:	1e69      	subs	r1, r5, #1
  4055ca:	4608      	mov	r0, r1
  4055cc:	bc70      	pop	{r4, r5, r6}
  4055ce:	4770      	bx	lr
  4055d0:	4629      	mov	r1, r5
  4055d2:	4608      	mov	r0, r1
  4055d4:	bc70      	pop	{r4, r5, r6}
  4055d6:	4770      	bx	lr
  4055d8:	7869      	ldrb	r1, [r5, #1]
  4055da:	295d      	cmp	r1, #93	; 0x5d
  4055dc:	d0f1      	beq.n	4055c2 <__sccl+0x36>
  4055de:	428c      	cmp	r4, r1
  4055e0:	dcef      	bgt.n	4055c2 <__sccl+0x36>
  4055e2:	3502      	adds	r5, #2
  4055e4:	1903      	adds	r3, r0, r4
  4055e6:	3401      	adds	r4, #1
  4055e8:	42a1      	cmp	r1, r4
  4055ea:	f803 2f01 	strb.w	r2, [r3, #1]!
  4055ee:	dcfa      	bgt.n	4055e6 <__sccl+0x5a>
  4055f0:	3602      	adds	r6, #2
  4055f2:	e7de      	b.n	4055b2 <__sccl+0x26>
  4055f4:	2201      	movs	r2, #1
  4055f6:	784c      	ldrb	r4, [r1, #1]
  4055f8:	4616      	mov	r6, r2
  4055fa:	1c8d      	adds	r5, r1, #2
  4055fc:	e7cd      	b.n	40559a <__sccl+0xe>
  4055fe:	bf00      	nop

00405600 <__sread>:
  405600:	b510      	push	{r4, lr}
  405602:	460c      	mov	r4, r1
  405604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405608:	f000 fe84 	bl	406314 <_read_r>
  40560c:	2800      	cmp	r0, #0
  40560e:	db03      	blt.n	405618 <__sread+0x18>
  405610:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405612:	4403      	add	r3, r0
  405614:	6523      	str	r3, [r4, #80]	; 0x50
  405616:	bd10      	pop	{r4, pc}
  405618:	89a3      	ldrh	r3, [r4, #12]
  40561a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40561e:	81a3      	strh	r3, [r4, #12]
  405620:	bd10      	pop	{r4, pc}
  405622:	bf00      	nop

00405624 <__swrite>:
  405624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405628:	4616      	mov	r6, r2
  40562a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40562e:	461f      	mov	r7, r3
  405630:	05d3      	lsls	r3, r2, #23
  405632:	460c      	mov	r4, r1
  405634:	4605      	mov	r5, r0
  405636:	d507      	bpl.n	405648 <__swrite+0x24>
  405638:	2200      	movs	r2, #0
  40563a:	2302      	movs	r3, #2
  40563c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405640:	f000 fe52 	bl	4062e8 <_lseek_r>
  405644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40564c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405650:	81a2      	strh	r2, [r4, #12]
  405652:	463b      	mov	r3, r7
  405654:	4632      	mov	r2, r6
  405656:	4628      	mov	r0, r5
  405658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40565c:	f000 bd32 	b.w	4060c4 <_write_r>

00405660 <__sseek>:
  405660:	b510      	push	{r4, lr}
  405662:	460c      	mov	r4, r1
  405664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405668:	f000 fe3e 	bl	4062e8 <_lseek_r>
  40566c:	89a3      	ldrh	r3, [r4, #12]
  40566e:	1c42      	adds	r2, r0, #1
  405670:	bf0e      	itee	eq
  405672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40567a:	6520      	strne	r0, [r4, #80]	; 0x50
  40567c:	81a3      	strh	r3, [r4, #12]
  40567e:	bd10      	pop	{r4, pc}

00405680 <__sclose>:
  405680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405684:	f000 bd96 	b.w	4061b4 <_close_r>
	...

004056c0 <strlen>:
  4056c0:	f890 f000 	pld	[r0]
  4056c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4056c8:	f020 0107 	bic.w	r1, r0, #7
  4056cc:	f06f 0c00 	mvn.w	ip, #0
  4056d0:	f010 0407 	ands.w	r4, r0, #7
  4056d4:	f891 f020 	pld	[r1, #32]
  4056d8:	f040 8049 	bne.w	40576e <strlen+0xae>
  4056dc:	f04f 0400 	mov.w	r4, #0
  4056e0:	f06f 0007 	mvn.w	r0, #7
  4056e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4056e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4056ec:	f100 0008 	add.w	r0, r0, #8
  4056f0:	fa82 f24c 	uadd8	r2, r2, ip
  4056f4:	faa4 f28c 	sel	r2, r4, ip
  4056f8:	fa83 f34c 	uadd8	r3, r3, ip
  4056fc:	faa2 f38c 	sel	r3, r2, ip
  405700:	bb4b      	cbnz	r3, 405756 <strlen+0x96>
  405702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405706:	fa82 f24c 	uadd8	r2, r2, ip
  40570a:	f100 0008 	add.w	r0, r0, #8
  40570e:	faa4 f28c 	sel	r2, r4, ip
  405712:	fa83 f34c 	uadd8	r3, r3, ip
  405716:	faa2 f38c 	sel	r3, r2, ip
  40571a:	b9e3      	cbnz	r3, 405756 <strlen+0x96>
  40571c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405720:	fa82 f24c 	uadd8	r2, r2, ip
  405724:	f100 0008 	add.w	r0, r0, #8
  405728:	faa4 f28c 	sel	r2, r4, ip
  40572c:	fa83 f34c 	uadd8	r3, r3, ip
  405730:	faa2 f38c 	sel	r3, r2, ip
  405734:	b97b      	cbnz	r3, 405756 <strlen+0x96>
  405736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40573a:	f101 0120 	add.w	r1, r1, #32
  40573e:	fa82 f24c 	uadd8	r2, r2, ip
  405742:	f100 0008 	add.w	r0, r0, #8
  405746:	faa4 f28c 	sel	r2, r4, ip
  40574a:	fa83 f34c 	uadd8	r3, r3, ip
  40574e:	faa2 f38c 	sel	r3, r2, ip
  405752:	2b00      	cmp	r3, #0
  405754:	d0c6      	beq.n	4056e4 <strlen+0x24>
  405756:	2a00      	cmp	r2, #0
  405758:	bf04      	itt	eq
  40575a:	3004      	addeq	r0, #4
  40575c:	461a      	moveq	r2, r3
  40575e:	ba12      	rev	r2, r2
  405760:	fab2 f282 	clz	r2, r2
  405764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40576c:	4770      	bx	lr
  40576e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405772:	f004 0503 	and.w	r5, r4, #3
  405776:	f1c4 0000 	rsb	r0, r4, #0
  40577a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40577e:	f014 0f04 	tst.w	r4, #4
  405782:	f891 f040 	pld	[r1, #64]	; 0x40
  405786:	fa0c f505 	lsl.w	r5, ip, r5
  40578a:	ea62 0205 	orn	r2, r2, r5
  40578e:	bf1c      	itt	ne
  405790:	ea63 0305 	ornne	r3, r3, r5
  405794:	4662      	movne	r2, ip
  405796:	f04f 0400 	mov.w	r4, #0
  40579a:	e7a9      	b.n	4056f0 <strlen+0x30>

0040579c <_strtol_l.isra.0>:
  40579c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4057a4:	460f      	mov	r7, r1
  4057a6:	4680      	mov	r8, r0
  4057a8:	4616      	mov	r6, r2
  4057aa:	461d      	mov	r5, r3
  4057ac:	468a      	mov	sl, r1
  4057ae:	e000      	b.n	4057b2 <_strtol_l.isra.0+0x16>
  4057b0:	46a2      	mov	sl, r4
  4057b2:	4654      	mov	r4, sl
  4057b4:	4648      	mov	r0, r9
  4057b6:	f814 bb01 	ldrb.w	fp, [r4], #1
  4057ba:	f7fe ffb1 	bl	404720 <__locale_ctype_ptr_l>
  4057be:	4458      	add	r0, fp
  4057c0:	7842      	ldrb	r2, [r0, #1]
  4057c2:	f012 0208 	ands.w	r2, r2, #8
  4057c6:	d1f3      	bne.n	4057b0 <_strtol_l.isra.0+0x14>
  4057c8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  4057cc:	d04f      	beq.n	40586e <_strtol_l.isra.0+0xd2>
  4057ce:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  4057d2:	bf04      	itt	eq
  4057d4:	f894 b000 	ldrbeq.w	fp, [r4]
  4057d8:	f10a 0402 	addeq.w	r4, sl, #2
  4057dc:	b11d      	cbz	r5, 4057e6 <_strtol_l.isra.0+0x4a>
  4057de:	2d10      	cmp	r5, #16
  4057e0:	d056      	beq.n	405890 <_strtol_l.isra.0+0xf4>
  4057e2:	46ac      	mov	ip, r5
  4057e4:	e004      	b.n	4057f0 <_strtol_l.isra.0+0x54>
  4057e6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  4057ea:	d060      	beq.n	4058ae <_strtol_l.isra.0+0x112>
  4057ec:	250a      	movs	r5, #10
  4057ee:	46ac      	mov	ip, r5
  4057f0:	2a00      	cmp	r2, #0
  4057f2:	bf0c      	ite	eq
  4057f4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  4057f8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  4057fc:	2100      	movs	r1, #0
  4057fe:	fbb9 fefc 	udiv	lr, r9, ip
  405802:	4608      	mov	r0, r1
  405804:	fb0c 9a1e 	mls	sl, ip, lr, r9
  405808:	e005      	b.n	405816 <_strtol_l.isra.0+0x7a>
  40580a:	d029      	beq.n	405860 <_strtol_l.isra.0+0xc4>
  40580c:	fb0c 3000 	mla	r0, ip, r0, r3
  405810:	2101      	movs	r1, #1
  405812:	f814 bb01 	ldrb.w	fp, [r4], #1
  405816:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  40581a:	2b09      	cmp	r3, #9
  40581c:	d905      	bls.n	40582a <_strtol_l.isra.0+0x8e>
  40581e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  405822:	2b19      	cmp	r3, #25
  405824:	d80b      	bhi.n	40583e <_strtol_l.isra.0+0xa2>
  405826:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  40582a:	429d      	cmp	r5, r3
  40582c:	dd0f      	ble.n	40584e <_strtol_l.isra.0+0xb2>
  40582e:	f1b1 3fff 	cmp.w	r1, #4294967295
  405832:	d0ee      	beq.n	405812 <_strtol_l.isra.0+0x76>
  405834:	4586      	cmp	lr, r0
  405836:	d2e8      	bcs.n	40580a <_strtol_l.isra.0+0x6e>
  405838:	f04f 31ff 	mov.w	r1, #4294967295
  40583c:	e7e9      	b.n	405812 <_strtol_l.isra.0+0x76>
  40583e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  405842:	2b19      	cmp	r3, #25
  405844:	d803      	bhi.n	40584e <_strtol_l.isra.0+0xb2>
  405846:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  40584a:	429d      	cmp	r5, r3
  40584c:	dcef      	bgt.n	40582e <_strtol_l.isra.0+0x92>
  40584e:	1c4b      	adds	r3, r1, #1
  405850:	d013      	beq.n	40587a <_strtol_l.isra.0+0xde>
  405852:	b102      	cbz	r2, 405856 <_strtol_l.isra.0+0xba>
  405854:	4240      	negs	r0, r0
  405856:	b146      	cbz	r6, 40586a <_strtol_l.isra.0+0xce>
  405858:	b9c1      	cbnz	r1, 40588c <_strtol_l.isra.0+0xf0>
  40585a:	6037      	str	r7, [r6, #0]
  40585c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405860:	459a      	cmp	sl, r3
  405862:	dad3      	bge.n	40580c <_strtol_l.isra.0+0x70>
  405864:	f04f 31ff 	mov.w	r1, #4294967295
  405868:	e7d3      	b.n	405812 <_strtol_l.isra.0+0x76>
  40586a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40586e:	f894 b000 	ldrb.w	fp, [r4]
  405872:	2201      	movs	r2, #1
  405874:	f10a 0402 	add.w	r4, sl, #2
  405878:	e7b0      	b.n	4057dc <_strtol_l.isra.0+0x40>
  40587a:	2322      	movs	r3, #34	; 0x22
  40587c:	f8c8 3000 	str.w	r3, [r8]
  405880:	b1ee      	cbz	r6, 4058be <_strtol_l.isra.0+0x122>
  405882:	1e67      	subs	r7, r4, #1
  405884:	4648      	mov	r0, r9
  405886:	6037      	str	r7, [r6, #0]
  405888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40588c:	4681      	mov	r9, r0
  40588e:	e7f8      	b.n	405882 <_strtol_l.isra.0+0xe6>
  405890:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  405894:	d1a5      	bne.n	4057e2 <_strtol_l.isra.0+0x46>
  405896:	7823      	ldrb	r3, [r4, #0]
  405898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40589c:	2b58      	cmp	r3, #88	; 0x58
  40589e:	d1a0      	bne.n	4057e2 <_strtol_l.isra.0+0x46>
  4058a0:	f04f 0c10 	mov.w	ip, #16
  4058a4:	f894 b001 	ldrb.w	fp, [r4, #1]
  4058a8:	4665      	mov	r5, ip
  4058aa:	3402      	adds	r4, #2
  4058ac:	e7a0      	b.n	4057f0 <_strtol_l.isra.0+0x54>
  4058ae:	7823      	ldrb	r3, [r4, #0]
  4058b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4058b4:	2b58      	cmp	r3, #88	; 0x58
  4058b6:	d0f3      	beq.n	4058a0 <_strtol_l.isra.0+0x104>
  4058b8:	2508      	movs	r5, #8
  4058ba:	46ac      	mov	ip, r5
  4058bc:	e798      	b.n	4057f0 <_strtol_l.isra.0+0x54>
  4058be:	4648      	mov	r0, r9
  4058c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004058c4 <_strtol_r>:
  4058c4:	b530      	push	{r4, r5, lr}
  4058c6:	4c06      	ldr	r4, [pc, #24]	; (4058e0 <_strtol_r+0x1c>)
  4058c8:	4d06      	ldr	r5, [pc, #24]	; (4058e4 <_strtol_r+0x20>)
  4058ca:	6824      	ldr	r4, [r4, #0]
  4058cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4058ce:	b083      	sub	sp, #12
  4058d0:	2c00      	cmp	r4, #0
  4058d2:	bf08      	it	eq
  4058d4:	462c      	moveq	r4, r5
  4058d6:	9400      	str	r4, [sp, #0]
  4058d8:	f7ff ff60 	bl	40579c <_strtol_l.isra.0>
  4058dc:	b003      	add	sp, #12
  4058de:	bd30      	pop	{r4, r5, pc}
  4058e0:	20400028 	.word	0x20400028
  4058e4:	2040045c 	.word	0x2040045c

004058e8 <_strtoll_l.isra.0>:
  4058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058ec:	b085      	sub	sp, #20
  4058ee:	461e      	mov	r6, r3
  4058f0:	9102      	str	r1, [sp, #8]
  4058f2:	9003      	str	r0, [sp, #12]
  4058f4:	9200      	str	r2, [sp, #0]
  4058f6:	4688      	mov	r8, r1
  4058f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4058fa:	e000      	b.n	4058fe <_strtoll_l.isra.0+0x16>
  4058fc:	46a8      	mov	r8, r5
  4058fe:	4645      	mov	r5, r8
  405900:	4638      	mov	r0, r7
  405902:	f815 4b01 	ldrb.w	r4, [r5], #1
  405906:	f7fe ff0b 	bl	404720 <__locale_ctype_ptr_l>
  40590a:	4420      	add	r0, r4
  40590c:	7843      	ldrb	r3, [r0, #1]
  40590e:	f013 0308 	ands.w	r3, r3, #8
  405912:	d1f3      	bne.n	4058fc <_strtoll_l.isra.0+0x14>
  405914:	2c2d      	cmp	r4, #45	; 0x2d
  405916:	f000 8081 	beq.w	405a1c <_strtoll_l.isra.0+0x134>
  40591a:	2c2b      	cmp	r4, #43	; 0x2b
  40591c:	bf03      	ittte	eq
  40591e:	782c      	ldrbeq	r4, [r5, #0]
  405920:	9301      	streq	r3, [sp, #4]
  405922:	f108 0502 	addeq.w	r5, r8, #2
  405926:	9301      	strne	r3, [sp, #4]
  405928:	b166      	cbz	r6, 405944 <_strtoll_l.isra.0+0x5c>
  40592a:	2e10      	cmp	r6, #16
  40592c:	f000 8088 	beq.w	405a40 <_strtoll_l.isra.0+0x158>
  405930:	9b01      	ldr	r3, [sp, #4]
  405932:	46b0      	mov	r8, r6
  405934:	ea4f 79e6 	mov.w	r9, r6, asr #31
  405938:	b97b      	cbnz	r3, 40595a <_strtoll_l.isra.0+0x72>
  40593a:	f04f 3aff 	mov.w	sl, #4294967295
  40593e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  405942:	e00e      	b.n	405962 <_strtoll_l.isra.0+0x7a>
  405944:	2c30      	cmp	r4, #48	; 0x30
  405946:	f000 808a 	beq.w	405a5e <_strtoll_l.isra.0+0x176>
  40594a:	f04f 080a 	mov.w	r8, #10
  40594e:	f04f 0900 	mov.w	r9, #0
  405952:	260a      	movs	r6, #10
  405954:	9b01      	ldr	r3, [sp, #4]
  405956:	2b00      	cmp	r3, #0
  405958:	d0ef      	beq.n	40593a <_strtoll_l.isra.0+0x52>
  40595a:	f04f 0a00 	mov.w	sl, #0
  40595e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  405962:	4642      	mov	r2, r8
  405964:	464b      	mov	r3, r9
  405966:	4650      	mov	r0, sl
  405968:	4639      	mov	r1, r7
  40596a:	f7fc f9bf 	bl	401cec <__aeabi_uldivmod>
  40596e:	464b      	mov	r3, r9
  405970:	4693      	mov	fp, r2
  405972:	4650      	mov	r0, sl
  405974:	4642      	mov	r2, r8
  405976:	4639      	mov	r1, r7
  405978:	f7fc f9b8 	bl	401cec <__aeabi_uldivmod>
  40597c:	f04f 0e00 	mov.w	lr, #0
  405980:	2200      	movs	r2, #0
  405982:	2300      	movs	r3, #0
  405984:	e00f      	b.n	4059a6 <_strtoll_l.isra.0+0xbe>
  405986:	d044      	beq.n	405a12 <_strtoll_l.isra.0+0x12a>
  405988:	fb02 f409 	mul.w	r4, r2, r9
  40598c:	fb08 4403 	mla	r4, r8, r3, r4
  405990:	fba2 2308 	umull	r2, r3, r2, r8
  405994:	4423      	add	r3, r4
  405996:	eb12 020c 	adds.w	r2, r2, ip
  40599a:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  40599e:	f04f 0e01 	mov.w	lr, #1
  4059a2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4059a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  4059aa:	f1bc 0f09 	cmp.w	ip, #9
  4059ae:	d906      	bls.n	4059be <_strtoll_l.isra.0+0xd6>
  4059b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  4059b4:	f1bc 0f19 	cmp.w	ip, #25
  4059b8:	d80d      	bhi.n	4059d6 <_strtoll_l.isra.0+0xee>
  4059ba:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  4059be:	4566      	cmp	r6, ip
  4059c0:	dd12      	ble.n	4059e8 <_strtoll_l.isra.0+0x100>
  4059c2:	f1be 3fff 	cmp.w	lr, #4294967295
  4059c6:	d0ec      	beq.n	4059a2 <_strtoll_l.isra.0+0xba>
  4059c8:	4299      	cmp	r1, r3
  4059ca:	bf08      	it	eq
  4059cc:	4290      	cmpeq	r0, r2
  4059ce:	d2da      	bcs.n	405986 <_strtoll_l.isra.0+0x9e>
  4059d0:	f04f 3eff 	mov.w	lr, #4294967295
  4059d4:	e7e5      	b.n	4059a2 <_strtoll_l.isra.0+0xba>
  4059d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  4059da:	f1bc 0f19 	cmp.w	ip, #25
  4059de:	d803      	bhi.n	4059e8 <_strtoll_l.isra.0+0x100>
  4059e0:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  4059e4:	4566      	cmp	r6, ip
  4059e6:	dcec      	bgt.n	4059c2 <_strtoll_l.isra.0+0xda>
  4059e8:	f1be 3fff 	cmp.w	lr, #4294967295
  4059ec:	d01c      	beq.n	405a28 <_strtoll_l.isra.0+0x140>
  4059ee:	9901      	ldr	r1, [sp, #4]
  4059f0:	b111      	cbz	r1, 4059f8 <_strtoll_l.isra.0+0x110>
  4059f2:	4252      	negs	r2, r2
  4059f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4059f8:	9900      	ldr	r1, [sp, #0]
  4059fa:	b129      	cbz	r1, 405a08 <_strtoll_l.isra.0+0x120>
  4059fc:	f1be 0f00 	cmp.w	lr, #0
  405a00:	d11b      	bne.n	405a3a <_strtoll_l.isra.0+0x152>
  405a02:	9d02      	ldr	r5, [sp, #8]
  405a04:	9900      	ldr	r1, [sp, #0]
  405a06:	600d      	str	r5, [r1, #0]
  405a08:	4610      	mov	r0, r2
  405a0a:	4619      	mov	r1, r3
  405a0c:	b005      	add	sp, #20
  405a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a12:	45e3      	cmp	fp, ip
  405a14:	dab8      	bge.n	405988 <_strtoll_l.isra.0+0xa0>
  405a16:	f04f 3eff 	mov.w	lr, #4294967295
  405a1a:	e7c2      	b.n	4059a2 <_strtoll_l.isra.0+0xba>
  405a1c:	2301      	movs	r3, #1
  405a1e:	782c      	ldrb	r4, [r5, #0]
  405a20:	9301      	str	r3, [sp, #4]
  405a22:	f108 0502 	add.w	r5, r8, #2
  405a26:	e77f      	b.n	405928 <_strtoll_l.isra.0+0x40>
  405a28:	9a03      	ldr	r2, [sp, #12]
  405a2a:	2322      	movs	r3, #34	; 0x22
  405a2c:	6013      	str	r3, [r2, #0]
  405a2e:	9b00      	ldr	r3, [sp, #0]
  405a30:	b32b      	cbz	r3, 405a7e <_strtoll_l.isra.0+0x196>
  405a32:	4652      	mov	r2, sl
  405a34:	463b      	mov	r3, r7
  405a36:	3d01      	subs	r5, #1
  405a38:	e7e4      	b.n	405a04 <_strtoll_l.isra.0+0x11c>
  405a3a:	4692      	mov	sl, r2
  405a3c:	461f      	mov	r7, r3
  405a3e:	e7f8      	b.n	405a32 <_strtoll_l.isra.0+0x14a>
  405a40:	2c30      	cmp	r4, #48	; 0x30
  405a42:	d117      	bne.n	405a74 <_strtoll_l.isra.0+0x18c>
  405a44:	782b      	ldrb	r3, [r5, #0]
  405a46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405a4a:	2b58      	cmp	r3, #88	; 0x58
  405a4c:	d112      	bne.n	405a74 <_strtoll_l.isra.0+0x18c>
  405a4e:	786c      	ldrb	r4, [r5, #1]
  405a50:	f04f 0810 	mov.w	r8, #16
  405a54:	f04f 0900 	mov.w	r9, #0
  405a58:	3502      	adds	r5, #2
  405a5a:	2610      	movs	r6, #16
  405a5c:	e77a      	b.n	405954 <_strtoll_l.isra.0+0x6c>
  405a5e:	782b      	ldrb	r3, [r5, #0]
  405a60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405a64:	2b58      	cmp	r3, #88	; 0x58
  405a66:	d0f2      	beq.n	405a4e <_strtoll_l.isra.0+0x166>
  405a68:	f04f 0808 	mov.w	r8, #8
  405a6c:	f04f 0900 	mov.w	r9, #0
  405a70:	2608      	movs	r6, #8
  405a72:	e76f      	b.n	405954 <_strtoll_l.isra.0+0x6c>
  405a74:	f04f 0810 	mov.w	r8, #16
  405a78:	f04f 0900 	mov.w	r9, #0
  405a7c:	e76a      	b.n	405954 <_strtoll_l.isra.0+0x6c>
  405a7e:	4652      	mov	r2, sl
  405a80:	463b      	mov	r3, r7
  405a82:	e7c1      	b.n	405a08 <_strtoll_l.isra.0+0x120>

00405a84 <_strtoll_r>:
  405a84:	b530      	push	{r4, r5, lr}
  405a86:	4c06      	ldr	r4, [pc, #24]	; (405aa0 <_strtoll_r+0x1c>)
  405a88:	4d06      	ldr	r5, [pc, #24]	; (405aa4 <_strtoll_r+0x20>)
  405a8a:	6824      	ldr	r4, [r4, #0]
  405a8c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405a8e:	b083      	sub	sp, #12
  405a90:	2c00      	cmp	r4, #0
  405a92:	bf08      	it	eq
  405a94:	462c      	moveq	r4, r5
  405a96:	9400      	str	r4, [sp, #0]
  405a98:	f7ff ff26 	bl	4058e8 <_strtoll_l.isra.0>
  405a9c:	b003      	add	sp, #12
  405a9e:	bd30      	pop	{r4, r5, pc}
  405aa0:	20400028 	.word	0x20400028
  405aa4:	2040045c 	.word	0x2040045c

00405aa8 <_strtoul_l.isra.0>:
  405aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405ab0:	460e      	mov	r6, r1
  405ab2:	4607      	mov	r7, r0
  405ab4:	4615      	mov	r5, r2
  405ab6:	4698      	mov	r8, r3
  405ab8:	468a      	mov	sl, r1
  405aba:	e000      	b.n	405abe <_strtoul_l.isra.0+0x16>
  405abc:	46a2      	mov	sl, r4
  405abe:	4654      	mov	r4, sl
  405ac0:	4648      	mov	r0, r9
  405ac2:	f814 bb01 	ldrb.w	fp, [r4], #1
  405ac6:	f7fe fe2b 	bl	404720 <__locale_ctype_ptr_l>
  405aca:	4458      	add	r0, fp
  405acc:	7840      	ldrb	r0, [r0, #1]
  405ace:	f010 0008 	ands.w	r0, r0, #8
  405ad2:	d1f3      	bne.n	405abc <_strtoul_l.isra.0+0x14>
  405ad4:	4659      	mov	r1, fp
  405ad6:	292d      	cmp	r1, #45	; 0x2d
  405ad8:	d059      	beq.n	405b8e <_strtoul_l.isra.0+0xe6>
  405ada:	292b      	cmp	r1, #43	; 0x2b
  405adc:	bf04      	itt	eq
  405ade:	7821      	ldrbeq	r1, [r4, #0]
  405ae0:	f10a 0402 	addeq.w	r4, sl, #2
  405ae4:	f1b8 0f00 	cmp.w	r8, #0
  405ae8:	d00c      	beq.n	405b04 <_strtoul_l.isra.0+0x5c>
  405aea:	f1b8 0f10 	cmp.w	r8, #16
  405aee:	d053      	beq.n	405b98 <_strtoul_l.isra.0+0xf0>
  405af0:	f04f 3cff 	mov.w	ip, #4294967295
  405af4:	fbbc fcf8 	udiv	ip, ip, r8
  405af8:	fb08 fa0c 	mul.w	sl, r8, ip
  405afc:	ea6f 0a0a 	mvn.w	sl, sl
  405b00:	46c1      	mov	r9, r8
  405b02:	e008      	b.n	405b16 <_strtoul_l.isra.0+0x6e>
  405b04:	2930      	cmp	r1, #48	; 0x30
  405b06:	d058      	beq.n	405bba <_strtoul_l.isra.0+0x112>
  405b08:	f04f 080a 	mov.w	r8, #10
  405b0c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 405bec <_strtoul_l.isra.0+0x144>
  405b10:	46c1      	mov	r9, r8
  405b12:	f04f 0a05 	mov.w	sl, #5
  405b16:	2300      	movs	r3, #0
  405b18:	469e      	mov	lr, r3
  405b1a:	e005      	b.n	405b28 <_strtoul_l.isra.0+0x80>
  405b1c:	d02a      	beq.n	405b74 <_strtoul_l.isra.0+0xcc>
  405b1e:	fb09 2e0e 	mla	lr, r9, lr, r2
  405b22:	2301      	movs	r3, #1
  405b24:	f814 1b01 	ldrb.w	r1, [r4], #1
  405b28:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  405b2c:	2a09      	cmp	r2, #9
  405b2e:	d905      	bls.n	405b3c <_strtoul_l.isra.0+0x94>
  405b30:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
  405b34:	2a19      	cmp	r2, #25
  405b36:	d80a      	bhi.n	405b4e <_strtoul_l.isra.0+0xa6>
  405b38:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
  405b3c:	4590      	cmp	r8, r2
  405b3e:	dd0e      	ble.n	405b5e <_strtoul_l.isra.0+0xb6>
  405b40:	2b00      	cmp	r3, #0
  405b42:	db01      	blt.n	405b48 <_strtoul_l.isra.0+0xa0>
  405b44:	45e6      	cmp	lr, ip
  405b46:	d9e9      	bls.n	405b1c <_strtoul_l.isra.0+0x74>
  405b48:	f04f 33ff 	mov.w	r3, #4294967295
  405b4c:	e7ea      	b.n	405b24 <_strtoul_l.isra.0+0x7c>
  405b4e:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
  405b52:	2a19      	cmp	r2, #25
  405b54:	d803      	bhi.n	405b5e <_strtoul_l.isra.0+0xb6>
  405b56:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  405b5a:	4590      	cmp	r8, r2
  405b5c:	dcf0      	bgt.n	405b40 <_strtoul_l.isra.0+0x98>
  405b5e:	2b00      	cmp	r3, #0
  405b60:	db0d      	blt.n	405b7e <_strtoul_l.isra.0+0xd6>
  405b62:	b108      	cbz	r0, 405b68 <_strtoul_l.isra.0+0xc0>
  405b64:	f1ce 0e00 	rsb	lr, lr, #0
  405b68:	b10d      	cbz	r5, 405b6e <_strtoul_l.isra.0+0xc6>
  405b6a:	b973      	cbnz	r3, 405b8a <_strtoul_l.isra.0+0xe2>
  405b6c:	602e      	str	r6, [r5, #0]
  405b6e:	4670      	mov	r0, lr
  405b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b74:	4552      	cmp	r2, sl
  405b76:	ddd2      	ble.n	405b1e <_strtoul_l.isra.0+0x76>
  405b78:	f04f 33ff 	mov.w	r3, #4294967295
  405b7c:	e7d2      	b.n	405b24 <_strtoul_l.isra.0+0x7c>
  405b7e:	2322      	movs	r3, #34	; 0x22
  405b80:	603b      	str	r3, [r7, #0]
  405b82:	f04f 3eff 	mov.w	lr, #4294967295
  405b86:	2d00      	cmp	r5, #0
  405b88:	d0f1      	beq.n	405b6e <_strtoul_l.isra.0+0xc6>
  405b8a:	1e66      	subs	r6, r4, #1
  405b8c:	e7ee      	b.n	405b6c <_strtoul_l.isra.0+0xc4>
  405b8e:	7821      	ldrb	r1, [r4, #0]
  405b90:	2001      	movs	r0, #1
  405b92:	f10a 0402 	add.w	r4, sl, #2
  405b96:	e7a5      	b.n	405ae4 <_strtoul_l.isra.0+0x3c>
  405b98:	2930      	cmp	r1, #48	; 0x30
  405b9a:	d11b      	bne.n	405bd4 <_strtoul_l.isra.0+0x12c>
  405b9c:	7823      	ldrb	r3, [r4, #0]
  405b9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405ba2:	2b58      	cmp	r3, #88	; 0x58
  405ba4:	d11c      	bne.n	405be0 <_strtoul_l.isra.0+0x138>
  405ba6:	f04f 0910 	mov.w	r9, #16
  405baa:	7861      	ldrb	r1, [r4, #1]
  405bac:	46c8      	mov	r8, r9
  405bae:	f04f 0a0f 	mov.w	sl, #15
  405bb2:	3402      	adds	r4, #2
  405bb4:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405bb8:	e7ad      	b.n	405b16 <_strtoul_l.isra.0+0x6e>
  405bba:	7823      	ldrb	r3, [r4, #0]
  405bbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405bc0:	2b58      	cmp	r3, #88	; 0x58
  405bc2:	d0f0      	beq.n	405ba6 <_strtoul_l.isra.0+0xfe>
  405bc4:	f04f 0808 	mov.w	r8, #8
  405bc8:	46c1      	mov	r9, r8
  405bca:	f04f 0a07 	mov.w	sl, #7
  405bce:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  405bd2:	e7a0      	b.n	405b16 <_strtoul_l.isra.0+0x6e>
  405bd4:	f04f 0a0f 	mov.w	sl, #15
  405bd8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405bdc:	46c1      	mov	r9, r8
  405bde:	e79a      	b.n	405b16 <_strtoul_l.isra.0+0x6e>
  405be0:	46c1      	mov	r9, r8
  405be2:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405be6:	f04f 0a0f 	mov.w	sl, #15
  405bea:	e794      	b.n	405b16 <_strtoul_l.isra.0+0x6e>
  405bec:	19999999 	.word	0x19999999

00405bf0 <_strtoul_r>:
  405bf0:	b530      	push	{r4, r5, lr}
  405bf2:	4c06      	ldr	r4, [pc, #24]	; (405c0c <_strtoul_r+0x1c>)
  405bf4:	4d06      	ldr	r5, [pc, #24]	; (405c10 <_strtoul_r+0x20>)
  405bf6:	6824      	ldr	r4, [r4, #0]
  405bf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405bfa:	b083      	sub	sp, #12
  405bfc:	2c00      	cmp	r4, #0
  405bfe:	bf08      	it	eq
  405c00:	462c      	moveq	r4, r5
  405c02:	9400      	str	r4, [sp, #0]
  405c04:	f7ff ff50 	bl	405aa8 <_strtoul_l.isra.0>
  405c08:	b003      	add	sp, #12
  405c0a:	bd30      	pop	{r4, r5, pc}
  405c0c:	20400028 	.word	0x20400028
  405c10:	2040045c 	.word	0x2040045c

00405c14 <_strtoull_l.isra.0>:
  405c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c18:	b085      	sub	sp, #20
  405c1a:	4693      	mov	fp, r2
  405c1c:	9102      	str	r1, [sp, #8]
  405c1e:	9003      	str	r0, [sp, #12]
  405c20:	469a      	mov	sl, r3
  405c22:	460f      	mov	r7, r1
  405c24:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  405c26:	e000      	b.n	405c2a <_strtoull_l.isra.0+0x16>
  405c28:	462f      	mov	r7, r5
  405c2a:	463d      	mov	r5, r7
  405c2c:	4630      	mov	r0, r6
  405c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
  405c32:	f7fe fd75 	bl	404720 <__locale_ctype_ptr_l>
  405c36:	4420      	add	r0, r4
  405c38:	7843      	ldrb	r3, [r0, #1]
  405c3a:	f013 0308 	ands.w	r3, r3, #8
  405c3e:	d1f3      	bne.n	405c28 <_strtoull_l.isra.0+0x14>
  405c40:	2c2d      	cmp	r4, #45	; 0x2d
  405c42:	f000 8089 	beq.w	405d58 <_strtoull_l.isra.0+0x144>
  405c46:	2c2b      	cmp	r4, #43	; 0x2b
  405c48:	bf03      	ittte	eq
  405c4a:	782c      	ldrbeq	r4, [r5, #0]
  405c4c:	9301      	streq	r3, [sp, #4]
  405c4e:	1cbd      	addeq	r5, r7, #2
  405c50:	9301      	strne	r3, [sp, #4]
  405c52:	f1ba 0f00 	cmp.w	sl, #0
  405c56:	d019      	beq.n	405c8c <_strtoull_l.isra.0+0x78>
  405c58:	f1ba 0f10 	cmp.w	sl, #16
  405c5c:	f000 8081 	beq.w	405d62 <_strtoull_l.isra.0+0x14e>
  405c60:	46d0      	mov	r8, sl
  405c62:	ea4f 79ea 	mov.w	r9, sl, asr #31
  405c66:	4642      	mov	r2, r8
  405c68:	464b      	mov	r3, r9
  405c6a:	f04f 30ff 	mov.w	r0, #4294967295
  405c6e:	f04f 31ff 	mov.w	r1, #4294967295
  405c72:	f7fc f83b 	bl	401cec <__aeabi_uldivmod>
  405c76:	4642      	mov	r2, r8
  405c78:	4606      	mov	r6, r0
  405c7a:	460f      	mov	r7, r1
  405c7c:	464b      	mov	r3, r9
  405c7e:	f04f 30ff 	mov.w	r0, #4294967295
  405c82:	f04f 31ff 	mov.w	r1, #4294967295
  405c86:	f7fc f831 	bl	401cec <__aeabi_uldivmod>
  405c8a:	e00b      	b.n	405ca4 <_strtoull_l.isra.0+0x90>
  405c8c:	2c30      	cmp	r4, #48	; 0x30
  405c8e:	d07d      	beq.n	405d8c <_strtoull_l.isra.0+0x178>
  405c90:	4f4e      	ldr	r7, [pc, #312]	; (405dcc <_strtoull_l.isra.0+0x1b8>)
  405c92:	2205      	movs	r2, #5
  405c94:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
  405c98:	f04f 080a 	mov.w	r8, #10
  405c9c:	f04f 0900 	mov.w	r9, #0
  405ca0:	f04f 0a0a 	mov.w	sl, #10
  405ca4:	f04f 0e00 	mov.w	lr, #0
  405ca8:	2000      	movs	r0, #0
  405caa:	2100      	movs	r1, #0
  405cac:	e011      	b.n	405cd2 <_strtoull_l.isra.0+0xbe>
  405cae:	42b9      	cmp	r1, r7
  405cb0:	bf08      	it	eq
  405cb2:	42b0      	cmpeq	r0, r6
  405cb4:	d03f      	beq.n	405d36 <_strtoull_l.isra.0+0x122>
  405cb6:	fb00 f409 	mul.w	r4, r0, r9
  405cba:	fb08 4401 	mla	r4, r8, r1, r4
  405cbe:	fba0 0108 	umull	r0, r1, r0, r8
  405cc2:	4421      	add	r1, r4
  405cc4:	18c0      	adds	r0, r0, r3
  405cc6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  405cca:	f04f 0e01 	mov.w	lr, #1
  405cce:	f815 4b01 	ldrb.w	r4, [r5], #1
  405cd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  405cd6:	2b09      	cmp	r3, #9
  405cd8:	d905      	bls.n	405ce6 <_strtoull_l.isra.0+0xd2>
  405cda:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  405cde:	2b19      	cmp	r3, #25
  405ce0:	d80d      	bhi.n	405cfe <_strtoull_l.isra.0+0xea>
  405ce2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
  405ce6:	459a      	cmp	sl, r3
  405ce8:	dd11      	ble.n	405d0e <_strtoull_l.isra.0+0xfa>
  405cea:	f1be 0f00 	cmp.w	lr, #0
  405cee:	db03      	blt.n	405cf8 <_strtoull_l.isra.0+0xe4>
  405cf0:	428f      	cmp	r7, r1
  405cf2:	bf08      	it	eq
  405cf4:	4286      	cmpeq	r6, r0
  405cf6:	d2da      	bcs.n	405cae <_strtoull_l.isra.0+0x9a>
  405cf8:	f04f 3eff 	mov.w	lr, #4294967295
  405cfc:	e7e7      	b.n	405cce <_strtoull_l.isra.0+0xba>
  405cfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  405d02:	2b19      	cmp	r3, #25
  405d04:	d803      	bhi.n	405d0e <_strtoull_l.isra.0+0xfa>
  405d06:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
  405d0a:	459a      	cmp	sl, r3
  405d0c:	dced      	bgt.n	405cea <_strtoull_l.isra.0+0xd6>
  405d0e:	f1be 0f00 	cmp.w	lr, #0
  405d12:	db15      	blt.n	405d40 <_strtoull_l.isra.0+0x12c>
  405d14:	9b01      	ldr	r3, [sp, #4]
  405d16:	b113      	cbz	r3, 405d1e <_strtoull_l.isra.0+0x10a>
  405d18:	4240      	negs	r0, r0
  405d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d1e:	f1bb 0f00 	cmp.w	fp, #0
  405d22:	d005      	beq.n	405d30 <_strtoull_l.isra.0+0x11c>
  405d24:	f1be 0f00 	cmp.w	lr, #0
  405d28:	d114      	bne.n	405d54 <_strtoull_l.isra.0+0x140>
  405d2a:	9d02      	ldr	r5, [sp, #8]
  405d2c:	f8cb 5000 	str.w	r5, [fp]
  405d30:	b005      	add	sp, #20
  405d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d36:	4293      	cmp	r3, r2
  405d38:	ddbd      	ble.n	405cb6 <_strtoull_l.isra.0+0xa2>
  405d3a:	f04f 3eff 	mov.w	lr, #4294967295
  405d3e:	e7c6      	b.n	405cce <_strtoull_l.isra.0+0xba>
  405d40:	9a03      	ldr	r2, [sp, #12]
  405d42:	2322      	movs	r3, #34	; 0x22
  405d44:	6013      	str	r3, [r2, #0]
  405d46:	f04f 30ff 	mov.w	r0, #4294967295
  405d4a:	f04f 31ff 	mov.w	r1, #4294967295
  405d4e:	f1bb 0f00 	cmp.w	fp, #0
  405d52:	d0ed      	beq.n	405d30 <_strtoull_l.isra.0+0x11c>
  405d54:	3d01      	subs	r5, #1
  405d56:	e7e9      	b.n	405d2c <_strtoull_l.isra.0+0x118>
  405d58:	2301      	movs	r3, #1
  405d5a:	782c      	ldrb	r4, [r5, #0]
  405d5c:	9301      	str	r3, [sp, #4]
  405d5e:	1cbd      	adds	r5, r7, #2
  405d60:	e777      	b.n	405c52 <_strtoull_l.isra.0+0x3e>
  405d62:	2c30      	cmp	r4, #48	; 0x30
  405d64:	d123      	bne.n	405dae <_strtoull_l.isra.0+0x19a>
  405d66:	782b      	ldrb	r3, [r5, #0]
  405d68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405d6c:	2b58      	cmp	r3, #88	; 0x58
  405d6e:	d128      	bne.n	405dc2 <_strtoull_l.isra.0+0x1ae>
  405d70:	786c      	ldrb	r4, [r5, #1]
  405d72:	220f      	movs	r2, #15
  405d74:	3502      	adds	r5, #2
  405d76:	f04f 36ff 	mov.w	r6, #4294967295
  405d7a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  405d7e:	f04f 0810 	mov.w	r8, #16
  405d82:	f04f 0900 	mov.w	r9, #0
  405d86:	f04f 0a10 	mov.w	sl, #16
  405d8a:	e78b      	b.n	405ca4 <_strtoull_l.isra.0+0x90>
  405d8c:	782b      	ldrb	r3, [r5, #0]
  405d8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405d92:	2b58      	cmp	r3, #88	; 0x58
  405d94:	d0ec      	beq.n	405d70 <_strtoull_l.isra.0+0x15c>
  405d96:	2207      	movs	r2, #7
  405d98:	f04f 36ff 	mov.w	r6, #4294967295
  405d9c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
  405da0:	f04f 0808 	mov.w	r8, #8
  405da4:	f04f 0900 	mov.w	r9, #0
  405da8:	f04f 0a08 	mov.w	sl, #8
  405dac:	e77a      	b.n	405ca4 <_strtoull_l.isra.0+0x90>
  405dae:	220f      	movs	r2, #15
  405db0:	f04f 36ff 	mov.w	r6, #4294967295
  405db4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  405db8:	f04f 0810 	mov.w	r8, #16
  405dbc:	f04f 0900 	mov.w	r9, #0
  405dc0:	e770      	b.n	405ca4 <_strtoull_l.isra.0+0x90>
  405dc2:	f04f 0810 	mov.w	r8, #16
  405dc6:	f04f 0900 	mov.w	r9, #0
  405dca:	e74c      	b.n	405c66 <_strtoull_l.isra.0+0x52>
  405dcc:	19999999 	.word	0x19999999

00405dd0 <_strtoull_r>:
  405dd0:	b530      	push	{r4, r5, lr}
  405dd2:	4c06      	ldr	r4, [pc, #24]	; (405dec <_strtoull_r+0x1c>)
  405dd4:	4d06      	ldr	r5, [pc, #24]	; (405df0 <_strtoull_r+0x20>)
  405dd6:	6824      	ldr	r4, [r4, #0]
  405dd8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  405dda:	b083      	sub	sp, #12
  405ddc:	2c00      	cmp	r4, #0
  405dde:	bf08      	it	eq
  405de0:	462c      	moveq	r4, r5
  405de2:	9400      	str	r4, [sp, #0]
  405de4:	f7ff ff16 	bl	405c14 <_strtoull_l.isra.0>
  405de8:	b003      	add	sp, #12
  405dea:	bd30      	pop	{r4, r5, pc}
  405dec:	20400028 	.word	0x20400028
  405df0:	2040045c 	.word	0x2040045c

00405df4 <__submore>:
  405df4:	f101 0340 	add.w	r3, r1, #64	; 0x40
  405df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405dfc:	460c      	mov	r4, r1
  405dfe:	6b09      	ldr	r1, [r1, #48]	; 0x30
  405e00:	4299      	cmp	r1, r3
  405e02:	d014      	beq.n	405e2e <__submore+0x3a>
  405e04:	6b66      	ldr	r6, [r4, #52]	; 0x34
  405e06:	0077      	lsls	r7, r6, #1
  405e08:	463a      	mov	r2, r7
  405e0a:	f7ff f973 	bl	4050f4 <_realloc_r>
  405e0e:	4605      	mov	r5, r0
  405e10:	b340      	cbz	r0, 405e64 <__submore+0x70>
  405e12:	eb00 0806 	add.w	r8, r0, r6
  405e16:	4632      	mov	r2, r6
  405e18:	4640      	mov	r0, r8
  405e1a:	4629      	mov	r1, r5
  405e1c:	f7ff f860 	bl	404ee0 <memcpy>
  405e20:	f8c4 8000 	str.w	r8, [r4]
  405e24:	6325      	str	r5, [r4, #48]	; 0x30
  405e26:	6367      	str	r7, [r4, #52]	; 0x34
  405e28:	2000      	movs	r0, #0
  405e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405e32:	f7fe fd0f 	bl	404854 <_malloc_r>
  405e36:	b1a8      	cbz	r0, 405e64 <__submore+0x70>
  405e38:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  405e3c:	6320      	str	r0, [r4, #48]	; 0x30
  405e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405e42:	6362      	str	r2, [r4, #52]	; 0x34
  405e44:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  405e48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  405e4c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  405e50:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  405e54:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  405e58:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  405e5c:	6020      	str	r0, [r4, #0]
  405e5e:	2000      	movs	r0, #0
  405e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405e64:	f04f 30ff 	mov.w	r0, #4294967295
  405e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405e6c <_ungetc_r>:
  405e6c:	b570      	push	{r4, r5, r6, lr}
  405e6e:	1c4c      	adds	r4, r1, #1
  405e70:	d024      	beq.n	405ebc <_ungetc_r+0x50>
  405e72:	4606      	mov	r6, r0
  405e74:	4614      	mov	r4, r2
  405e76:	460d      	mov	r5, r1
  405e78:	b110      	cbz	r0, 405e80 <_ungetc_r+0x14>
  405e7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405e7c:	2b00      	cmp	r3, #0
  405e7e:	d04d      	beq.n	405f1c <_ungetc_r+0xb0>
  405e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405e82:	f013 0f01 	tst.w	r3, #1
  405e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e8a:	b29a      	uxth	r2, r3
  405e8c:	d101      	bne.n	405e92 <_ungetc_r+0x26>
  405e8e:	0591      	lsls	r1, r2, #22
  405e90:	d559      	bpl.n	405f46 <_ungetc_r+0xda>
  405e92:	0492      	lsls	r2, r2, #18
  405e94:	d405      	bmi.n	405ea2 <_ungetc_r+0x36>
  405e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405e9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405ea0:	6662      	str	r2, [r4, #100]	; 0x64
  405ea2:	f023 0320 	bic.w	r3, r3, #32
  405ea6:	b29a      	uxth	r2, r3
  405ea8:	0750      	lsls	r0, r2, #29
  405eaa:	81a3      	strh	r3, [r4, #12]
  405eac:	d41b      	bmi.n	405ee6 <_ungetc_r+0x7a>
  405eae:	06d1      	lsls	r1, r2, #27
  405eb0:	d408      	bmi.n	405ec4 <_ungetc_r+0x58>
  405eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405eb4:	07d8      	lsls	r0, r3, #31
  405eb6:	d401      	bmi.n	405ebc <_ungetc_r+0x50>
  405eb8:	0591      	lsls	r1, r2, #22
  405eba:	d53e      	bpl.n	405f3a <_ungetc_r+0xce>
  405ebc:	f04f 35ff 	mov.w	r5, #4294967295
  405ec0:	4628      	mov	r0, r5
  405ec2:	bd70      	pop	{r4, r5, r6, pc}
  405ec4:	0712      	lsls	r2, r2, #28
  405ec6:	d50b      	bpl.n	405ee0 <_ungetc_r+0x74>
  405ec8:	4621      	mov	r1, r4
  405eca:	4630      	mov	r0, r6
  405ecc:	f7fd feec 	bl	403ca8 <_fflush_r>
  405ed0:	2800      	cmp	r0, #0
  405ed2:	d12c      	bne.n	405f2e <_ungetc_r+0xc2>
  405ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ed8:	60a0      	str	r0, [r4, #8]
  405eda:	61a0      	str	r0, [r4, #24]
  405edc:	f023 0308 	bic.w	r3, r3, #8
  405ee0:	f043 0304 	orr.w	r3, r3, #4
  405ee4:	81a3      	strh	r3, [r4, #12]
  405ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405ee8:	b2ed      	uxtb	r5, r5
  405eea:	2b00      	cmp	r3, #0
  405eec:	d034      	beq.n	405f58 <_ungetc_r+0xec>
  405eee:	6862      	ldr	r2, [r4, #4]
  405ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405ef2:	429a      	cmp	r2, r3
  405ef4:	da15      	bge.n	405f22 <_ungetc_r+0xb6>
  405ef6:	6823      	ldr	r3, [r4, #0]
  405ef8:	1e5a      	subs	r2, r3, #1
  405efa:	6022      	str	r2, [r4, #0]
  405efc:	f803 5c01 	strb.w	r5, [r3, #-1]
  405f00:	6863      	ldr	r3, [r4, #4]
  405f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405f04:	3301      	adds	r3, #1
  405f06:	07d0      	lsls	r0, r2, #31
  405f08:	6063      	str	r3, [r4, #4]
  405f0a:	d4d9      	bmi.n	405ec0 <_ungetc_r+0x54>
  405f0c:	89a3      	ldrh	r3, [r4, #12]
  405f0e:	059b      	lsls	r3, r3, #22
  405f10:	d4d6      	bmi.n	405ec0 <_ungetc_r+0x54>
  405f12:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f14:	f7fe fc1c 	bl	404750 <__retarget_lock_release_recursive>
  405f18:	4628      	mov	r0, r5
  405f1a:	bd70      	pop	{r4, r5, r6, pc}
  405f1c:	f7fd ff2e 	bl	403d7c <__sinit>
  405f20:	e7ae      	b.n	405e80 <_ungetc_r+0x14>
  405f22:	4630      	mov	r0, r6
  405f24:	4621      	mov	r1, r4
  405f26:	f7ff ff65 	bl	405df4 <__submore>
  405f2a:	2800      	cmp	r0, #0
  405f2c:	d0e3      	beq.n	405ef6 <_ungetc_r+0x8a>
  405f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f30:	07de      	lsls	r6, r3, #31
  405f32:	d4c3      	bmi.n	405ebc <_ungetc_r+0x50>
  405f34:	89a3      	ldrh	r3, [r4, #12]
  405f36:	059d      	lsls	r5, r3, #22
  405f38:	d4c0      	bmi.n	405ebc <_ungetc_r+0x50>
  405f3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f3c:	f7fe fc08 	bl	404750 <__retarget_lock_release_recursive>
  405f40:	f04f 35ff 	mov.w	r5, #4294967295
  405f44:	e7bc      	b.n	405ec0 <_ungetc_r+0x54>
  405f46:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f48:	f7fe fc00 	bl	40474c <__retarget_lock_acquire_recursive>
  405f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f50:	b29a      	uxth	r2, r3
  405f52:	0492      	lsls	r2, r2, #18
  405f54:	d4a5      	bmi.n	405ea2 <_ungetc_r+0x36>
  405f56:	e79e      	b.n	405e96 <_ungetc_r+0x2a>
  405f58:	6922      	ldr	r2, [r4, #16]
  405f5a:	6823      	ldr	r3, [r4, #0]
  405f5c:	b172      	cbz	r2, 405f7c <_ungetc_r+0x110>
  405f5e:	429a      	cmp	r2, r3
  405f60:	d20c      	bcs.n	405f7c <_ungetc_r+0x110>
  405f62:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  405f66:	42aa      	cmp	r2, r5
  405f68:	d108      	bne.n	405f7c <_ungetc_r+0x110>
  405f6a:	6862      	ldr	r2, [r4, #4]
  405f6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405f6e:	3b01      	subs	r3, #1
  405f70:	3201      	adds	r2, #1
  405f72:	07c9      	lsls	r1, r1, #31
  405f74:	6023      	str	r3, [r4, #0]
  405f76:	6062      	str	r2, [r4, #4]
  405f78:	d5c8      	bpl.n	405f0c <_ungetc_r+0xa0>
  405f7a:	e7a1      	b.n	405ec0 <_ungetc_r+0x54>
  405f7c:	63a3      	str	r3, [r4, #56]	; 0x38
  405f7e:	4623      	mov	r3, r4
  405f80:	6860      	ldr	r0, [r4, #4]
  405f82:	63e0      	str	r0, [r4, #60]	; 0x3c
  405f84:	2203      	movs	r2, #3
  405f86:	f104 0140 	add.w	r1, r4, #64	; 0x40
  405f8a:	6362      	str	r2, [r4, #52]	; 0x34
  405f8c:	6321      	str	r1, [r4, #48]	; 0x30
  405f8e:	f803 5f42 	strb.w	r5, [r3, #66]!
  405f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405f94:	6023      	str	r3, [r4, #0]
  405f96:	07d2      	lsls	r2, r2, #31
  405f98:	f04f 0301 	mov.w	r3, #1
  405f9c:	6063      	str	r3, [r4, #4]
  405f9e:	d48f      	bmi.n	405ec0 <_ungetc_r+0x54>
  405fa0:	e7b4      	b.n	405f0c <_ungetc_r+0xa0>
  405fa2:	bf00      	nop

00405fa4 <__swbuf_r>:
  405fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fa6:	460d      	mov	r5, r1
  405fa8:	4614      	mov	r4, r2
  405faa:	4606      	mov	r6, r0
  405fac:	b110      	cbz	r0, 405fb4 <__swbuf_r+0x10>
  405fae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405fb0:	2b00      	cmp	r3, #0
  405fb2:	d04b      	beq.n	40604c <__swbuf_r+0xa8>
  405fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405fb8:	69a3      	ldr	r3, [r4, #24]
  405fba:	60a3      	str	r3, [r4, #8]
  405fbc:	b291      	uxth	r1, r2
  405fbe:	0708      	lsls	r0, r1, #28
  405fc0:	d539      	bpl.n	406036 <__swbuf_r+0x92>
  405fc2:	6923      	ldr	r3, [r4, #16]
  405fc4:	2b00      	cmp	r3, #0
  405fc6:	d036      	beq.n	406036 <__swbuf_r+0x92>
  405fc8:	b2ed      	uxtb	r5, r5
  405fca:	0489      	lsls	r1, r1, #18
  405fcc:	462f      	mov	r7, r5
  405fce:	d515      	bpl.n	405ffc <__swbuf_r+0x58>
  405fd0:	6822      	ldr	r2, [r4, #0]
  405fd2:	6961      	ldr	r1, [r4, #20]
  405fd4:	1ad3      	subs	r3, r2, r3
  405fd6:	428b      	cmp	r3, r1
  405fd8:	da1c      	bge.n	406014 <__swbuf_r+0x70>
  405fda:	3301      	adds	r3, #1
  405fdc:	68a1      	ldr	r1, [r4, #8]
  405fde:	1c50      	adds	r0, r2, #1
  405fe0:	3901      	subs	r1, #1
  405fe2:	60a1      	str	r1, [r4, #8]
  405fe4:	6020      	str	r0, [r4, #0]
  405fe6:	7015      	strb	r5, [r2, #0]
  405fe8:	6962      	ldr	r2, [r4, #20]
  405fea:	429a      	cmp	r2, r3
  405fec:	d01a      	beq.n	406024 <__swbuf_r+0x80>
  405fee:	89a3      	ldrh	r3, [r4, #12]
  405ff0:	07db      	lsls	r3, r3, #31
  405ff2:	d501      	bpl.n	405ff8 <__swbuf_r+0x54>
  405ff4:	2d0a      	cmp	r5, #10
  405ff6:	d015      	beq.n	406024 <__swbuf_r+0x80>
  405ff8:	4638      	mov	r0, r7
  405ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ffc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406002:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406006:	81a2      	strh	r2, [r4, #12]
  406008:	6822      	ldr	r2, [r4, #0]
  40600a:	6661      	str	r1, [r4, #100]	; 0x64
  40600c:	6961      	ldr	r1, [r4, #20]
  40600e:	1ad3      	subs	r3, r2, r3
  406010:	428b      	cmp	r3, r1
  406012:	dbe2      	blt.n	405fda <__swbuf_r+0x36>
  406014:	4621      	mov	r1, r4
  406016:	4630      	mov	r0, r6
  406018:	f7fd fe46 	bl	403ca8 <_fflush_r>
  40601c:	b940      	cbnz	r0, 406030 <__swbuf_r+0x8c>
  40601e:	6822      	ldr	r2, [r4, #0]
  406020:	2301      	movs	r3, #1
  406022:	e7db      	b.n	405fdc <__swbuf_r+0x38>
  406024:	4621      	mov	r1, r4
  406026:	4630      	mov	r0, r6
  406028:	f7fd fe3e 	bl	403ca8 <_fflush_r>
  40602c:	2800      	cmp	r0, #0
  40602e:	d0e3      	beq.n	405ff8 <__swbuf_r+0x54>
  406030:	f04f 37ff 	mov.w	r7, #4294967295
  406034:	e7e0      	b.n	405ff8 <__swbuf_r+0x54>
  406036:	4621      	mov	r1, r4
  406038:	4630      	mov	r0, r6
  40603a:	f7fd fd21 	bl	403a80 <__swsetup_r>
  40603e:	2800      	cmp	r0, #0
  406040:	d1f6      	bne.n	406030 <__swbuf_r+0x8c>
  406042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406046:	6923      	ldr	r3, [r4, #16]
  406048:	b291      	uxth	r1, r2
  40604a:	e7bd      	b.n	405fc8 <__swbuf_r+0x24>
  40604c:	f7fd fe96 	bl	403d7c <__sinit>
  406050:	e7b0      	b.n	405fb4 <__swbuf_r+0x10>
  406052:	bf00      	nop

00406054 <_wcrtomb_r>:
  406054:	b5f0      	push	{r4, r5, r6, r7, lr}
  406056:	4606      	mov	r6, r0
  406058:	b085      	sub	sp, #20
  40605a:	461f      	mov	r7, r3
  40605c:	b189      	cbz	r1, 406082 <_wcrtomb_r+0x2e>
  40605e:	4c10      	ldr	r4, [pc, #64]	; (4060a0 <_wcrtomb_r+0x4c>)
  406060:	4d10      	ldr	r5, [pc, #64]	; (4060a4 <_wcrtomb_r+0x50>)
  406062:	6824      	ldr	r4, [r4, #0]
  406064:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406066:	2c00      	cmp	r4, #0
  406068:	bf08      	it	eq
  40606a:	462c      	moveq	r4, r5
  40606c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406070:	47a0      	blx	r4
  406072:	1c43      	adds	r3, r0, #1
  406074:	d103      	bne.n	40607e <_wcrtomb_r+0x2a>
  406076:	2200      	movs	r2, #0
  406078:	238a      	movs	r3, #138	; 0x8a
  40607a:	603a      	str	r2, [r7, #0]
  40607c:	6033      	str	r3, [r6, #0]
  40607e:	b005      	add	sp, #20
  406080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406082:	460c      	mov	r4, r1
  406084:	4906      	ldr	r1, [pc, #24]	; (4060a0 <_wcrtomb_r+0x4c>)
  406086:	4a07      	ldr	r2, [pc, #28]	; (4060a4 <_wcrtomb_r+0x50>)
  406088:	6809      	ldr	r1, [r1, #0]
  40608a:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40608c:	2900      	cmp	r1, #0
  40608e:	bf08      	it	eq
  406090:	4611      	moveq	r1, r2
  406092:	4622      	mov	r2, r4
  406094:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406098:	a901      	add	r1, sp, #4
  40609a:	47a0      	blx	r4
  40609c:	e7e9      	b.n	406072 <_wcrtomb_r+0x1e>
  40609e:	bf00      	nop
  4060a0:	20400028 	.word	0x20400028
  4060a4:	2040045c 	.word	0x2040045c

004060a8 <__ascii_wctomb>:
  4060a8:	b121      	cbz	r1, 4060b4 <__ascii_wctomb+0xc>
  4060aa:	2aff      	cmp	r2, #255	; 0xff
  4060ac:	d804      	bhi.n	4060b8 <__ascii_wctomb+0x10>
  4060ae:	700a      	strb	r2, [r1, #0]
  4060b0:	2001      	movs	r0, #1
  4060b2:	4770      	bx	lr
  4060b4:	4608      	mov	r0, r1
  4060b6:	4770      	bx	lr
  4060b8:	238a      	movs	r3, #138	; 0x8a
  4060ba:	6003      	str	r3, [r0, #0]
  4060bc:	f04f 30ff 	mov.w	r0, #4294967295
  4060c0:	4770      	bx	lr
  4060c2:	bf00      	nop

004060c4 <_write_r>:
  4060c4:	b570      	push	{r4, r5, r6, lr}
  4060c6:	460d      	mov	r5, r1
  4060c8:	4c08      	ldr	r4, [pc, #32]	; (4060ec <_write_r+0x28>)
  4060ca:	4611      	mov	r1, r2
  4060cc:	4606      	mov	r6, r0
  4060ce:	461a      	mov	r2, r3
  4060d0:	4628      	mov	r0, r5
  4060d2:	2300      	movs	r3, #0
  4060d4:	6023      	str	r3, [r4, #0]
  4060d6:	f7fa fcbd 	bl	400a54 <_write>
  4060da:	1c43      	adds	r3, r0, #1
  4060dc:	d000      	beq.n	4060e0 <_write_r+0x1c>
  4060de:	bd70      	pop	{r4, r5, r6, pc}
  4060e0:	6823      	ldr	r3, [r4, #0]
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	d0fb      	beq.n	4060de <_write_r+0x1a>
  4060e6:	6033      	str	r3, [r6, #0]
  4060e8:	bd70      	pop	{r4, r5, r6, pc}
  4060ea:	bf00      	nop
  4060ec:	20400dbc 	.word	0x20400dbc

004060f0 <__register_exitproc>:
  4060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060f4:	4d2c      	ldr	r5, [pc, #176]	; (4061a8 <__register_exitproc+0xb8>)
  4060f6:	4606      	mov	r6, r0
  4060f8:	6828      	ldr	r0, [r5, #0]
  4060fa:	4698      	mov	r8, r3
  4060fc:	460f      	mov	r7, r1
  4060fe:	4691      	mov	r9, r2
  406100:	f7fe fb24 	bl	40474c <__retarget_lock_acquire_recursive>
  406104:	4b29      	ldr	r3, [pc, #164]	; (4061ac <__register_exitproc+0xbc>)
  406106:	681c      	ldr	r4, [r3, #0]
  406108:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40610c:	2b00      	cmp	r3, #0
  40610e:	d03e      	beq.n	40618e <__register_exitproc+0x9e>
  406110:	685a      	ldr	r2, [r3, #4]
  406112:	2a1f      	cmp	r2, #31
  406114:	dc1c      	bgt.n	406150 <__register_exitproc+0x60>
  406116:	f102 0e01 	add.w	lr, r2, #1
  40611a:	b176      	cbz	r6, 40613a <__register_exitproc+0x4a>
  40611c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406120:	2401      	movs	r4, #1
  406122:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406126:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40612a:	4094      	lsls	r4, r2
  40612c:	4320      	orrs	r0, r4
  40612e:	2e02      	cmp	r6, #2
  406130:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406134:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406138:	d023      	beq.n	406182 <__register_exitproc+0x92>
  40613a:	3202      	adds	r2, #2
  40613c:	f8c3 e004 	str.w	lr, [r3, #4]
  406140:	6828      	ldr	r0, [r5, #0]
  406142:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406146:	f7fe fb03 	bl	404750 <__retarget_lock_release_recursive>
  40614a:	2000      	movs	r0, #0
  40614c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406150:	4b17      	ldr	r3, [pc, #92]	; (4061b0 <__register_exitproc+0xc0>)
  406152:	b30b      	cbz	r3, 406198 <__register_exitproc+0xa8>
  406154:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406158:	f7fe fb74 	bl	404844 <malloc>
  40615c:	4603      	mov	r3, r0
  40615e:	b1d8      	cbz	r0, 406198 <__register_exitproc+0xa8>
  406160:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406164:	6002      	str	r2, [r0, #0]
  406166:	2100      	movs	r1, #0
  406168:	6041      	str	r1, [r0, #4]
  40616a:	460a      	mov	r2, r1
  40616c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406170:	f04f 0e01 	mov.w	lr, #1
  406174:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406178:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40617c:	2e00      	cmp	r6, #0
  40617e:	d0dc      	beq.n	40613a <__register_exitproc+0x4a>
  406180:	e7cc      	b.n	40611c <__register_exitproc+0x2c>
  406182:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406186:	430c      	orrs	r4, r1
  406188:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40618c:	e7d5      	b.n	40613a <__register_exitproc+0x4a>
  40618e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406192:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406196:	e7bb      	b.n	406110 <__register_exitproc+0x20>
  406198:	6828      	ldr	r0, [r5, #0]
  40619a:	f7fe fad9 	bl	404750 <__retarget_lock_release_recursive>
  40619e:	f04f 30ff 	mov.w	r0, #4294967295
  4061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4061a6:	bf00      	nop
  4061a8:	20400458 	.word	0x20400458
  4061ac:	00406a00 	.word	0x00406a00
  4061b0:	00404845 	.word	0x00404845

004061b4 <_close_r>:
  4061b4:	b538      	push	{r3, r4, r5, lr}
  4061b6:	4c07      	ldr	r4, [pc, #28]	; (4061d4 <_close_r+0x20>)
  4061b8:	2300      	movs	r3, #0
  4061ba:	4605      	mov	r5, r0
  4061bc:	4608      	mov	r0, r1
  4061be:	6023      	str	r3, [r4, #0]
  4061c0:	f7fb fb46 	bl	401850 <_close>
  4061c4:	1c43      	adds	r3, r0, #1
  4061c6:	d000      	beq.n	4061ca <_close_r+0x16>
  4061c8:	bd38      	pop	{r3, r4, r5, pc}
  4061ca:	6823      	ldr	r3, [r4, #0]
  4061cc:	2b00      	cmp	r3, #0
  4061ce:	d0fb      	beq.n	4061c8 <_close_r+0x14>
  4061d0:	602b      	str	r3, [r5, #0]
  4061d2:	bd38      	pop	{r3, r4, r5, pc}
  4061d4:	20400dbc 	.word	0x20400dbc

004061d8 <_fclose_r>:
  4061d8:	b570      	push	{r4, r5, r6, lr}
  4061da:	b159      	cbz	r1, 4061f4 <_fclose_r+0x1c>
  4061dc:	4605      	mov	r5, r0
  4061de:	460c      	mov	r4, r1
  4061e0:	b110      	cbz	r0, 4061e8 <_fclose_r+0x10>
  4061e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061e4:	2b00      	cmp	r3, #0
  4061e6:	d03c      	beq.n	406262 <_fclose_r+0x8a>
  4061e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4061ea:	07d8      	lsls	r0, r3, #31
  4061ec:	d505      	bpl.n	4061fa <_fclose_r+0x22>
  4061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4061f2:	b92b      	cbnz	r3, 406200 <_fclose_r+0x28>
  4061f4:	2600      	movs	r6, #0
  4061f6:	4630      	mov	r0, r6
  4061f8:	bd70      	pop	{r4, r5, r6, pc}
  4061fa:	89a3      	ldrh	r3, [r4, #12]
  4061fc:	0599      	lsls	r1, r3, #22
  4061fe:	d53c      	bpl.n	40627a <_fclose_r+0xa2>
  406200:	4621      	mov	r1, r4
  406202:	4628      	mov	r0, r5
  406204:	f7fd fcb0 	bl	403b68 <__sflush_r>
  406208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40620a:	4606      	mov	r6, r0
  40620c:	b133      	cbz	r3, 40621c <_fclose_r+0x44>
  40620e:	69e1      	ldr	r1, [r4, #28]
  406210:	4628      	mov	r0, r5
  406212:	4798      	blx	r3
  406214:	2800      	cmp	r0, #0
  406216:	bfb8      	it	lt
  406218:	f04f 36ff 	movlt.w	r6, #4294967295
  40621c:	89a3      	ldrh	r3, [r4, #12]
  40621e:	061a      	lsls	r2, r3, #24
  406220:	d422      	bmi.n	406268 <_fclose_r+0x90>
  406222:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406224:	b141      	cbz	r1, 406238 <_fclose_r+0x60>
  406226:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40622a:	4299      	cmp	r1, r3
  40622c:	d002      	beq.n	406234 <_fclose_r+0x5c>
  40622e:	4628      	mov	r0, r5
  406230:	f7fd ffac 	bl	40418c <_free_r>
  406234:	2300      	movs	r3, #0
  406236:	6323      	str	r3, [r4, #48]	; 0x30
  406238:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40623a:	b121      	cbz	r1, 406246 <_fclose_r+0x6e>
  40623c:	4628      	mov	r0, r5
  40623e:	f7fd ffa5 	bl	40418c <_free_r>
  406242:	2300      	movs	r3, #0
  406244:	6463      	str	r3, [r4, #68]	; 0x44
  406246:	f7fd fdc5 	bl	403dd4 <__sfp_lock_acquire>
  40624a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40624c:	2200      	movs	r2, #0
  40624e:	07db      	lsls	r3, r3, #31
  406250:	81a2      	strh	r2, [r4, #12]
  406252:	d50e      	bpl.n	406272 <_fclose_r+0x9a>
  406254:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406256:	f7fe fa77 	bl	404748 <__retarget_lock_close_recursive>
  40625a:	f7fd fdc1 	bl	403de0 <__sfp_lock_release>
  40625e:	4630      	mov	r0, r6
  406260:	bd70      	pop	{r4, r5, r6, pc}
  406262:	f7fd fd8b 	bl	403d7c <__sinit>
  406266:	e7bf      	b.n	4061e8 <_fclose_r+0x10>
  406268:	6921      	ldr	r1, [r4, #16]
  40626a:	4628      	mov	r0, r5
  40626c:	f7fd ff8e 	bl	40418c <_free_r>
  406270:	e7d7      	b.n	406222 <_fclose_r+0x4a>
  406272:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406274:	f7fe fa6c 	bl	404750 <__retarget_lock_release_recursive>
  406278:	e7ec      	b.n	406254 <_fclose_r+0x7c>
  40627a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40627c:	f7fe fa66 	bl	40474c <__retarget_lock_acquire_recursive>
  406280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406284:	2b00      	cmp	r3, #0
  406286:	d1bb      	bne.n	406200 <_fclose_r+0x28>
  406288:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40628a:	f016 0601 	ands.w	r6, r6, #1
  40628e:	d1b1      	bne.n	4061f4 <_fclose_r+0x1c>
  406290:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406292:	f7fe fa5d 	bl	404750 <__retarget_lock_release_recursive>
  406296:	4630      	mov	r0, r6
  406298:	bd70      	pop	{r4, r5, r6, pc}
  40629a:	bf00      	nop

0040629c <_fstat_r>:
  40629c:	b538      	push	{r3, r4, r5, lr}
  40629e:	460b      	mov	r3, r1
  4062a0:	4c07      	ldr	r4, [pc, #28]	; (4062c0 <_fstat_r+0x24>)
  4062a2:	4605      	mov	r5, r0
  4062a4:	4611      	mov	r1, r2
  4062a6:	4618      	mov	r0, r3
  4062a8:	2300      	movs	r3, #0
  4062aa:	6023      	str	r3, [r4, #0]
  4062ac:	f7fb fad3 	bl	401856 <_fstat>
  4062b0:	1c43      	adds	r3, r0, #1
  4062b2:	d000      	beq.n	4062b6 <_fstat_r+0x1a>
  4062b4:	bd38      	pop	{r3, r4, r5, pc}
  4062b6:	6823      	ldr	r3, [r4, #0]
  4062b8:	2b00      	cmp	r3, #0
  4062ba:	d0fb      	beq.n	4062b4 <_fstat_r+0x18>
  4062bc:	602b      	str	r3, [r5, #0]
  4062be:	bd38      	pop	{r3, r4, r5, pc}
  4062c0:	20400dbc 	.word	0x20400dbc

004062c4 <_isatty_r>:
  4062c4:	b538      	push	{r3, r4, r5, lr}
  4062c6:	4c07      	ldr	r4, [pc, #28]	; (4062e4 <_isatty_r+0x20>)
  4062c8:	2300      	movs	r3, #0
  4062ca:	4605      	mov	r5, r0
  4062cc:	4608      	mov	r0, r1
  4062ce:	6023      	str	r3, [r4, #0]
  4062d0:	f7fb fac6 	bl	401860 <_isatty>
  4062d4:	1c43      	adds	r3, r0, #1
  4062d6:	d000      	beq.n	4062da <_isatty_r+0x16>
  4062d8:	bd38      	pop	{r3, r4, r5, pc}
  4062da:	6823      	ldr	r3, [r4, #0]
  4062dc:	2b00      	cmp	r3, #0
  4062de:	d0fb      	beq.n	4062d8 <_isatty_r+0x14>
  4062e0:	602b      	str	r3, [r5, #0]
  4062e2:	bd38      	pop	{r3, r4, r5, pc}
  4062e4:	20400dbc 	.word	0x20400dbc

004062e8 <_lseek_r>:
  4062e8:	b570      	push	{r4, r5, r6, lr}
  4062ea:	460d      	mov	r5, r1
  4062ec:	4c08      	ldr	r4, [pc, #32]	; (406310 <_lseek_r+0x28>)
  4062ee:	4611      	mov	r1, r2
  4062f0:	4606      	mov	r6, r0
  4062f2:	461a      	mov	r2, r3
  4062f4:	4628      	mov	r0, r5
  4062f6:	2300      	movs	r3, #0
  4062f8:	6023      	str	r3, [r4, #0]
  4062fa:	f7fb fab3 	bl	401864 <_lseek>
  4062fe:	1c43      	adds	r3, r0, #1
  406300:	d000      	beq.n	406304 <_lseek_r+0x1c>
  406302:	bd70      	pop	{r4, r5, r6, pc}
  406304:	6823      	ldr	r3, [r4, #0]
  406306:	2b00      	cmp	r3, #0
  406308:	d0fb      	beq.n	406302 <_lseek_r+0x1a>
  40630a:	6033      	str	r3, [r6, #0]
  40630c:	bd70      	pop	{r4, r5, r6, pc}
  40630e:	bf00      	nop
  406310:	20400dbc 	.word	0x20400dbc

00406314 <_read_r>:
  406314:	b570      	push	{r4, r5, r6, lr}
  406316:	460d      	mov	r5, r1
  406318:	4c08      	ldr	r4, [pc, #32]	; (40633c <_read_r+0x28>)
  40631a:	4611      	mov	r1, r2
  40631c:	4606      	mov	r6, r0
  40631e:	461a      	mov	r2, r3
  406320:	4628      	mov	r0, r5
  406322:	2300      	movs	r3, #0
  406324:	6023      	str	r3, [r4, #0]
  406326:	f7fa fb77 	bl	400a18 <_read>
  40632a:	1c43      	adds	r3, r0, #1
  40632c:	d000      	beq.n	406330 <_read_r+0x1c>
  40632e:	bd70      	pop	{r4, r5, r6, pc}
  406330:	6823      	ldr	r3, [r4, #0]
  406332:	2b00      	cmp	r3, #0
  406334:	d0fb      	beq.n	40632e <_read_r+0x1a>
  406336:	6033      	str	r3, [r6, #0]
  406338:	bd70      	pop	{r4, r5, r6, pc}
  40633a:	bf00      	nop
  40633c:	20400dbc 	.word	0x20400dbc
  406340:	45200d0a 	.word	0x45200d0a
  406344:	6e657478 	.word	0x6e657478
  406348:	20646564 	.word	0x20646564
  40634c:	6d204446 	.word	0x6d204446
  406350:	61737365 	.word	0x61737365
  406354:	72206567 	.word	0x72206567
  406358:	69656365 	.word	0x69656365
  40635c:	20646576 	.word	0x20646576
  406360:	52206e69 	.word	0x52206e69
  406364:	75622078 	.word	0x75622078
  406368:	72656666 	.word	0x72656666
  40636c:	6854202e 	.word	0x6854202e
  406370:	65722065 	.word	0x65722065
  406374:	76696563 	.word	0x76696563
  406378:	64206465 	.word	0x64206465
  40637c:	20617461 	.word	0x20617461
  406380:	203a7369 	.word	0x203a7369
  406384:	00000a0d 	.word	0x00000a0d
  406388:	53200d0a 	.word	0x53200d0a
  40638c:	646e6174 	.word	0x646e6174
  406390:	20647261 	.word	0x20647261
  406394:	6d204446 	.word	0x6d204446
  406398:	61737365 	.word	0x61737365
  40639c:	72206567 	.word	0x72206567
  4063a0:	69656365 	.word	0x69656365
  4063a4:	20646576 	.word	0x20646576
  4063a8:	52206e69 	.word	0x52206e69
  4063ac:	75622078 	.word	0x75622078
  4063b0:	72656666 	.word	0x72656666
  4063b4:	6854202e 	.word	0x6854202e
  4063b8:	65722065 	.word	0x65722065
  4063bc:	76696563 	.word	0x76696563
  4063c0:	64206465 	.word	0x64206465
  4063c4:	20617461 	.word	0x20617461
  4063c8:	203a7369 	.word	0x203a7369
  4063cc:	00000a0d 	.word	0x00000a0d
  4063d0:	64252020 	.word	0x64252020
  4063d4:	00000000 	.word	0x00000000
  4063d8:	53200d0a 	.word	0x53200d0a
  4063dc:	646e6174 	.word	0x646e6174
  4063e0:	20647261 	.word	0x20647261
  4063e4:	6d204446 	.word	0x6d204446
  4063e8:	61737365 	.word	0x61737365
  4063ec:	72206567 	.word	0x72206567
  4063f0:	69656365 	.word	0x69656365
  4063f4:	20646576 	.word	0x20646576
  4063f8:	46206e69 	.word	0x46206e69
  4063fc:	204f4649 	.word	0x204f4649
  406400:	54202e30 	.word	0x54202e30
  406404:	72206568 	.word	0x72206568
  406408:	69656365 	.word	0x69656365
  40640c:	20646576 	.word	0x20646576
  406410:	61746164 	.word	0x61746164
  406414:	3a736920 	.word	0x3a736920
  406418:	000a0d20 	.word	0x000a0d20
  40641c:	53200d0a 	.word	0x53200d0a
  406420:	646e6174 	.word	0x646e6174
  406424:	20647261 	.word	0x20647261
  406428:	6d726f6e 	.word	0x6d726f6e
  40642c:	6d206c61 	.word	0x6d206c61
  406430:	61737365 	.word	0x61737365
  406434:	72206567 	.word	0x72206567
  406438:	69656365 	.word	0x69656365
  40643c:	20646576 	.word	0x20646576
  406440:	46206e69 	.word	0x46206e69
  406444:	204f4649 	.word	0x204f4649
  406448:	54202e30 	.word	0x54202e30
  40644c:	72206568 	.word	0x72206568
  406450:	69656365 	.word	0x69656365
  406454:	20646576 	.word	0x20646576
  406458:	61746164 	.word	0x61746164
  40645c:	3a736920 	.word	0x3a736920
  406460:	000a0d20 	.word	0x000a0d20
  406464:	45200d0a 	.word	0x45200d0a
  406468:	6e657478 	.word	0x6e657478
  40646c:	20646564 	.word	0x20646564
  406470:	6d204446 	.word	0x6d204446
  406474:	61737365 	.word	0x61737365
  406478:	72206567 	.word	0x72206567
  40647c:	69656365 	.word	0x69656365
  406480:	20646576 	.word	0x20646576
  406484:	46206e69 	.word	0x46206e69
  406488:	204f4649 	.word	0x204f4649
  40648c:	54202e31 	.word	0x54202e31
  406490:	72206568 	.word	0x72206568
  406494:	69656365 	.word	0x69656365
  406498:	20646576 	.word	0x20646576
  40649c:	61746164 	.word	0x61746164
  4064a0:	3a736920 	.word	0x3a736920
  4064a4:	000a0d20 	.word	0x000a0d20
  4064a8:	746f7250 	.word	0x746f7250
  4064ac:	6c6f636f 	.word	0x6c6f636f
  4064b0:	72726520 	.word	0x72726520
  4064b4:	202c726f 	.word	0x202c726f
  4064b8:	61656c70 	.word	0x61656c70
  4064bc:	64206573 	.word	0x64206573
  4064c0:	6c62756f 	.word	0x6c62756f
  4064c4:	68632065 	.word	0x68632065
  4064c8:	206b6365 	.word	0x206b6365
  4064cc:	20656874 	.word	0x20656874
  4064d0:	636f6c63 	.word	0x636f6c63
  4064d4:	6e69206b 	.word	0x6e69206b
  4064d8:	6f777420 	.word	0x6f777420
  4064dc:	616f6220 	.word	0x616f6220
  4064e0:	2e736472 	.word	0x2e736472
  4064e4:	0d0a0d20 	.word	0x0d0a0d20
  4064e8:	0000000a 	.word	0x0000000a
  4064ec:	434d203a 	.word	0x434d203a
  4064f0:	62204e41 	.word	0x62204e41
  4064f4:	6f207375 	.word	0x6f207375
  4064f8:	65206666 	.word	0x65206666
  4064fc:	726f7272 	.word	0x726f7272
  406500:	6572202c 	.word	0x6572202c
  406504:	696e692d 	.word	0x696e692d
  406508:	6c616974 	.word	0x6c616974
  40650c:	74617a69 	.word	0x74617a69
  406510:	2e6e6f69 	.word	0x2e6e6f69
  406514:	0d0a0d20 	.word	0x0d0a0d20
  406518:	0000000a 	.word	0x0000000a

0040651c <CMD_MODULE_DEFINITIONS>:
  40651c:	004006dd 00400745 00400739 00400729     ..@.E.@.9.@.).@.
  40652c:	00400719 0040070d 00400701 004006f1     ..@...@...@...@.
  40653c:	004006e1                                ..@.

00406540 <CMD_MODULE_LIST>:
  406540:	00000000 00000008 0040651c 6f480d0a     .........e@...Ho
  406550:	0000616c 0a204e4f 0000000d 2046464f     la..ON .....OFF 
  406560:	00000d0a 20315353 2044454c 74617473     ....SS1 LED stat
  406570:	203a7375 00000000 20315353 706d6554     us: ....SS1 Temp
  406580:	74617265 3a657275 20752520 00000d0a     erature: %u ....
  406590:	20325353 2044454c 74617473 203a7375     SS2 LED status: 
  4065a0:	00000000 20325353 706d6554 74617265     ....SS2 Temperat
  4065b0:	3a657275 20752520 00000d0a 63657845     ure: %u ....Exec
  4065c0:	64657475 6d6f6320 646e616d 6f632073     uted commands co
  4065d0:	3a746e75 20752520 00000d0a 726f6241     unt: %u ....Abor
  4065e0:	20646574 6d6d6f63 73646e61 756f6320     ted commands cou
  4065f0:	203a746e 0a207525 0000000d 7473614c     nt: %u .....Last
  406600:	65786520 65747563 6f632064 6e616d6d      executed comman
  406610:	44492064 7525203a 000d0a20 7473614c     d ID: %u ...Last
  406620:	6f626120 64657472 6d6f6320 646e616d      aborted command
  406630:	3a444920 20752520 00000d0a 756e654d      ID: %u ....Menu
  406640:	0a0d3a20 2d2d2020 6c655320 20746365      :..  -- Select 
  406650:	20656874 6d6d6f63 3a646e61 20200a0d     the command:..  
  406660:	44203a30 6c6e776f 2064616f 656c6574     0: Download tele
  406670:	7274656d 0d202e79 3120200a 6547203a     metry. ..  1: Ge
  406680:	50432074 65742055 7265706d 72757461     t CPU temperatur
  406690:	0d202e65 3220200a 7953203a 6d657473     e. ..  2: System
  4066a0:	203a3120 6e727574 204e4f20 75746361      1: turn ON actu
  4066b0:	726f7461 454c2820 202e2944 20200a0d     ator (LED). ..  
  4066c0:	53203a33 65747379 3a31206d 72757420     3: System 1: tur
  4066d0:	464f206e 63612046 74617574 2820726f     n OFF actuator (
  4066e0:	2944454c 0a0d202e 3a342020 73795320     LED). ..  4: Sys
  4066f0:	206d6574 67203a31 61207465 61757463     tem 1: get actua
  406700:	20726f74 74617473 28207375 2944454c     tor status (LED)
  406710:	0a0d202e 3a352020 73795320 206d6574     . ..  5: System 
  406720:	67203a31 74207465 65706d65 75746172     1: get temperatu
  406730:	72206572 2e646165 200a0d20 203a3620     re read. ..  6: 
  406740:	74737953 32206d65 7574203a 4f206e72     System 2: turn O
  406750:	6361204e 74617574 2820726f 2944454c     N actuator (LED)
  406760:	0a0d202e 3a372020 73795320 206d6574     . ..  7: System 
  406770:	74203a32 206e7275 2046464f 75746361     2: turn OFF actu
  406780:	726f7461 454c2820 202e2944 20200a0d     ator (LED). ..  
  406790:	53203a38 65747379 3a32206d 74656720     8: System 2: get
  4067a0:	74636120 6f746175 74732072 73757461      actuator status
  4067b0:	454c2820 202e2944 20200a0d 53203a39      (LED). ..  9: S
  4067c0:	65747379 3a32206d 74656720 6d657420     ystem 2: get tem
  4067d0:	61726570 65727574 61657220 0d202e64     perature read. .
  4067e0:	6120200a 6547203a 6f632074 6e616d6d     .  a: Get comman
  4067f0:	63207364 746e756f 20737265 756c6176     ds counters valu
  406800:	202e7365 20200a0d 44203a68 6c707369     es. ..  h: Displ
  406810:	6d207961 20756e65 0a0d0a0d 00000000     ay menu ........
  406820:	00006325 203a3020 6e776f44 64616f6c     %c.. 0: Download
  406830:	6c657420 74656d65 202e7972 00000a0d      telemetry. ....
  406840:	203a3120 20746547 20555043 706d6574      1: Get CPU temp
  406850:	74617265 2e657275 000a0d20 203a3220     erature. ... 2: 
  406860:	74737953 31206d65 7574203a 4f206e72     System 1: turn O
  406870:	6361204e 74617574 2820726f 2944454c     N actuator (LED)
  406880:	0a0d202e 00000000 203a3320 74737953     . ...... 3: Syst
  406890:	31206d65 7574203a 4f206e72 61204646     em 1: turn OFF a
  4068a0:	61757463 20726f74 44454c28 0d202e29     ctuator (LED). .
  4068b0:	0000000a 203a3420 74737953 31206d65     .... 4: System 1
  4068c0:	6567203a 63612074 74617574 7320726f     : get actuator s
  4068d0:	75746174 4c282073 2e294445 000a0d20     tatus (LED). ...
  4068e0:	203a3520 74737953 31206d65 6567203a      5: System 1: ge
  4068f0:	65742074 7265706d 72757461 65722065     t temperature re
  406900:	202e6461 00000a0d 203a3620 74737953     ad. .... 6: Syst
  406910:	32206d65 7574203a 4f206e72 6361204e     em 2: turn ON ac
  406920:	74617574 2820726f 2944454c 0a0d202e     tuator (LED). ..
  406930:	00000000 203a3720 74737953 32206d65     .... 7: System 2
  406940:	7574203a 4f206e72 61204646 61757463     : turn OFF actua
  406950:	20726f74 44454c28 0d202e29 0000000a     tor (LED). .....
  406960:	203a3820 74737953 32206d65 6567203a      8: System 2: ge
  406970:	63612074 74617574 7320726f 75746174     t actuator statu
  406980:	4c282073 2e294445 000a0d20 203a3920     s (LED). ... 9: 
  406990:	74737953 32206d65 6567203a 65742074     System 2: get te
  4069a0:	7265706d 72757461 65722065 202e6461     mperature read. 
  4069b0:	00000a0d 6d6d6f43 73646e61 756f6320     ....Commands cou
  4069c0:	7265746e 000a0d73 65784520 65747563     nters... Execute
  4069d0:	6f632064 6e616d6d 203a7364 0a207525     d commands: %u .
  4069e0:	0000000d 6f624120 64657472 6d6f6320     .... Aborted com
  4069f0:	646e616d 25203a73 0d0a2075 00000000     mands: %u ......

00406a00 <_global_impure_ptr>:
  406a00:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  406a10:	46454443 00000000 33323130 37363534     CDEF....01234567
  406a20:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406a30:	0000296c                                l)..

00406a34 <blanks.7217>:
  406a34:	20202020 20202020 20202020 20202020                     

00406a44 <zeroes.7218>:
  406a44:	30303030 30303030 30303030 30303030     0000000000000000

00406a54 <basefix.6805>:
  406a54:	0001000a 00030002 00050004 00070006     ................
  406a64:	00090008 000b000a 000d000c 000f000e     ................
  406a74:	00000010 00000043 49534f50 00000058     ....C...POSIX...
  406a84:	0000002e                                ....

00406a88 <_ctype_>:
  406a88:	20202000 20202020 28282020 20282828     .         ((((( 
  406a98:	20202020 20202020 20202020 20202020                     
  406aa8:	10108820 10101010 10101010 10101010      ...............
  406ab8:	04040410 04040404 10040404 10101010     ................
  406ac8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406ad8:	01010101 01010101 01010101 10101010     ................
  406ae8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406af8:	02020202 02020202 02020202 10101010     ................
  406b08:	00000020 00000000 00000000 00000000      ...............
	...

00406b8c <_init>:
  406b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406b8e:	bf00      	nop
  406b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406b92:	bc08      	pop	{r3}
  406b94:	469e      	mov	lr, r3
  406b96:	4770      	bx	lr

00406b98 <__init_array_start>:
  406b98:	00403b49 	.word	0x00403b49

00406b9c <__frame_dummy_init_array_entry>:
  406b9c:	0040018d                                ..@.

00406ba0 <_fini>:
  406ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ba2:	bf00      	nop
  406ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406ba6:	bc08      	pop	{r3}
  406ba8:	469e      	mov	lr, r3
  406baa:	4770      	bx	lr

00406bac <__fini_array_start>:
  406bac:	00400169 	.word	0x00400169
